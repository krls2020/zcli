// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.3
// source: zeropsApiProtocol.proto

package zBusinessZeropsApiProtocol

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	ErrorCode_NO_ERROR                                                        ErrorCode = 0
	ErrorCode_INTERNAL_SERVER_ERROR                                           ErrorCode = 1
	ErrorCode_NOT_FOUND                                                       ErrorCode = 326
	ErrorCode_INVALID_USER_INPUT                                              ErrorCode = 2
	ErrorCode_INVALID_USER_INPUT_WITH_TEXT                                    ErrorCode = 3
	ErrorCode_NOT_AUTHORIZED                                                  ErrorCode = 4
	ErrorCode_INSUFFICIENT_PRIVILEGES                                         ErrorCode = 5
	ErrorCode_REFRESH_TOKEN_INVALID                                           ErrorCode = 6
	ErrorCode_ENDPOINT_NOT_FOUND                                              ErrorCode = 7
	ErrorCode_POTENTIALLY_FRAUD_BEHAVIOR_DETECTED                             ErrorCode = 8
	ErrorCode_RE_CAPTCHA_RESPONSE_INVALID                                     ErrorCode = 9
	ErrorCode_DOWNLOAD_TOKEN_INVALID_OR_EXPIRED                               ErrorCode = 10
	ErrorCode_INCORRECT_USER_CREDENTIALS                                      ErrorCode = 11
	ErrorCode_NO_RIGHTS_TO_SELECTED_ACTION                                    ErrorCode = 12
	ErrorCode_FILE_SIZE_LIMIT_EXCEEDED                                        ErrorCode = 13
	ErrorCode_ADDITIONAL_VERIFICATION_FAILED                                  ErrorCode = 14
	ErrorCode_AT_LEAST_ONE_MANAGER                                            ErrorCode = 191
	ErrorCode_ACTIVE_USER_MUST_BE_CONNECTED_TO_AT_LEAST_ONE_CLIENT            ErrorCode = 15
	ErrorCode_INVALID_CREDENTIALS                                             ErrorCode = 16
	ErrorCode_PASSWORD_TOO_SHORT                                              ErrorCode = 270
	ErrorCode_PASSWORD_TOO_LONG                                               ErrorCode = 269
	ErrorCode_NO_ACTIVE_CONNECTION_TO_ANY_CLIENT                              ErrorCode = 18
	ErrorCode_NO_ACTIVE_CONNECTION_TO_CURRENT_CLIENT                          ErrorCode = 19
	ErrorCode_TOKEN_EXPIRED                                                   ErrorCode = 20
	ErrorCode_CLIENT_NOT_FOUND                                                ErrorCode = 21
	ErrorCode_NO_ACCESS_TO_ZEROPS                                             ErrorCode = 22
	ErrorCode_USER_NOT_FOUND                                                  ErrorCode = 23
	ErrorCode_INVALID_DOCUMENT_ROOT                                           ErrorCode = 24
	ErrorCode_INVALID_ENTRYPOINT                                              ErrorCode = 25
	ErrorCode_INVALID_INIT_COMMANDS                                           ErrorCode = 280
	ErrorCode_DOWNLOAD_EXPIRED                                                ErrorCode = 26
	ErrorCode_MULTIPLE_ACCOUNTS_CONNECTED                                     ErrorCode = 334
	ErrorCode_USER_DATA_NOT_FOUND                                             ErrorCode = 27
	ErrorCode_USER_DATA_KEY_INVALID                                           ErrorCode = 28
	ErrorCode_USER_DATA_CONTENT_INVALID                                       ErrorCode = 29
	ErrorCode_USER_DATA_USE_OF_SYSTEM_KEY                                     ErrorCode = 180
	ErrorCode_USER_DATA_DELETE_FORBIDDEN                                      ErrorCode = 30
	ErrorCode_USER_DATA_DUPLICATE_KEY                                         ErrorCode = 31
	ErrorCode_USER_DATA_SYNC_RUNNING                                          ErrorCode = 32
	ErrorCode_USER_DATA_VERSION_MISMATCH                                      ErrorCode = 168
	ErrorCode_USER_TOKEN_NOT_FOUND                                            ErrorCode = 227
	ErrorCode_USER_ACCOUNT_NOT_FOUND                                          ErrorCode = 34
	ErrorCode_TEMPLATE_NOT_FOUND                                              ErrorCode = 35
	ErrorCode_COUNTRY_CALLING_CODE_DOES_NOT_MATCH_PHONE_NUMBER                ErrorCode = 36
	ErrorCode_INVALID_PHONE_NUMBER                                            ErrorCode = 37
	ErrorCode_INVALID_USER_ROLE                                               ErrorCode = 38
	ErrorCode_INVALID_CLIENT_USER_GROUP_COMBINATION                           ErrorCode = 39
	ErrorCode_EMAIL_EXISTS                                                    ErrorCode = 40
	ErrorCode_USER_ALREADY_CONNECTED_TO_COMPANY                               ErrorCode = 41
	ErrorCode_COUNTRY_NOT_FOUND                                               ErrorCode = 42
	ErrorCode_RECORD_NOT_FOUND                                                ErrorCode = 43
	ErrorCode_MAXIMUM_NUMBER_OF_CLIENT_EXCEEDED                               ErrorCode = 44
	ErrorCode_USER_IS_NOT_IN_BEING_DELETED_STATUS                             ErrorCode = 45
	ErrorCode_UNABLE_TO_DELETE_YOUR_OWN_ACCOUNT                               ErrorCode = 46
	ErrorCode_CLIENT_USER_CONNECTION_NOT_FOUND                                ErrorCode = 47
	ErrorCode_CLIENT_USER_CONNECTION_HAS_BEEN_DELETED                         ErrorCode = 48
	ErrorCode_BAD_OR_EXPIRED_ACTIVATION_LINK                                  ErrorCode = 49
	ErrorCode_UNABLE_TO_EDIT_DELETED_USER                                     ErrorCode = 50
	ErrorCode_CLIENT_USER_ALREADY_BEEN_DELETED                                ErrorCode = 51
	ErrorCode_LANGUAGE_NOT_FOUND                                              ErrorCode = 52
	ErrorCode_LANGUAGE_NOT_SUPPORTED                                          ErrorCode = 53
	ErrorCode_DUPLICATED_USER                                                 ErrorCode = 54
	ErrorCode_RECORD_IS_READ_ONLY                                             ErrorCode = 55
	ErrorCode_RECORD_IS_DELETED                                               ErrorCode = 56
	ErrorCode_RECORD_COMMON_KEY_EDIT                                          ErrorCode = 57
	ErrorCode_SERVICE_STACK_NOT_FOUND                                         ErrorCode = 61
	ErrorCode_SERVICE_STACK_TYPE_NOT_FOUND                                    ErrorCode = 62
	ErrorCode_SERVICE_STACK_TYPE_VERSION_NOT_FOUND                            ErrorCode = 63
	ErrorCode_SERVICE_STACK_TYPE_VERSION_IS_NOT_ACTIVE                        ErrorCode = 64
	ErrorCode_SERVICE_STACK_TYPE_VERSION_REMOVE_DEFAULT                       ErrorCode = 65
	ErrorCode_SERVICE_STACK_TYPE_INVALID_VERSION                              ErrorCode = 66
	ErrorCode_SERVICE_STACK_IS_FAILED                                         ErrorCode = 67
	ErrorCode_SERVICE_STACK_IS_SYSTEM_NOT_SUPPORTED                           ErrorCode = 68
	ErrorCode_SERVICE_STACK_CUSTOM_PORTS_ENABLED_REQUIRED                     ErrorCode = 69
	ErrorCode_SERVICE_STACK_TYPE_VERSION_NOT_MATCH_WITH_STACK_TYPE            ErrorCode = 70
	ErrorCode_SERVICE_STACK_STORAGE_DISK_MAX_LIMIT                            ErrorCode = 71
	ErrorCode_SERVICE_STACK_STORAGE_DISK_MIN_LIMIT                            ErrorCode = 72
	ErrorCode_SERVICE_STACK_OBJECT_STORAGE_QUOTA_NOT_FOUND                    ErrorCode = 73
	ErrorCode_SERVICE_STACK_INIT_COMMANDS_NOT_FOUND                           ErrorCode = 281
	ErrorCode_SERVICE_STACK_TYPE_OBJECT_STORAGE_REQUIRED                      ErrorCode = 74
	ErrorCode_SERVICE_STACK_TYPE_OBJECT_STORAGE_FORBIDDEN                     ErrorCode = 75
	ErrorCode_SERVICE_STACK_TYPE_SHARED_STORAGE_FORBIDDEN                     ErrorCode = 76
	ErrorCode_SERVICE_STACK_TYPE_STANDARD_FORBIDDEN                           ErrorCode = 242
	ErrorCode_SERVICE_STACK_IS_READY_TO_DEPLOY                                ErrorCode = 77
	ErrorCode_SERVICE_STACK_IS_NOT_HTTP                                       ErrorCode = 78
	ErrorCode_SERVICE_STACK_RELOAD_NOT_AVAILABLE                              ErrorCode = 79
	ErrorCode_SERVICE_STACK_NGINX_CONFIG                                      ErrorCode = 194
	ErrorCode_SERVICE_STACK_SUBDOMAIN_ACCESS_ALREADY_DISABLED                 ErrorCode = 81
	ErrorCode_SERVICE_STACK_CREATING                                          ErrorCode = 178
	ErrorCode_SERVICE_STACK_UPGRADING                                         ErrorCode = 179
	ErrorCode_SERVICE_STACK_INVALID_CATEGORY                                  ErrorCode = 203
	ErrorCode_SERVICE_STACK_STATUS_NOT_SUPPORTED                              ErrorCode = 265
	ErrorCode_SERVICE_STACK_USER_NAME_INVALID                                 ErrorCode = 282
	ErrorCode_ACTIVE_SERVICE_STACK_REQUIRED                                   ErrorCode = 283
	ErrorCode_USER_APPLICATION_RUNTIME_SERVICE_STACK_REQUIRED                 ErrorCode = 284
	ErrorCode_SHARED_STORAGE_NONEMPTY_CONNECTED_STACKS_FORBIDDEN              ErrorCode = 329
	ErrorCode_SHARED_STORAGE_SERVICE_STACK_INACTIVE                           ErrorCode = 328
	ErrorCode_PROCESS_NOT_FOUND                                               ErrorCode = 82
	ErrorCode_PROCESS_IS_ALREADY_OVER                                         ErrorCode = 83
	ErrorCode_PROCESS_IS_ALREADY_RUNNING                                      ErrorCode = 85
	ErrorCode_UNABLE_TO_CREATE_PROCESS                                        ErrorCode = 87
	ErrorCode_CREATE_PROCESS_QUEUED_PROJECT_PROCESS_COUNT_EXCEEDED            ErrorCode = 323
	ErrorCode_MANUAL_REPAIR_REQUIRED                                          ErrorCode = 59
	ErrorCode_NOTHING_TO_SYNC                                                 ErrorCode = 60
	ErrorCode_IS_NOT_POSSIBLE_TO_EDIT_ANOTHER_USER                            ErrorCode = 58
	ErrorCode_ACTIVE_SERVICE_STACK_EXISTS_IN_PROJECT                          ErrorCode = 88
	ErrorCode_INVALID_OLD_PASSWORD                                            ErrorCode = 89
	ErrorCode_PROJECT_STATUS_NOT_SUPPORTED                                    ErrorCode = 90
	ErrorCode_PROJECT_NOT_FOUND                                               ErrorCode = 91
	ErrorCode_PROJECT_IS_NOT_ACTIVE                                           ErrorCode = 167
	ErrorCode_SERVICE_STACK_NAME_UNAVAILABLE                                  ErrorCode = 92
	ErrorCode_SERVICE_STACK_NAME_INVALID                                      ErrorCode = 93
	ErrorCode_CORE_SERVICE_STACK_TYPE_VERSION_NOT_FOUND                       ErrorCode = 94
	ErrorCode_L7_HTTP_BALANCER_SERVICE_STACK_TYPE_VERSION_NOT_FOUND           ErrorCode = 95
	ErrorCode_PROJECT_WILL_BE_DELETED                                         ErrorCode = 96
	ErrorCode_PROJECT_WILL_BE_STARTED                                         ErrorCode = 256
	ErrorCode_PROJECT_WILL_BE_STOPPED                                         ErrorCode = 257
	ErrorCode_STACK_WILL_BE_DELETED                                           ErrorCode = 97
	ErrorCode_STACK_OF_PROJECT_WILL_BE_DELETED                                ErrorCode = 286
	ErrorCode_STACK_OF_PROJECT_WILL_BE_CREATED                                ErrorCode = 287
	ErrorCode_USER_DATA_OF_PROJECT_WILL_BE_SYNCED                             ErrorCode = 288
	ErrorCode_PUBLIC_HTTP_ROUTING_NOT_FOUND                                   ErrorCode = 98
	ErrorCode_PUBLIC_HTTP_ROUTING_AT_LEAST_ONE_DOMAIN_REQUIRED                ErrorCode = 99
	ErrorCode_PUBLIC_HTTP_ROUTING_DUPLICATE_DOMAIN_NAME                       ErrorCode = 100
	ErrorCode_PUBLIC_HTTP_ROUTING_DUPLICATE_FALLBACK                          ErrorCode = 101
	ErrorCode_PUBLIC_HTTP_ROUTING_DUPLICATE_DOMAIN_NAME_IN_ANOTHER_ROUTING    ErrorCode = 102
	ErrorCode_PUBLIC_HTTP_ROUTING_DUPLICATE_FALLBACK_IN_ANOTHER_ROUTING       ErrorCode = 103
	ErrorCode_PUBLIC_HTTP_ROUTING_DUPLICATE_LOCATION_PATHS                    ErrorCode = 104
	ErrorCode_PUBLIC_HTTP_ROUTING_ITEMS_LIMIT                                 ErrorCode = 105
	ErrorCode_PUBLIC_HTTP_ROUTING_LOCATIONS_LIMIT                             ErrorCode = 106
	ErrorCode_PUBLIC_HTTP_ROUTING_DOMAINS_LIMIT                               ErrorCode = 107
	ErrorCode_PUBLIC_HTTP_ROUTING_INVALID_DOMAIN_NAME_FQDN                    ErrorCode = 108
	ErrorCode_PUBLIC_HTTP_ROUTING_SSL_FALLBACK                                ErrorCode = 109
	ErrorCode_PUBLIC_HTTP_ROUTING_LOCATION_DOES_NOT_FOUND                     ErrorCode = 110
	ErrorCode_PUBLIC_HTTP_ROUTING_INVALID_LOCATIONS_PREFIX                    ErrorCode = 111
	ErrorCode_PUBLIC_HTTP_ROUTING_MULTIPLE_SERVICE_STACK_ACCESS_POINTS        ErrorCode = 112
	ErrorCode_PUBLIC_HTTP_ROUTING_SERVICE_STACK_ACCESS_POINT_NOT_FOUND        ErrorCode = 113
	ErrorCode_PUBLIC_HTTP_ROUTING_REQUEST_ONLY_TCP_PORT                       ErrorCode = 114
	ErrorCode_PUBLIC_HTTP_ROUTING_SERVICE_STACK_DOES_NOT_SUPPORT_HTTP         ErrorCode = 115
	ErrorCode_PUBLIC_HTTP_ROUTING_FORBIDDEN_ZEROPS_SUBDOMAIN_SUFFIX           ErrorCode = 327
	ErrorCode_NO_PUBLIC_HTTP_ROUTING_IN_L7_HTTP_BALANCING                     ErrorCode = 116
	ErrorCode_SSL_NOT_SUPPORTED                                               ErrorCode = 117
	ErrorCode_REGISTERED_DOMAIN_HOST_LIMIT_REACHED                            ErrorCode = 118
	ErrorCode_PUBLIC_SUFFIX_LIST_CONTROL_FAILED                               ErrorCode = 119
	ErrorCode_PORT_NOT_SUPPORTED                                              ErrorCode = 120
	ErrorCode_PUBLIC_HTTP_ROUTING_SYNC_RUNNING                                ErrorCode = 121
	ErrorCode_PUBLIC_HTTP_ROUTING_VERSION_MISMATCH                            ErrorCode = 169
	ErrorCode_PORT_OUT_OF_RANGE                                               ErrorCode = 122
	ErrorCode_PORT_PROTOCOL_INVALID                                           ErrorCode = 123
	ErrorCode_PORT_SCHEME_INVALID                                             ErrorCode = 124
	ErrorCode_UDP_PROTOCOL_SCHEME_MISMATCH                                    ErrorCode = 125
	ErrorCode_PUBLIC_IP_REQUEST_NOT_FOUND                                     ErrorCode = 126
	ErrorCode_PUBLIC_IP_REQUEST_ONLY_ONE                                      ErrorCode = 128
	ErrorCode_PUBLIC_IP_REQUEST_RELEASE_RUNNING                               ErrorCode = 130
	ErrorCode_USER_NOTIFICATION_NOT_FOUND                                     ErrorCode = 131
	ErrorCode_PUBLIC_PORT_ROUTING_NOT_FOUND                                   ErrorCode = 132
	ErrorCode_PUBLIC_IP_TYPE_NOT_SUPPORTED                                    ErrorCode = 133
	ErrorCode_PORT_AND_PROTOCOL_COMBINATION_NOT_SUPPORTED                     ErrorCode = 134
	ErrorCode_PUBLIC_PORT_ROUTING_DUPLICATE_RULE                              ErrorCode = 135
	ErrorCode_INTERNAL_PORT_DUPLICATE_RULE                                    ErrorCode = 181
	ErrorCode_PUBLIC_PORT_ROUTING_SYNC_RUNNING                                ErrorCode = 136
	ErrorCode_PUBLIC_PORT_ROUTING_INVALID_IP_FORMAT                           ErrorCode = 137
	ErrorCode_PUBLIC_PORT_ROUTING_FIREWALL_POLICY_CONFLICT                    ErrorCode = 138
	ErrorCode_PUBLIC_PORT_ROUTING_VERSION_MISMATCH                            ErrorCode = 170
	ErrorCode_PUBLIC_PORT_ROUTING_UNABLE_TO_EDIT_DELETED_RECORD               ErrorCode = 139
	ErrorCode_PUBLIC_PORT_ROUTING_UNABLE_TO_EDIT_PORTS_ON_SYSTEM_SERVICE      ErrorCode = 190
	ErrorCode_DRIVER_NOT_FOUND                                                ErrorCode = 140
	ErrorCode_DRIVER_ENTITY_IS_NOT_SERVICE_STACK                              ErrorCode = 141
	ErrorCode_DRIVER_ALREADY_SET                                              ErrorCode = 142
	ErrorCode_CLIENT_USER_CONNECTION_ALREADY_EXISTS                           ErrorCode = 143
	ErrorCode_USER_ALREADY_ASSIGNED                                           ErrorCode = 144
	ErrorCode_SERVICE_STACK_TYPE_USER_STORAGE_REQUIRED                        ErrorCode = 145
	ErrorCode_APP_VERSION_NOT_FOUND                                           ErrorCode = 146
	ErrorCode_APP_VERSION_INVALID_STATUS                                      ErrorCode = 147
	ErrorCode_DEPLOY_PROCESS_ALREADY_CREATED                                  ErrorCode = 148
	ErrorCode_OBJECT_CONTENT_LENGTH_ZERO                                      ErrorCode = 149
	ErrorCode_OBJECT_MIME_TYPE_NOT_SUPPORTED                                  ErrorCode = 150
	ErrorCode_OBJECT_NOT_FOUND                                                ErrorCode = 151
	ErrorCode_MAX_OBJECT_DISK_SIZE_ESTIMATE_EXCEEDED                          ErrorCode = 152
	ErrorCode_APP_VERSION_IS_ACTIVE                                           ErrorCode = 226
	ErrorCode_APP_VERSION_NO_ACTIVE_FOUND                                     ErrorCode = 310
	ErrorCode_APP_VERSION_IS_BEING_DEPLOYED                                   ErrorCode = 196
	ErrorCode_APP_VERSION_IS_BEING_BUILT                                      ErrorCode = 197
	ErrorCode_APP_VERSION_IS_NOT_BEING_UPLOADED                               ErrorCode = 198
	ErrorCode_APP_VERSION_DEPLOYING_FAILED                                    ErrorCode = 199
	ErrorCode_APP_VERSION_BUILDING_FAILED                                     ErrorCode = 200
	ErrorCode_APP_VERSION_YAML_PARSE_FAILED                                   ErrorCode = 225
	ErrorCode_APP_VERSION_YAML_CONFIG_REQUIRED                                ErrorCode = 324
	ErrorCode_APP_VERSION_DATA_NOT_AVAILABLE                                  ErrorCode = 285
	ErrorCode_APP_VERSION_ACTIVE_HAS_DEFAULT_RUNTIME                          ErrorCode = 306
	ErrorCode_SHARED_STORAGE_NOT_FOUND                                        ErrorCode = 153
	ErrorCode_SHARED_STORAGE_INVALID_PROJECT                                  ErrorCode = 154
	ErrorCode_SERVICE_STACK_CONNECTION_NOT_FOUND                              ErrorCode = 155
	ErrorCode_SHARED_STORAGE_INVALID_CATEGORY                                 ErrorCode = 156
	ErrorCode_USER_SERVICE_STACK_INVALID_CATEGORY                             ErrorCode = 157
	ErrorCode_IDENTICAL_SHARED_STORAGE_AND_SERVICE_STACK                      ErrorCode = 158
	ErrorCode_CLIENT_ID_PROJECT_SERVICE_STACK_MISSING                         ErrorCode = 159
	ErrorCode_DIFFERENT_PROJECT_IDS                                           ErrorCode = 160
	ErrorCode_STATS_HISTORY_SEARCH_LIMIT_INVALID                              ErrorCode = 171
	ErrorCode_STATS_HISTORY_SEARCH_TIME_GROUP_BY_INVALID                      ErrorCode = 192
	ErrorCode_STATS_HISTORY_SEARCH_ID_FILTER_INVALID                          ErrorCode = 172
	ErrorCode_STATS_HISTORY_SEARCH_PROJECT_ID_REQUIRED                        ErrorCode = 173
	ErrorCode_STATS_HISTORY_SEARCH_SUBSCRIPTION_NOT_SUPPORTED                 ErrorCode = 174
	ErrorCode_STATS_HISTORY_SEARCH_HISTORY_LIMIT_REACHED                      ErrorCode = 193
	ErrorCode_STATS_HISTORY_SEARCH_RANGE_INVALID                              ErrorCode = 274
	ErrorCode_STATS_HISTORY_SEARCH_EITHER_RANGE_OR_LIMIT_REQUIRED             ErrorCode = 278
	ErrorCode_STATS_HISTORY_SEARCH_FULL_RANGE_REQUIRED                        ErrorCode = 276
	ErrorCode_TRANSACTION_DEBIT_SEARCH_LIMIT_INVALID                          ErrorCode = 260
	ErrorCode_TRANSACTION_DEBIT_SEARCH_TIME_GROUP_BY_INVALID                  ErrorCode = 261
	ErrorCode_TRANSACTION_DEBIT_SEARCH_RANGE_INVALID                          ErrorCode = 273
	ErrorCode_TRANSACTION_DEBIT_SEARCH_CLIENT_ID_REQUIRED                     ErrorCode = 262
	ErrorCode_TRANSACTION_DEBIT_SEARCH_ID_FILTER_INVALID                      ErrorCode = 263
	ErrorCode_TRANSACTION_DEBIT_SEARCH_EITHER_RANGE_OR_LIMIT_REQUIRED         ErrorCode = 277
	ErrorCode_TRANSACTION_DEBIT_SEARCH_FULL_RANGE_REQUIRED                    ErrorCode = 272
	ErrorCode_TRANSACTION_DEBIT_SEARCH_TILL_AND_FROM_DATE_TIMEZONES_DIFFER    ErrorCode = 300
	ErrorCode_TRANSACTION_DEBIT_SEARCH_UNKNOWN_TIMEZONE                       ErrorCode = 301
	ErrorCode_TRANSACTION_DEBIT_SEARCH_INVALID_FILTER                         ErrorCode = 271
	ErrorCode_GITHUB_VERIFICATION_EXPIRED                                     ErrorCode = 188
	ErrorCode_INVALID_GITHUB_TOKEN_ACTION                                     ErrorCode = 182
	ErrorCode_GITHUB_REQUEST_FAILED                                           ErrorCode = 183
	ErrorCode_GITHUB_AUTHORIZATION_REQUIRED                                   ErrorCode = 184
	ErrorCode_GITHUB_EMAIL_ACCESS_REQUIRED                                    ErrorCode = 185
	ErrorCode_GITHUB_NO_VERIFIED_EMAIL_FOUND                                  ErrorCode = 186
	ErrorCode_GITHUB_REPOSITORY_ACCESS_REQUIRED                               ErrorCode = 187
	ErrorCode_GITHUB_RATE_LIMIT_EXCEEDED                                      ErrorCode = 189
	ErrorCode_SERVICE_STACK_NO_GITHUB_INTEGRATION                             ErrorCode = 206
	ErrorCode_BRANCH_NAME_REQUIRED                                            ErrorCode = 207
	ErrorCode_TRIGGER_BUILD_REQUIRES_BRANCH_EVENT_TYPE                        ErrorCode = 268
	ErrorCode_USER_SERVICE_STACK_REQUIRED                                     ErrorCode = 208
	ErrorCode_NO_EXTERNAL_REPOSITORY_INTEGRATION                              ErrorCode = 209
	ErrorCode_GITHUB_BRANCH_DELETED                                           ErrorCode = 210
	ErrorCode_GITHUB_WEBHOOK_DELETED                                          ErrorCode = 211
	ErrorCode_GITHUB_WEBHOOK_INVALID_PARAMETERS                               ErrorCode = 212
	ErrorCode_UNEXPECTED_GITHUB_FILE_ENCODING                                 ErrorCode = 218
	ErrorCode_ZEROPS_BUILD_FILE_NOT_FOUND                                     ErrorCode = 219
	ErrorCode_INCORRECT_WEBHOOK_SECRET                                        ErrorCode = 213
	ErrorCode_UNSUPPORTED_WEBHOOK_EVENT_TYPE                                  ErrorCode = 214
	ErrorCode_REPOSITORY_DOES_NOT_MATCH_SERVICE_STACK_SETTINGS                ErrorCode = 215
	ErrorCode_PROJECT_STATUS_NOT_IN_NEW_CREATING_ACTIVE                       ErrorCode = 216
	ErrorCode_GITHUB_PUSH_IGNORED                                             ErrorCode = 217
	ErrorCode_ZEROPS_BUILD_FILE_TOO_LARGE                                     ErrorCode = 204
	ErrorCode_SAME_SERVICE_STACK_TYPE_USED                                    ErrorCode = 205
	ErrorCode_GITHUB_WRONG_REPOSITORY_FULL_NAME_FORMAT                        ErrorCode = 220
	ErrorCode_GITHUB_WEBHOOKS_LIMIT_EXCEEDED                                  ErrorCode = 221
	ErrorCode_AVATAR_UPLOAD_FORBIDDEN_IMAGE_TYPE                              ErrorCode = 222
	ErrorCode_AVATAR_UPLOAD_MAX_SIZE                                          ErrorCode = 223
	ErrorCode_AVATAR_UPLOAD_FILE_NOT_FOUND                                    ErrorCode = 224
	ErrorCode_GITLAB_RATE_LIMIT_EXCEEDED                                      ErrorCode = 228
	ErrorCode_GITLAB_VERIFICATION_EXPIRED                                     ErrorCode = 229
	ErrorCode_INVALID_GITLAB_TOKEN_ACTION                                     ErrorCode = 230
	ErrorCode_GITLAB_REQUEST_FAILED                                           ErrorCode = 231
	ErrorCode_GITLAB_AUTHORIZATION_REQUIRED                                   ErrorCode = 232
	ErrorCode_GITLAB_FULL_API_ACCESS_REQUIRED                                 ErrorCode = 233
	ErrorCode_MULTIPLE_INTEGRATIONS_ARE_FORBIDDEN                             ErrorCode = 234
	ErrorCode_GITLAB_BRANCH_DELETED                                           ErrorCode = 235
	ErrorCode_GITLAB_WEBHOOK_DELETED                                          ErrorCode = 236
	ErrorCode_GITLAB_WEBHOOK_INVALID_PARAMETERS                               ErrorCode = 237
	ErrorCode_SERVICE_STACK_NO_GITLAB_INTEGRATION                             ErrorCode = 238
	ErrorCode_GITLAB_PUSH_IGNORED                                             ErrorCode = 239
	ErrorCode_YAML_FIELD_LENGTH_ERROR                                         ErrorCode = 240
	ErrorCode_YAML_WRONG_USE_FIELD_TYPE                                       ErrorCode = 241
	ErrorCode_VAT_NUMBER_NOT_IN_EUCOUNTRY                                     ErrorCode = 254
	ErrorCode_COMPANY_NOT_FOUND_IN_EU                                         ErrorCode = 258
	ErrorCode_VAT_NUMBER_MISSING                                              ErrorCode = 244
	ErrorCode_PAYMENT_IN_PROGRESS                                             ErrorCode = 245
	ErrorCode_DUPLICATE_VAT_NUMBER                                            ErrorCode = 250
	ErrorCode_DUPLICATE_COMPANY_NUMBER                                        ErrorCode = 302
	ErrorCode_CURRENCY_CHANGE                                                 ErrorCode = 303
	ErrorCode_ADMIN_USER_ACCOUNT_EXISTS                                       ErrorCode = 266
	ErrorCode_CREDIT_LIMIT_REACHED                                            ErrorCode = 246
	ErrorCode_INSUFFICIENT_CREDIT                                             ErrorCode = 247
	ErrorCode_PROJECT_LOCK_FAILED                                             ErrorCode = 248
	ErrorCode_PROJECT_UPDATE_FAILED                                           ErrorCode = 249
	ErrorCode_MAXIMUM_AMOUNT_EXCEEDED                                         ErrorCode = 267
	ErrorCode_PAYMENT_FAILED_ERROR                                            ErrorCode = 252
	ErrorCode_PAYMENT_NOT_FOUND                                               ErrorCode = 253
	ErrorCode_ADDON_NOT_FOUND                                                 ErrorCode = 255
	ErrorCode_INVOICE_NOT_FOUND                                               ErrorCode = 259
	ErrorCode_PRICE_LIST_NOT_FOUND                                            ErrorCode = 264
	ErrorCode_COST_LIMIT_TOO_SMALL                                            ErrorCode = 279
	ErrorCode_PROJECT_IMPORT_INVALID_YAML                                     ErrorCode = 289
	ErrorCode_PROJECT_IMPORT_INVALID_CONFIG_STRUCTURE                         ErrorCode = 290
	ErrorCode_PROJECT_IMPORT_INVALID_PARAMETER                                ErrorCode = 295
	ErrorCode_PROJECT_IMPORT_INVALID_TYPE_VERSION                             ErrorCode = 292
	ErrorCode_PROJECT_IMPORT_MISSING_PARAMETER                                ErrorCode = 293
	ErrorCode_PROJECT_IMPORT_UNABLE_TO_CREATE_SERVICE_STACK                   ErrorCode = 294
	ErrorCode_PROJECT_IMPORT_PROJECT_INCLUDED                                 ErrorCode = 296
	ErrorCode_PROJECT_IMPORT_PROJECT_MISSING                                  ErrorCode = 297
	ErrorCode_PROJECT_IMPORT_MISSING_SERVICE                                  ErrorCode = 298
	ErrorCode_INVALID_CUSTOM_AUTOSCALING_VALUE                                ErrorCode = 309
	ErrorCode_INVALID_CUSTOM_AUTOSCALING_CPU_RAM_RATIO                        ErrorCode = 335
	ErrorCode_CUSTOM_VERTICAL_AUTOSCALING_FORBIDDEN_FOR_THIS_STACK_CATEGORY   ErrorCode = 305
	ErrorCode_CUSTOM_HORIZONTAL_AUTOSCALING_FORBIDDEN_FOR_THIS_STACK_CATEGORY ErrorCode = 307
	ErrorCode_CUSTOM_HORIZONTAL_AUTOSCALING_FORBIDDEN_IN_NON_HA_MODE          ErrorCode = 308
	ErrorCode_ACTION_FORBIDDEN_FOR_THIS_STACK_CATEGORY                        ErrorCode = 311
	ErrorCode_MODE_UPDATE_FORBIDDEN_FOR_THIS_STACK_CATEGORY                   ErrorCode = 312
	ErrorCode_YAML_VALIDATION_INVALID_YAML                                    ErrorCode = 304
	ErrorCode_UNEXPECTED_YAML_ENCODING                                        ErrorCode = 325
	ErrorCode_BUCKET_ALREADY_EXISTS                                           ErrorCode = 336
	ErrorCode_S3_API_REQUEST_FAILED                                           ErrorCode = 337
	ErrorCode_USER_ID_WAS_NOT_FOUND                                           ErrorCode = 161
	ErrorCode_AUTHOR_ID_WAS_NOT_FOUND                                         ErrorCode = 162
	ErrorCode_USER_DOES_NOT_HAVE_ACTIVE_CONNECTION_TO_ANY_CLIENT              ErrorCode = 163
	ErrorCode_USER_HAS_NOT_ACCESS_TO_ZEROPS                                   ErrorCode = 164
	ErrorCode_INVALID_EMAIL_TOKEN                                             ErrorCode = 195
	ErrorCode_CLIENT_CREATE_FAILED                                            ErrorCode = 321
	ErrorCode_CLIENT_ID_TOO_LONG                                              ErrorCode = 322
	ErrorCode_TRANSFER_ID_TOO_LONG                                            ErrorCode = 316
	ErrorCode_EMAIL_IS_INVALID                                                ErrorCode = 313
	ErrorCode_USER_ACCOUNT_DELETED                                            ErrorCode = 314
	ErrorCode_NO_CONTABO_CLIENT_CONNECTED                                     ErrorCode = 315
	ErrorCode_AMBIGUOUS_USER                                                  ErrorCode = 330
	ErrorCode_AMBIGUOUS_USER_SIGN_IN                                          ErrorCode = 331
	ErrorCode_UNSUPPORTED_CURRENCY                                            ErrorCode = 317
	ErrorCode_INVALID_CURRENCY_CODE                                           ErrorCode = 320
	ErrorCode_TRANSFER_PARAM_MISMATCH                                         ErrorCode = 318
	ErrorCode_INVALID_AMOUNT                                                  ErrorCode = 333
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:   "NO_ERROR",
		1:   "INTERNAL_SERVER_ERROR",
		326: "NOT_FOUND",
		2:   "INVALID_USER_INPUT",
		3:   "INVALID_USER_INPUT_WITH_TEXT",
		4:   "NOT_AUTHORIZED",
		5:   "INSUFFICIENT_PRIVILEGES",
		6:   "REFRESH_TOKEN_INVALID",
		7:   "ENDPOINT_NOT_FOUND",
		8:   "POTENTIALLY_FRAUD_BEHAVIOR_DETECTED",
		9:   "RE_CAPTCHA_RESPONSE_INVALID",
		10:  "DOWNLOAD_TOKEN_INVALID_OR_EXPIRED",
		11:  "INCORRECT_USER_CREDENTIALS",
		12:  "NO_RIGHTS_TO_SELECTED_ACTION",
		13:  "FILE_SIZE_LIMIT_EXCEEDED",
		14:  "ADDITIONAL_VERIFICATION_FAILED",
		191: "AT_LEAST_ONE_MANAGER",
		15:  "ACTIVE_USER_MUST_BE_CONNECTED_TO_AT_LEAST_ONE_CLIENT",
		16:  "INVALID_CREDENTIALS",
		270: "PASSWORD_TOO_SHORT",
		269: "PASSWORD_TOO_LONG",
		18:  "NO_ACTIVE_CONNECTION_TO_ANY_CLIENT",
		19:  "NO_ACTIVE_CONNECTION_TO_CURRENT_CLIENT",
		20:  "TOKEN_EXPIRED",
		21:  "CLIENT_NOT_FOUND",
		22:  "NO_ACCESS_TO_ZEROPS",
		23:  "USER_NOT_FOUND",
		24:  "INVALID_DOCUMENT_ROOT",
		25:  "INVALID_ENTRYPOINT",
		280: "INVALID_INIT_COMMANDS",
		26:  "DOWNLOAD_EXPIRED",
		334: "MULTIPLE_ACCOUNTS_CONNECTED",
		27:  "USER_DATA_NOT_FOUND",
		28:  "USER_DATA_KEY_INVALID",
		29:  "USER_DATA_CONTENT_INVALID",
		180: "USER_DATA_USE_OF_SYSTEM_KEY",
		30:  "USER_DATA_DELETE_FORBIDDEN",
		31:  "USER_DATA_DUPLICATE_KEY",
		32:  "USER_DATA_SYNC_RUNNING",
		168: "USER_DATA_VERSION_MISMATCH",
		227: "USER_TOKEN_NOT_FOUND",
		34:  "USER_ACCOUNT_NOT_FOUND",
		35:  "TEMPLATE_NOT_FOUND",
		36:  "COUNTRY_CALLING_CODE_DOES_NOT_MATCH_PHONE_NUMBER",
		37:  "INVALID_PHONE_NUMBER",
		38:  "INVALID_USER_ROLE",
		39:  "INVALID_CLIENT_USER_GROUP_COMBINATION",
		40:  "EMAIL_EXISTS",
		41:  "USER_ALREADY_CONNECTED_TO_COMPANY",
		42:  "COUNTRY_NOT_FOUND",
		43:  "RECORD_NOT_FOUND",
		44:  "MAXIMUM_NUMBER_OF_CLIENT_EXCEEDED",
		45:  "USER_IS_NOT_IN_BEING_DELETED_STATUS",
		46:  "UNABLE_TO_DELETE_YOUR_OWN_ACCOUNT",
		47:  "CLIENT_USER_CONNECTION_NOT_FOUND",
		48:  "CLIENT_USER_CONNECTION_HAS_BEEN_DELETED",
		49:  "BAD_OR_EXPIRED_ACTIVATION_LINK",
		50:  "UNABLE_TO_EDIT_DELETED_USER",
		51:  "CLIENT_USER_ALREADY_BEEN_DELETED",
		52:  "LANGUAGE_NOT_FOUND",
		53:  "LANGUAGE_NOT_SUPPORTED",
		54:  "DUPLICATED_USER",
		55:  "RECORD_IS_READ_ONLY",
		56:  "RECORD_IS_DELETED",
		57:  "RECORD_COMMON_KEY_EDIT",
		61:  "SERVICE_STACK_NOT_FOUND",
		62:  "SERVICE_STACK_TYPE_NOT_FOUND",
		63:  "SERVICE_STACK_TYPE_VERSION_NOT_FOUND",
		64:  "SERVICE_STACK_TYPE_VERSION_IS_NOT_ACTIVE",
		65:  "SERVICE_STACK_TYPE_VERSION_REMOVE_DEFAULT",
		66:  "SERVICE_STACK_TYPE_INVALID_VERSION",
		67:  "SERVICE_STACK_IS_FAILED",
		68:  "SERVICE_STACK_IS_SYSTEM_NOT_SUPPORTED",
		69:  "SERVICE_STACK_CUSTOM_PORTS_ENABLED_REQUIRED",
		70:  "SERVICE_STACK_TYPE_VERSION_NOT_MATCH_WITH_STACK_TYPE",
		71:  "SERVICE_STACK_STORAGE_DISK_MAX_LIMIT",
		72:  "SERVICE_STACK_STORAGE_DISK_MIN_LIMIT",
		73:  "SERVICE_STACK_OBJECT_STORAGE_QUOTA_NOT_FOUND",
		281: "SERVICE_STACK_INIT_COMMANDS_NOT_FOUND",
		74:  "SERVICE_STACK_TYPE_OBJECT_STORAGE_REQUIRED",
		75:  "SERVICE_STACK_TYPE_OBJECT_STORAGE_FORBIDDEN",
		76:  "SERVICE_STACK_TYPE_SHARED_STORAGE_FORBIDDEN",
		242: "SERVICE_STACK_TYPE_STANDARD_FORBIDDEN",
		77:  "SERVICE_STACK_IS_READY_TO_DEPLOY",
		78:  "SERVICE_STACK_IS_NOT_HTTP",
		79:  "SERVICE_STACK_RELOAD_NOT_AVAILABLE",
		194: "SERVICE_STACK_NGINX_CONFIG",
		81:  "SERVICE_STACK_SUBDOMAIN_ACCESS_ALREADY_DISABLED",
		178: "SERVICE_STACK_CREATING",
		179: "SERVICE_STACK_UPGRADING",
		203: "SERVICE_STACK_INVALID_CATEGORY",
		265: "SERVICE_STACK_STATUS_NOT_SUPPORTED",
		282: "SERVICE_STACK_USER_NAME_INVALID",
		283: "ACTIVE_SERVICE_STACK_REQUIRED",
		284: "USER_APPLICATION_RUNTIME_SERVICE_STACK_REQUIRED",
		329: "SHARED_STORAGE_NONEMPTY_CONNECTED_STACKS_FORBIDDEN",
		328: "SHARED_STORAGE_SERVICE_STACK_INACTIVE",
		82:  "PROCESS_NOT_FOUND",
		83:  "PROCESS_IS_ALREADY_OVER",
		85:  "PROCESS_IS_ALREADY_RUNNING",
		87:  "UNABLE_TO_CREATE_PROCESS",
		323: "CREATE_PROCESS_QUEUED_PROJECT_PROCESS_COUNT_EXCEEDED",
		59:  "MANUAL_REPAIR_REQUIRED",
		60:  "NOTHING_TO_SYNC",
		58:  "IS_NOT_POSSIBLE_TO_EDIT_ANOTHER_USER",
		88:  "ACTIVE_SERVICE_STACK_EXISTS_IN_PROJECT",
		89:  "INVALID_OLD_PASSWORD",
		90:  "PROJECT_STATUS_NOT_SUPPORTED",
		91:  "PROJECT_NOT_FOUND",
		167: "PROJECT_IS_NOT_ACTIVE",
		92:  "SERVICE_STACK_NAME_UNAVAILABLE",
		93:  "SERVICE_STACK_NAME_INVALID",
		94:  "CORE_SERVICE_STACK_TYPE_VERSION_NOT_FOUND",
		95:  "L7_HTTP_BALANCER_SERVICE_STACK_TYPE_VERSION_NOT_FOUND",
		96:  "PROJECT_WILL_BE_DELETED",
		256: "PROJECT_WILL_BE_STARTED",
		257: "PROJECT_WILL_BE_STOPPED",
		97:  "STACK_WILL_BE_DELETED",
		286: "STACK_OF_PROJECT_WILL_BE_DELETED",
		287: "STACK_OF_PROJECT_WILL_BE_CREATED",
		288: "USER_DATA_OF_PROJECT_WILL_BE_SYNCED",
		98:  "PUBLIC_HTTP_ROUTING_NOT_FOUND",
		99:  "PUBLIC_HTTP_ROUTING_AT_LEAST_ONE_DOMAIN_REQUIRED",
		100: "PUBLIC_HTTP_ROUTING_DUPLICATE_DOMAIN_NAME",
		101: "PUBLIC_HTTP_ROUTING_DUPLICATE_FALLBACK",
		102: "PUBLIC_HTTP_ROUTING_DUPLICATE_DOMAIN_NAME_IN_ANOTHER_ROUTING",
		103: "PUBLIC_HTTP_ROUTING_DUPLICATE_FALLBACK_IN_ANOTHER_ROUTING",
		104: "PUBLIC_HTTP_ROUTING_DUPLICATE_LOCATION_PATHS",
		105: "PUBLIC_HTTP_ROUTING_ITEMS_LIMIT",
		106: "PUBLIC_HTTP_ROUTING_LOCATIONS_LIMIT",
		107: "PUBLIC_HTTP_ROUTING_DOMAINS_LIMIT",
		108: "PUBLIC_HTTP_ROUTING_INVALID_DOMAIN_NAME_FQDN",
		109: "PUBLIC_HTTP_ROUTING_SSL_FALLBACK",
		110: "PUBLIC_HTTP_ROUTING_LOCATION_DOES_NOT_FOUND",
		111: "PUBLIC_HTTP_ROUTING_INVALID_LOCATIONS_PREFIX",
		112: "PUBLIC_HTTP_ROUTING_MULTIPLE_SERVICE_STACK_ACCESS_POINTS",
		113: "PUBLIC_HTTP_ROUTING_SERVICE_STACK_ACCESS_POINT_NOT_FOUND",
		114: "PUBLIC_HTTP_ROUTING_REQUEST_ONLY_TCP_PORT",
		115: "PUBLIC_HTTP_ROUTING_SERVICE_STACK_DOES_NOT_SUPPORT_HTTP",
		327: "PUBLIC_HTTP_ROUTING_FORBIDDEN_ZEROPS_SUBDOMAIN_SUFFIX",
		116: "NO_PUBLIC_HTTP_ROUTING_IN_L7_HTTP_BALANCING",
		117: "SSL_NOT_SUPPORTED",
		118: "REGISTERED_DOMAIN_HOST_LIMIT_REACHED",
		119: "PUBLIC_SUFFIX_LIST_CONTROL_FAILED",
		120: "PORT_NOT_SUPPORTED",
		121: "PUBLIC_HTTP_ROUTING_SYNC_RUNNING",
		169: "PUBLIC_HTTP_ROUTING_VERSION_MISMATCH",
		122: "PORT_OUT_OF_RANGE",
		123: "PORT_PROTOCOL_INVALID",
		124: "PORT_SCHEME_INVALID",
		125: "UDP_PROTOCOL_SCHEME_MISMATCH",
		126: "PUBLIC_IP_REQUEST_NOT_FOUND",
		128: "PUBLIC_IP_REQUEST_ONLY_ONE",
		130: "PUBLIC_IP_REQUEST_RELEASE_RUNNING",
		131: "USER_NOTIFICATION_NOT_FOUND",
		132: "PUBLIC_PORT_ROUTING_NOT_FOUND",
		133: "PUBLIC_IP_TYPE_NOT_SUPPORTED",
		134: "PORT_AND_PROTOCOL_COMBINATION_NOT_SUPPORTED",
		135: "PUBLIC_PORT_ROUTING_DUPLICATE_RULE",
		181: "INTERNAL_PORT_DUPLICATE_RULE",
		136: "PUBLIC_PORT_ROUTING_SYNC_RUNNING",
		137: "PUBLIC_PORT_ROUTING_INVALID_IP_FORMAT",
		138: "PUBLIC_PORT_ROUTING_FIREWALL_POLICY_CONFLICT",
		170: "PUBLIC_PORT_ROUTING_VERSION_MISMATCH",
		139: "PUBLIC_PORT_ROUTING_UNABLE_TO_EDIT_DELETED_RECORD",
		190: "PUBLIC_PORT_ROUTING_UNABLE_TO_EDIT_PORTS_ON_SYSTEM_SERVICE",
		140: "DRIVER_NOT_FOUND",
		141: "DRIVER_ENTITY_IS_NOT_SERVICE_STACK",
		142: "DRIVER_ALREADY_SET",
		143: "CLIENT_USER_CONNECTION_ALREADY_EXISTS",
		144: "USER_ALREADY_ASSIGNED",
		145: "SERVICE_STACK_TYPE_USER_STORAGE_REQUIRED",
		146: "APP_VERSION_NOT_FOUND",
		147: "APP_VERSION_INVALID_STATUS",
		148: "DEPLOY_PROCESS_ALREADY_CREATED",
		149: "OBJECT_CONTENT_LENGTH_ZERO",
		150: "OBJECT_MIME_TYPE_NOT_SUPPORTED",
		151: "OBJECT_NOT_FOUND",
		152: "MAX_OBJECT_DISK_SIZE_ESTIMATE_EXCEEDED",
		226: "APP_VERSION_IS_ACTIVE",
		310: "APP_VERSION_NO_ACTIVE_FOUND",
		196: "APP_VERSION_IS_BEING_DEPLOYED",
		197: "APP_VERSION_IS_BEING_BUILT",
		198: "APP_VERSION_IS_NOT_BEING_UPLOADED",
		199: "APP_VERSION_DEPLOYING_FAILED",
		200: "APP_VERSION_BUILDING_FAILED",
		225: "APP_VERSION_YAML_PARSE_FAILED",
		324: "APP_VERSION_YAML_CONFIG_REQUIRED",
		285: "APP_VERSION_DATA_NOT_AVAILABLE",
		306: "APP_VERSION_ACTIVE_HAS_DEFAULT_RUNTIME",
		153: "SHARED_STORAGE_NOT_FOUND",
		154: "SHARED_STORAGE_INVALID_PROJECT",
		155: "SERVICE_STACK_CONNECTION_NOT_FOUND",
		156: "SHARED_STORAGE_INVALID_CATEGORY",
		157: "USER_SERVICE_STACK_INVALID_CATEGORY",
		158: "IDENTICAL_SHARED_STORAGE_AND_SERVICE_STACK",
		159: "CLIENT_ID_PROJECT_SERVICE_STACK_MISSING",
		160: "DIFFERENT_PROJECT_IDS",
		171: "STATS_HISTORY_SEARCH_LIMIT_INVALID",
		192: "STATS_HISTORY_SEARCH_TIME_GROUP_BY_INVALID",
		172: "STATS_HISTORY_SEARCH_ID_FILTER_INVALID",
		173: "STATS_HISTORY_SEARCH_PROJECT_ID_REQUIRED",
		174: "STATS_HISTORY_SEARCH_SUBSCRIPTION_NOT_SUPPORTED",
		193: "STATS_HISTORY_SEARCH_HISTORY_LIMIT_REACHED",
		274: "STATS_HISTORY_SEARCH_RANGE_INVALID",
		278: "STATS_HISTORY_SEARCH_EITHER_RANGE_OR_LIMIT_REQUIRED",
		276: "STATS_HISTORY_SEARCH_FULL_RANGE_REQUIRED",
		260: "TRANSACTION_DEBIT_SEARCH_LIMIT_INVALID",
		261: "TRANSACTION_DEBIT_SEARCH_TIME_GROUP_BY_INVALID",
		273: "TRANSACTION_DEBIT_SEARCH_RANGE_INVALID",
		262: "TRANSACTION_DEBIT_SEARCH_CLIENT_ID_REQUIRED",
		263: "TRANSACTION_DEBIT_SEARCH_ID_FILTER_INVALID",
		277: "TRANSACTION_DEBIT_SEARCH_EITHER_RANGE_OR_LIMIT_REQUIRED",
		272: "TRANSACTION_DEBIT_SEARCH_FULL_RANGE_REQUIRED",
		300: "TRANSACTION_DEBIT_SEARCH_TILL_AND_FROM_DATE_TIMEZONES_DIFFER",
		301: "TRANSACTION_DEBIT_SEARCH_UNKNOWN_TIMEZONE",
		271: "TRANSACTION_DEBIT_SEARCH_INVALID_FILTER",
		188: "GITHUB_VERIFICATION_EXPIRED",
		182: "INVALID_GITHUB_TOKEN_ACTION",
		183: "GITHUB_REQUEST_FAILED",
		184: "GITHUB_AUTHORIZATION_REQUIRED",
		185: "GITHUB_EMAIL_ACCESS_REQUIRED",
		186: "GITHUB_NO_VERIFIED_EMAIL_FOUND",
		187: "GITHUB_REPOSITORY_ACCESS_REQUIRED",
		189: "GITHUB_RATE_LIMIT_EXCEEDED",
		206: "SERVICE_STACK_NO_GITHUB_INTEGRATION",
		207: "BRANCH_NAME_REQUIRED",
		268: "TRIGGER_BUILD_REQUIRES_BRANCH_EVENT_TYPE",
		208: "USER_SERVICE_STACK_REQUIRED",
		209: "NO_EXTERNAL_REPOSITORY_INTEGRATION",
		210: "GITHUB_BRANCH_DELETED",
		211: "GITHUB_WEBHOOK_DELETED",
		212: "GITHUB_WEBHOOK_INVALID_PARAMETERS",
		218: "UNEXPECTED_GITHUB_FILE_ENCODING",
		219: "ZEROPS_BUILD_FILE_NOT_FOUND",
		213: "INCORRECT_WEBHOOK_SECRET",
		214: "UNSUPPORTED_WEBHOOK_EVENT_TYPE",
		215: "REPOSITORY_DOES_NOT_MATCH_SERVICE_STACK_SETTINGS",
		216: "PROJECT_STATUS_NOT_IN_NEW_CREATING_ACTIVE",
		217: "GITHUB_PUSH_IGNORED",
		204: "ZEROPS_BUILD_FILE_TOO_LARGE",
		205: "SAME_SERVICE_STACK_TYPE_USED",
		220: "GITHUB_WRONG_REPOSITORY_FULL_NAME_FORMAT",
		221: "GITHUB_WEBHOOKS_LIMIT_EXCEEDED",
		222: "AVATAR_UPLOAD_FORBIDDEN_IMAGE_TYPE",
		223: "AVATAR_UPLOAD_MAX_SIZE",
		224: "AVATAR_UPLOAD_FILE_NOT_FOUND",
		228: "GITLAB_RATE_LIMIT_EXCEEDED",
		229: "GITLAB_VERIFICATION_EXPIRED",
		230: "INVALID_GITLAB_TOKEN_ACTION",
		231: "GITLAB_REQUEST_FAILED",
		232: "GITLAB_AUTHORIZATION_REQUIRED",
		233: "GITLAB_FULL_API_ACCESS_REQUIRED",
		234: "MULTIPLE_INTEGRATIONS_ARE_FORBIDDEN",
		235: "GITLAB_BRANCH_DELETED",
		236: "GITLAB_WEBHOOK_DELETED",
		237: "GITLAB_WEBHOOK_INVALID_PARAMETERS",
		238: "SERVICE_STACK_NO_GITLAB_INTEGRATION",
		239: "GITLAB_PUSH_IGNORED",
		240: "YAML_FIELD_LENGTH_ERROR",
		241: "YAML_WRONG_USE_FIELD_TYPE",
		254: "VAT_NUMBER_NOT_IN_EUCOUNTRY",
		258: "COMPANY_NOT_FOUND_IN_EU",
		244: "VAT_NUMBER_MISSING",
		245: "PAYMENT_IN_PROGRESS",
		250: "DUPLICATE_VAT_NUMBER",
		302: "DUPLICATE_COMPANY_NUMBER",
		303: "CURRENCY_CHANGE",
		266: "ADMIN_USER_ACCOUNT_EXISTS",
		246: "CREDIT_LIMIT_REACHED",
		247: "INSUFFICIENT_CREDIT",
		248: "PROJECT_LOCK_FAILED",
		249: "PROJECT_UPDATE_FAILED",
		267: "MAXIMUM_AMOUNT_EXCEEDED",
		252: "PAYMENT_FAILED_ERROR",
		253: "PAYMENT_NOT_FOUND",
		255: "ADDON_NOT_FOUND",
		259: "INVOICE_NOT_FOUND",
		264: "PRICE_LIST_NOT_FOUND",
		279: "COST_LIMIT_TOO_SMALL",
		289: "PROJECT_IMPORT_INVALID_YAML",
		290: "PROJECT_IMPORT_INVALID_CONFIG_STRUCTURE",
		295: "PROJECT_IMPORT_INVALID_PARAMETER",
		292: "PROJECT_IMPORT_INVALID_TYPE_VERSION",
		293: "PROJECT_IMPORT_MISSING_PARAMETER",
		294: "PROJECT_IMPORT_UNABLE_TO_CREATE_SERVICE_STACK",
		296: "PROJECT_IMPORT_PROJECT_INCLUDED",
		297: "PROJECT_IMPORT_PROJECT_MISSING",
		298: "PROJECT_IMPORT_MISSING_SERVICE",
		309: "INVALID_CUSTOM_AUTOSCALING_VALUE",
		335: "INVALID_CUSTOM_AUTOSCALING_CPU_RAM_RATIO",
		305: "CUSTOM_VERTICAL_AUTOSCALING_FORBIDDEN_FOR_THIS_STACK_CATEGORY",
		307: "CUSTOM_HORIZONTAL_AUTOSCALING_FORBIDDEN_FOR_THIS_STACK_CATEGORY",
		308: "CUSTOM_HORIZONTAL_AUTOSCALING_FORBIDDEN_IN_NON_HA_MODE",
		311: "ACTION_FORBIDDEN_FOR_THIS_STACK_CATEGORY",
		312: "MODE_UPDATE_FORBIDDEN_FOR_THIS_STACK_CATEGORY",
		304: "YAML_VALIDATION_INVALID_YAML",
		325: "UNEXPECTED_YAML_ENCODING",
		336: "BUCKET_ALREADY_EXISTS",
		337: "S3_API_REQUEST_FAILED",
		161: "USER_ID_WAS_NOT_FOUND",
		162: "AUTHOR_ID_WAS_NOT_FOUND",
		163: "USER_DOES_NOT_HAVE_ACTIVE_CONNECTION_TO_ANY_CLIENT",
		164: "USER_HAS_NOT_ACCESS_TO_ZEROPS",
		195: "INVALID_EMAIL_TOKEN",
		321: "CLIENT_CREATE_FAILED",
		322: "CLIENT_ID_TOO_LONG",
		316: "TRANSFER_ID_TOO_LONG",
		313: "EMAIL_IS_INVALID",
		314: "USER_ACCOUNT_DELETED",
		315: "NO_CONTABO_CLIENT_CONNECTED",
		330: "AMBIGUOUS_USER",
		331: "AMBIGUOUS_USER_SIGN_IN",
		317: "UNSUPPORTED_CURRENCY",
		320: "INVALID_CURRENCY_CODE",
		318: "TRANSFER_PARAM_MISMATCH",
		333: "INVALID_AMOUNT",
	}
	ErrorCode_value = map[string]int32{
		"NO_ERROR":                                                        0,
		"INTERNAL_SERVER_ERROR":                                           1,
		"NOT_FOUND":                                                       326,
		"INVALID_USER_INPUT":                                              2,
		"INVALID_USER_INPUT_WITH_TEXT":                                    3,
		"NOT_AUTHORIZED":                                                  4,
		"INSUFFICIENT_PRIVILEGES":                                         5,
		"REFRESH_TOKEN_INVALID":                                           6,
		"ENDPOINT_NOT_FOUND":                                              7,
		"POTENTIALLY_FRAUD_BEHAVIOR_DETECTED":                             8,
		"RE_CAPTCHA_RESPONSE_INVALID":                                     9,
		"DOWNLOAD_TOKEN_INVALID_OR_EXPIRED":                               10,
		"INCORRECT_USER_CREDENTIALS":                                      11,
		"NO_RIGHTS_TO_SELECTED_ACTION":                                    12,
		"FILE_SIZE_LIMIT_EXCEEDED":                                        13,
		"ADDITIONAL_VERIFICATION_FAILED":                                  14,
		"AT_LEAST_ONE_MANAGER":                                            191,
		"ACTIVE_USER_MUST_BE_CONNECTED_TO_AT_LEAST_ONE_CLIENT":            15,
		"INVALID_CREDENTIALS":                                             16,
		"PASSWORD_TOO_SHORT":                                              270,
		"PASSWORD_TOO_LONG":                                               269,
		"NO_ACTIVE_CONNECTION_TO_ANY_CLIENT":                              18,
		"NO_ACTIVE_CONNECTION_TO_CURRENT_CLIENT":                          19,
		"TOKEN_EXPIRED":                                                   20,
		"CLIENT_NOT_FOUND":                                                21,
		"NO_ACCESS_TO_ZEROPS":                                             22,
		"USER_NOT_FOUND":                                                  23,
		"INVALID_DOCUMENT_ROOT":                                           24,
		"INVALID_ENTRYPOINT":                                              25,
		"INVALID_INIT_COMMANDS":                                           280,
		"DOWNLOAD_EXPIRED":                                                26,
		"MULTIPLE_ACCOUNTS_CONNECTED":                                     334,
		"USER_DATA_NOT_FOUND":                                             27,
		"USER_DATA_KEY_INVALID":                                           28,
		"USER_DATA_CONTENT_INVALID":                                       29,
		"USER_DATA_USE_OF_SYSTEM_KEY":                                     180,
		"USER_DATA_DELETE_FORBIDDEN":                                      30,
		"USER_DATA_DUPLICATE_KEY":                                         31,
		"USER_DATA_SYNC_RUNNING":                                          32,
		"USER_DATA_VERSION_MISMATCH":                                      168,
		"USER_TOKEN_NOT_FOUND":                                            227,
		"USER_ACCOUNT_NOT_FOUND":                                          34,
		"TEMPLATE_NOT_FOUND":                                              35,
		"COUNTRY_CALLING_CODE_DOES_NOT_MATCH_PHONE_NUMBER":                36,
		"INVALID_PHONE_NUMBER":                                            37,
		"INVALID_USER_ROLE":                                               38,
		"INVALID_CLIENT_USER_GROUP_COMBINATION":                           39,
		"EMAIL_EXISTS":                                                    40,
		"USER_ALREADY_CONNECTED_TO_COMPANY":                               41,
		"COUNTRY_NOT_FOUND":                                               42,
		"RECORD_NOT_FOUND":                                                43,
		"MAXIMUM_NUMBER_OF_CLIENT_EXCEEDED":                               44,
		"USER_IS_NOT_IN_BEING_DELETED_STATUS":                             45,
		"UNABLE_TO_DELETE_YOUR_OWN_ACCOUNT":                               46,
		"CLIENT_USER_CONNECTION_NOT_FOUND":                                47,
		"CLIENT_USER_CONNECTION_HAS_BEEN_DELETED":                         48,
		"BAD_OR_EXPIRED_ACTIVATION_LINK":                                  49,
		"UNABLE_TO_EDIT_DELETED_USER":                                     50,
		"CLIENT_USER_ALREADY_BEEN_DELETED":                                51,
		"LANGUAGE_NOT_FOUND":                                              52,
		"LANGUAGE_NOT_SUPPORTED":                                          53,
		"DUPLICATED_USER":                                                 54,
		"RECORD_IS_READ_ONLY":                                             55,
		"RECORD_IS_DELETED":                                               56,
		"RECORD_COMMON_KEY_EDIT":                                          57,
		"SERVICE_STACK_NOT_FOUND":                                         61,
		"SERVICE_STACK_TYPE_NOT_FOUND":                                    62,
		"SERVICE_STACK_TYPE_VERSION_NOT_FOUND":                            63,
		"SERVICE_STACK_TYPE_VERSION_IS_NOT_ACTIVE":                        64,
		"SERVICE_STACK_TYPE_VERSION_REMOVE_DEFAULT":                       65,
		"SERVICE_STACK_TYPE_INVALID_VERSION":                              66,
		"SERVICE_STACK_IS_FAILED":                                         67,
		"SERVICE_STACK_IS_SYSTEM_NOT_SUPPORTED":                           68,
		"SERVICE_STACK_CUSTOM_PORTS_ENABLED_REQUIRED":                     69,
		"SERVICE_STACK_TYPE_VERSION_NOT_MATCH_WITH_STACK_TYPE":            70,
		"SERVICE_STACK_STORAGE_DISK_MAX_LIMIT":                            71,
		"SERVICE_STACK_STORAGE_DISK_MIN_LIMIT":                            72,
		"SERVICE_STACK_OBJECT_STORAGE_QUOTA_NOT_FOUND":                    73,
		"SERVICE_STACK_INIT_COMMANDS_NOT_FOUND":                           281,
		"SERVICE_STACK_TYPE_OBJECT_STORAGE_REQUIRED":                      74,
		"SERVICE_STACK_TYPE_OBJECT_STORAGE_FORBIDDEN":                     75,
		"SERVICE_STACK_TYPE_SHARED_STORAGE_FORBIDDEN":                     76,
		"SERVICE_STACK_TYPE_STANDARD_FORBIDDEN":                           242,
		"SERVICE_STACK_IS_READY_TO_DEPLOY":                                77,
		"SERVICE_STACK_IS_NOT_HTTP":                                       78,
		"SERVICE_STACK_RELOAD_NOT_AVAILABLE":                              79,
		"SERVICE_STACK_NGINX_CONFIG":                                      194,
		"SERVICE_STACK_SUBDOMAIN_ACCESS_ALREADY_DISABLED":                 81,
		"SERVICE_STACK_CREATING":                                          178,
		"SERVICE_STACK_UPGRADING":                                         179,
		"SERVICE_STACK_INVALID_CATEGORY":                                  203,
		"SERVICE_STACK_STATUS_NOT_SUPPORTED":                              265,
		"SERVICE_STACK_USER_NAME_INVALID":                                 282,
		"ACTIVE_SERVICE_STACK_REQUIRED":                                   283,
		"USER_APPLICATION_RUNTIME_SERVICE_STACK_REQUIRED":                 284,
		"SHARED_STORAGE_NONEMPTY_CONNECTED_STACKS_FORBIDDEN":              329,
		"SHARED_STORAGE_SERVICE_STACK_INACTIVE":                           328,
		"PROCESS_NOT_FOUND":                                               82,
		"PROCESS_IS_ALREADY_OVER":                                         83,
		"PROCESS_IS_ALREADY_RUNNING":                                      85,
		"UNABLE_TO_CREATE_PROCESS":                                        87,
		"CREATE_PROCESS_QUEUED_PROJECT_PROCESS_COUNT_EXCEEDED":            323,
		"MANUAL_REPAIR_REQUIRED":                                          59,
		"NOTHING_TO_SYNC":                                                 60,
		"IS_NOT_POSSIBLE_TO_EDIT_ANOTHER_USER":                            58,
		"ACTIVE_SERVICE_STACK_EXISTS_IN_PROJECT":                          88,
		"INVALID_OLD_PASSWORD":                                            89,
		"PROJECT_STATUS_NOT_SUPPORTED":                                    90,
		"PROJECT_NOT_FOUND":                                               91,
		"PROJECT_IS_NOT_ACTIVE":                                           167,
		"SERVICE_STACK_NAME_UNAVAILABLE":                                  92,
		"SERVICE_STACK_NAME_INVALID":                                      93,
		"CORE_SERVICE_STACK_TYPE_VERSION_NOT_FOUND":                       94,
		"L7_HTTP_BALANCER_SERVICE_STACK_TYPE_VERSION_NOT_FOUND":           95,
		"PROJECT_WILL_BE_DELETED":                                         96,
		"PROJECT_WILL_BE_STARTED":                                         256,
		"PROJECT_WILL_BE_STOPPED":                                         257,
		"STACK_WILL_BE_DELETED":                                           97,
		"STACK_OF_PROJECT_WILL_BE_DELETED":                                286,
		"STACK_OF_PROJECT_WILL_BE_CREATED":                                287,
		"USER_DATA_OF_PROJECT_WILL_BE_SYNCED":                             288,
		"PUBLIC_HTTP_ROUTING_NOT_FOUND":                                   98,
		"PUBLIC_HTTP_ROUTING_AT_LEAST_ONE_DOMAIN_REQUIRED":                99,
		"PUBLIC_HTTP_ROUTING_DUPLICATE_DOMAIN_NAME":                       100,
		"PUBLIC_HTTP_ROUTING_DUPLICATE_FALLBACK":                          101,
		"PUBLIC_HTTP_ROUTING_DUPLICATE_DOMAIN_NAME_IN_ANOTHER_ROUTING":    102,
		"PUBLIC_HTTP_ROUTING_DUPLICATE_FALLBACK_IN_ANOTHER_ROUTING":       103,
		"PUBLIC_HTTP_ROUTING_DUPLICATE_LOCATION_PATHS":                    104,
		"PUBLIC_HTTP_ROUTING_ITEMS_LIMIT":                                 105,
		"PUBLIC_HTTP_ROUTING_LOCATIONS_LIMIT":                             106,
		"PUBLIC_HTTP_ROUTING_DOMAINS_LIMIT":                               107,
		"PUBLIC_HTTP_ROUTING_INVALID_DOMAIN_NAME_FQDN":                    108,
		"PUBLIC_HTTP_ROUTING_SSL_FALLBACK":                                109,
		"PUBLIC_HTTP_ROUTING_LOCATION_DOES_NOT_FOUND":                     110,
		"PUBLIC_HTTP_ROUTING_INVALID_LOCATIONS_PREFIX":                    111,
		"PUBLIC_HTTP_ROUTING_MULTIPLE_SERVICE_STACK_ACCESS_POINTS":        112,
		"PUBLIC_HTTP_ROUTING_SERVICE_STACK_ACCESS_POINT_NOT_FOUND":        113,
		"PUBLIC_HTTP_ROUTING_REQUEST_ONLY_TCP_PORT":                       114,
		"PUBLIC_HTTP_ROUTING_SERVICE_STACK_DOES_NOT_SUPPORT_HTTP":         115,
		"PUBLIC_HTTP_ROUTING_FORBIDDEN_ZEROPS_SUBDOMAIN_SUFFIX":           327,
		"NO_PUBLIC_HTTP_ROUTING_IN_L7_HTTP_BALANCING":                     116,
		"SSL_NOT_SUPPORTED":                                               117,
		"REGISTERED_DOMAIN_HOST_LIMIT_REACHED":                            118,
		"PUBLIC_SUFFIX_LIST_CONTROL_FAILED":                               119,
		"PORT_NOT_SUPPORTED":                                              120,
		"PUBLIC_HTTP_ROUTING_SYNC_RUNNING":                                121,
		"PUBLIC_HTTP_ROUTING_VERSION_MISMATCH":                            169,
		"PORT_OUT_OF_RANGE":                                               122,
		"PORT_PROTOCOL_INVALID":                                           123,
		"PORT_SCHEME_INVALID":                                             124,
		"UDP_PROTOCOL_SCHEME_MISMATCH":                                    125,
		"PUBLIC_IP_REQUEST_NOT_FOUND":                                     126,
		"PUBLIC_IP_REQUEST_ONLY_ONE":                                      128,
		"PUBLIC_IP_REQUEST_RELEASE_RUNNING":                               130,
		"USER_NOTIFICATION_NOT_FOUND":                                     131,
		"PUBLIC_PORT_ROUTING_NOT_FOUND":                                   132,
		"PUBLIC_IP_TYPE_NOT_SUPPORTED":                                    133,
		"PORT_AND_PROTOCOL_COMBINATION_NOT_SUPPORTED":                     134,
		"PUBLIC_PORT_ROUTING_DUPLICATE_RULE":                              135,
		"INTERNAL_PORT_DUPLICATE_RULE":                                    181,
		"PUBLIC_PORT_ROUTING_SYNC_RUNNING":                                136,
		"PUBLIC_PORT_ROUTING_INVALID_IP_FORMAT":                           137,
		"PUBLIC_PORT_ROUTING_FIREWALL_POLICY_CONFLICT":                    138,
		"PUBLIC_PORT_ROUTING_VERSION_MISMATCH":                            170,
		"PUBLIC_PORT_ROUTING_UNABLE_TO_EDIT_DELETED_RECORD":               139,
		"PUBLIC_PORT_ROUTING_UNABLE_TO_EDIT_PORTS_ON_SYSTEM_SERVICE":      190,
		"DRIVER_NOT_FOUND":                                                140,
		"DRIVER_ENTITY_IS_NOT_SERVICE_STACK":                              141,
		"DRIVER_ALREADY_SET":                                              142,
		"CLIENT_USER_CONNECTION_ALREADY_EXISTS":                           143,
		"USER_ALREADY_ASSIGNED":                                           144,
		"SERVICE_STACK_TYPE_USER_STORAGE_REQUIRED":                        145,
		"APP_VERSION_NOT_FOUND":                                           146,
		"APP_VERSION_INVALID_STATUS":                                      147,
		"DEPLOY_PROCESS_ALREADY_CREATED":                                  148,
		"OBJECT_CONTENT_LENGTH_ZERO":                                      149,
		"OBJECT_MIME_TYPE_NOT_SUPPORTED":                                  150,
		"OBJECT_NOT_FOUND":                                                151,
		"MAX_OBJECT_DISK_SIZE_ESTIMATE_EXCEEDED":                          152,
		"APP_VERSION_IS_ACTIVE":                                           226,
		"APP_VERSION_NO_ACTIVE_FOUND":                                     310,
		"APP_VERSION_IS_BEING_DEPLOYED":                                   196,
		"APP_VERSION_IS_BEING_BUILT":                                      197,
		"APP_VERSION_IS_NOT_BEING_UPLOADED":                               198,
		"APP_VERSION_DEPLOYING_FAILED":                                    199,
		"APP_VERSION_BUILDING_FAILED":                                     200,
		"APP_VERSION_YAML_PARSE_FAILED":                                   225,
		"APP_VERSION_YAML_CONFIG_REQUIRED":                                324,
		"APP_VERSION_DATA_NOT_AVAILABLE":                                  285,
		"APP_VERSION_ACTIVE_HAS_DEFAULT_RUNTIME":                          306,
		"SHARED_STORAGE_NOT_FOUND":                                        153,
		"SHARED_STORAGE_INVALID_PROJECT":                                  154,
		"SERVICE_STACK_CONNECTION_NOT_FOUND":                              155,
		"SHARED_STORAGE_INVALID_CATEGORY":                                 156,
		"USER_SERVICE_STACK_INVALID_CATEGORY":                             157,
		"IDENTICAL_SHARED_STORAGE_AND_SERVICE_STACK":                      158,
		"CLIENT_ID_PROJECT_SERVICE_STACK_MISSING":                         159,
		"DIFFERENT_PROJECT_IDS":                                           160,
		"STATS_HISTORY_SEARCH_LIMIT_INVALID":                              171,
		"STATS_HISTORY_SEARCH_TIME_GROUP_BY_INVALID":                      192,
		"STATS_HISTORY_SEARCH_ID_FILTER_INVALID":                          172,
		"STATS_HISTORY_SEARCH_PROJECT_ID_REQUIRED":                        173,
		"STATS_HISTORY_SEARCH_SUBSCRIPTION_NOT_SUPPORTED":                 174,
		"STATS_HISTORY_SEARCH_HISTORY_LIMIT_REACHED":                      193,
		"STATS_HISTORY_SEARCH_RANGE_INVALID":                              274,
		"STATS_HISTORY_SEARCH_EITHER_RANGE_OR_LIMIT_REQUIRED":             278,
		"STATS_HISTORY_SEARCH_FULL_RANGE_REQUIRED":                        276,
		"TRANSACTION_DEBIT_SEARCH_LIMIT_INVALID":                          260,
		"TRANSACTION_DEBIT_SEARCH_TIME_GROUP_BY_INVALID":                  261,
		"TRANSACTION_DEBIT_SEARCH_RANGE_INVALID":                          273,
		"TRANSACTION_DEBIT_SEARCH_CLIENT_ID_REQUIRED":                     262,
		"TRANSACTION_DEBIT_SEARCH_ID_FILTER_INVALID":                      263,
		"TRANSACTION_DEBIT_SEARCH_EITHER_RANGE_OR_LIMIT_REQUIRED":         277,
		"TRANSACTION_DEBIT_SEARCH_FULL_RANGE_REQUIRED":                    272,
		"TRANSACTION_DEBIT_SEARCH_TILL_AND_FROM_DATE_TIMEZONES_DIFFER":    300,
		"TRANSACTION_DEBIT_SEARCH_UNKNOWN_TIMEZONE":                       301,
		"TRANSACTION_DEBIT_SEARCH_INVALID_FILTER":                         271,
		"GITHUB_VERIFICATION_EXPIRED":                                     188,
		"INVALID_GITHUB_TOKEN_ACTION":                                     182,
		"GITHUB_REQUEST_FAILED":                                           183,
		"GITHUB_AUTHORIZATION_REQUIRED":                                   184,
		"GITHUB_EMAIL_ACCESS_REQUIRED":                                    185,
		"GITHUB_NO_VERIFIED_EMAIL_FOUND":                                  186,
		"GITHUB_REPOSITORY_ACCESS_REQUIRED":                               187,
		"GITHUB_RATE_LIMIT_EXCEEDED":                                      189,
		"SERVICE_STACK_NO_GITHUB_INTEGRATION":                             206,
		"BRANCH_NAME_REQUIRED":                                            207,
		"TRIGGER_BUILD_REQUIRES_BRANCH_EVENT_TYPE":                        268,
		"USER_SERVICE_STACK_REQUIRED":                                     208,
		"NO_EXTERNAL_REPOSITORY_INTEGRATION":                              209,
		"GITHUB_BRANCH_DELETED":                                           210,
		"GITHUB_WEBHOOK_DELETED":                                          211,
		"GITHUB_WEBHOOK_INVALID_PARAMETERS":                               212,
		"UNEXPECTED_GITHUB_FILE_ENCODING":                                 218,
		"ZEROPS_BUILD_FILE_NOT_FOUND":                                     219,
		"INCORRECT_WEBHOOK_SECRET":                                        213,
		"UNSUPPORTED_WEBHOOK_EVENT_TYPE":                                  214,
		"REPOSITORY_DOES_NOT_MATCH_SERVICE_STACK_SETTINGS":                215,
		"PROJECT_STATUS_NOT_IN_NEW_CREATING_ACTIVE":                       216,
		"GITHUB_PUSH_IGNORED":                                             217,
		"ZEROPS_BUILD_FILE_TOO_LARGE":                                     204,
		"SAME_SERVICE_STACK_TYPE_USED":                                    205,
		"GITHUB_WRONG_REPOSITORY_FULL_NAME_FORMAT":                        220,
		"GITHUB_WEBHOOKS_LIMIT_EXCEEDED":                                  221,
		"AVATAR_UPLOAD_FORBIDDEN_IMAGE_TYPE":                              222,
		"AVATAR_UPLOAD_MAX_SIZE":                                          223,
		"AVATAR_UPLOAD_FILE_NOT_FOUND":                                    224,
		"GITLAB_RATE_LIMIT_EXCEEDED":                                      228,
		"GITLAB_VERIFICATION_EXPIRED":                                     229,
		"INVALID_GITLAB_TOKEN_ACTION":                                     230,
		"GITLAB_REQUEST_FAILED":                                           231,
		"GITLAB_AUTHORIZATION_REQUIRED":                                   232,
		"GITLAB_FULL_API_ACCESS_REQUIRED":                                 233,
		"MULTIPLE_INTEGRATIONS_ARE_FORBIDDEN":                             234,
		"GITLAB_BRANCH_DELETED":                                           235,
		"GITLAB_WEBHOOK_DELETED":                                          236,
		"GITLAB_WEBHOOK_INVALID_PARAMETERS":                               237,
		"SERVICE_STACK_NO_GITLAB_INTEGRATION":                             238,
		"GITLAB_PUSH_IGNORED":                                             239,
		"YAML_FIELD_LENGTH_ERROR":                                         240,
		"YAML_WRONG_USE_FIELD_TYPE":                                       241,
		"VAT_NUMBER_NOT_IN_EUCOUNTRY":                                     254,
		"COMPANY_NOT_FOUND_IN_EU":                                         258,
		"VAT_NUMBER_MISSING":                                              244,
		"PAYMENT_IN_PROGRESS":                                             245,
		"DUPLICATE_VAT_NUMBER":                                            250,
		"DUPLICATE_COMPANY_NUMBER":                                        302,
		"CURRENCY_CHANGE":                                                 303,
		"ADMIN_USER_ACCOUNT_EXISTS":                                       266,
		"CREDIT_LIMIT_REACHED":                                            246,
		"INSUFFICIENT_CREDIT":                                             247,
		"PROJECT_LOCK_FAILED":                                             248,
		"PROJECT_UPDATE_FAILED":                                           249,
		"MAXIMUM_AMOUNT_EXCEEDED":                                         267,
		"PAYMENT_FAILED_ERROR":                                            252,
		"PAYMENT_NOT_FOUND":                                               253,
		"ADDON_NOT_FOUND":                                                 255,
		"INVOICE_NOT_FOUND":                                               259,
		"PRICE_LIST_NOT_FOUND":                                            264,
		"COST_LIMIT_TOO_SMALL":                                            279,
		"PROJECT_IMPORT_INVALID_YAML":                                     289,
		"PROJECT_IMPORT_INVALID_CONFIG_STRUCTURE":                         290,
		"PROJECT_IMPORT_INVALID_PARAMETER":                                295,
		"PROJECT_IMPORT_INVALID_TYPE_VERSION":                             292,
		"PROJECT_IMPORT_MISSING_PARAMETER":                                293,
		"PROJECT_IMPORT_UNABLE_TO_CREATE_SERVICE_STACK":                   294,
		"PROJECT_IMPORT_PROJECT_INCLUDED":                                 296,
		"PROJECT_IMPORT_PROJECT_MISSING":                                  297,
		"PROJECT_IMPORT_MISSING_SERVICE":                                  298,
		"INVALID_CUSTOM_AUTOSCALING_VALUE":                                309,
		"INVALID_CUSTOM_AUTOSCALING_CPU_RAM_RATIO":                        335,
		"CUSTOM_VERTICAL_AUTOSCALING_FORBIDDEN_FOR_THIS_STACK_CATEGORY":   305,
		"CUSTOM_HORIZONTAL_AUTOSCALING_FORBIDDEN_FOR_THIS_STACK_CATEGORY": 307,
		"CUSTOM_HORIZONTAL_AUTOSCALING_FORBIDDEN_IN_NON_HA_MODE":          308,
		"ACTION_FORBIDDEN_FOR_THIS_STACK_CATEGORY":                        311,
		"MODE_UPDATE_FORBIDDEN_FOR_THIS_STACK_CATEGORY":                   312,
		"YAML_VALIDATION_INVALID_YAML":                                    304,
		"UNEXPECTED_YAML_ENCODING":                                        325,
		"BUCKET_ALREADY_EXISTS":                                           336,
		"S3_API_REQUEST_FAILED":                                           337,
		"USER_ID_WAS_NOT_FOUND":                                           161,
		"AUTHOR_ID_WAS_NOT_FOUND":                                         162,
		"USER_DOES_NOT_HAVE_ACTIVE_CONNECTION_TO_ANY_CLIENT":              163,
		"USER_HAS_NOT_ACCESS_TO_ZEROPS":                                   164,
		"INVALID_EMAIL_TOKEN":                                             195,
		"CLIENT_CREATE_FAILED":                                            321,
		"CLIENT_ID_TOO_LONG":                                              322,
		"TRANSFER_ID_TOO_LONG":                                            316,
		"EMAIL_IS_INVALID":                                                313,
		"USER_ACCOUNT_DELETED":                                            314,
		"NO_CONTABO_CLIENT_CONNECTED":                                     315,
		"AMBIGUOUS_USER":                                                  330,
		"AMBIGUOUS_USER_SIGN_IN":                                          331,
		"UNSUPPORTED_CURRENCY":                                            317,
		"INVALID_CURRENCY_CODE":                                           320,
		"TRANSFER_PARAM_MISMATCH":                                         318,
		"INVALID_AMOUNT":                                                  333,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{0}
}

type AppVersionGithubIntegrationEventType int32

const (
	AppVersionGithubIntegrationEventType_APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN AppVersionGithubIntegrationEventType = 0
	AppVersionGithubIntegrationEventType_APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_BRANCH  AppVersionGithubIntegrationEventType = 1
	AppVersionGithubIntegrationEventType_APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_TAG     AppVersionGithubIntegrationEventType = 2
)

// Enum value maps for AppVersionGithubIntegrationEventType.
var (
	AppVersionGithubIntegrationEventType_name = map[int32]string{
		0: "APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN",
		1: "APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_BRANCH",
		2: "APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_TAG",
	}
	AppVersionGithubIntegrationEventType_value = map[string]int32{
		"APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN": 0,
		"APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_BRANCH":  1,
		"APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_TAG":     2,
	}
)

func (x AppVersionGithubIntegrationEventType) Enum() *AppVersionGithubIntegrationEventType {
	p := new(AppVersionGithubIntegrationEventType)
	*p = x
	return p
}

func (x AppVersionGithubIntegrationEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppVersionGithubIntegrationEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[1].Descriptor()
}

func (AppVersionGithubIntegrationEventType) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[1]
}

func (x AppVersionGithubIntegrationEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppVersionGithubIntegrationEventType.Descriptor instead.
func (AppVersionGithubIntegrationEventType) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{1}
}

type AppVersionGitlabIntegrationEventType int32

const (
	AppVersionGitlabIntegrationEventType_APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN AppVersionGitlabIntegrationEventType = 0
	AppVersionGitlabIntegrationEventType_APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_BRANCH  AppVersionGitlabIntegrationEventType = 1
	AppVersionGitlabIntegrationEventType_APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_TAG     AppVersionGitlabIntegrationEventType = 2
)

// Enum value maps for AppVersionGitlabIntegrationEventType.
var (
	AppVersionGitlabIntegrationEventType_name = map[int32]string{
		0: "APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN",
		1: "APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_BRANCH",
		2: "APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_TAG",
	}
	AppVersionGitlabIntegrationEventType_value = map[string]int32{
		"APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN": 0,
		"APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_BRANCH":  1,
		"APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_TAG":     2,
	}
)

func (x AppVersionGitlabIntegrationEventType) Enum() *AppVersionGitlabIntegrationEventType {
	p := new(AppVersionGitlabIntegrationEventType)
	*p = x
	return p
}

func (x AppVersionGitlabIntegrationEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppVersionGitlabIntegrationEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[2].Descriptor()
}

func (AppVersionGitlabIntegrationEventType) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[2]
}

func (x AppVersionGitlabIntegrationEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppVersionGitlabIntegrationEventType.Descriptor instead.
func (AppVersionGitlabIntegrationEventType) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{2}
}

type AppVersionSource int32

const (
	AppVersionSource_APP_VERSION_SOURCE_UNKNOWN AppVersionSource = 0
	AppVersionSource_APP_VERSION_SOURCE_CLI     AppVersionSource = 1
	AppVersionSource_APP_VERSION_SOURCE_GUI     AppVersionSource = 2
	AppVersionSource_APP_VERSION_SOURCE_GITHUB  AppVersionSource = 3
	AppVersionSource_APP_VERSION_SOURCE_GITLAB  AppVersionSource = 4
	AppVersionSource_APP_VERSION_SOURCE_GIT     AppVersionSource = 5
)

// Enum value maps for AppVersionSource.
var (
	AppVersionSource_name = map[int32]string{
		0: "APP_VERSION_SOURCE_UNKNOWN",
		1: "APP_VERSION_SOURCE_CLI",
		2: "APP_VERSION_SOURCE_GUI",
		3: "APP_VERSION_SOURCE_GITHUB",
		4: "APP_VERSION_SOURCE_GITLAB",
		5: "APP_VERSION_SOURCE_GIT",
	}
	AppVersionSource_value = map[string]int32{
		"APP_VERSION_SOURCE_UNKNOWN": 0,
		"APP_VERSION_SOURCE_CLI":     1,
		"APP_VERSION_SOURCE_GUI":     2,
		"APP_VERSION_SOURCE_GITHUB":  3,
		"APP_VERSION_SOURCE_GITLAB":  4,
		"APP_VERSION_SOURCE_GIT":     5,
	}
)

func (x AppVersionSource) Enum() *AppVersionSource {
	p := new(AppVersionSource)
	*p = x
	return p
}

func (x AppVersionSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppVersionSource) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[3].Descriptor()
}

func (AppVersionSource) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[3]
}

func (x AppVersionSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppVersionSource.Descriptor instead.
func (AppVersionSource) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{3}
}

type AppVersionStatus int32

const (
	AppVersionStatus_APP_VERSION_STATUS_UNKNOWN                  AppVersionStatus = 0
	AppVersionStatus_APP_VERSION_STATUS_UPLOADING                AppVersionStatus = 1
	AppVersionStatus_APP_VERSION_STATUS_WAITING_TO_DEPLOY        AppVersionStatus = 2
	AppVersionStatus_APP_VERSION_STATUS_DEPLOYING                AppVersionStatus = 3
	AppVersionStatus_APP_VERSION_STATUS_DEPLOY_FAILED            AppVersionStatus = 4
	AppVersionStatus_APP_VERSION_STATUS_ACTIVE                   AppVersionStatus = 5
	AppVersionStatus_APP_VERSION_STATUS_BACKUP                   AppVersionStatus = 6
	AppVersionStatus_APP_VERSION_STATUS_BUILDING                 AppVersionStatus = 7
	AppVersionStatus_APP_VERSION_STATUS_WAITING_TO_BUILD         AppVersionStatus = 8
	AppVersionStatus_APP_VERSION_STATUS_BUILD_FAILED             AppVersionStatus = 9
	AppVersionStatus_APP_VERSION_STATUS_PREPARING_RUNTIME        AppVersionStatus = 10
	AppVersionStatus_APP_VERSION_STATUS_PREPARING_RUNTIME_FAILED AppVersionStatus = 11
	AppVersionStatus_APP_VERSION_STATUS_BUILD_VALIDATION_FAILED  AppVersionStatus = 12
)

// Enum value maps for AppVersionStatus.
var (
	AppVersionStatus_name = map[int32]string{
		0:  "APP_VERSION_STATUS_UNKNOWN",
		1:  "APP_VERSION_STATUS_UPLOADING",
		2:  "APP_VERSION_STATUS_WAITING_TO_DEPLOY",
		3:  "APP_VERSION_STATUS_DEPLOYING",
		4:  "APP_VERSION_STATUS_DEPLOY_FAILED",
		5:  "APP_VERSION_STATUS_ACTIVE",
		6:  "APP_VERSION_STATUS_BACKUP",
		7:  "APP_VERSION_STATUS_BUILDING",
		8:  "APP_VERSION_STATUS_WAITING_TO_BUILD",
		9:  "APP_VERSION_STATUS_BUILD_FAILED",
		10: "APP_VERSION_STATUS_PREPARING_RUNTIME",
		11: "APP_VERSION_STATUS_PREPARING_RUNTIME_FAILED",
		12: "APP_VERSION_STATUS_BUILD_VALIDATION_FAILED",
	}
	AppVersionStatus_value = map[string]int32{
		"APP_VERSION_STATUS_UNKNOWN":                  0,
		"APP_VERSION_STATUS_UPLOADING":                1,
		"APP_VERSION_STATUS_WAITING_TO_DEPLOY":        2,
		"APP_VERSION_STATUS_DEPLOYING":                3,
		"APP_VERSION_STATUS_DEPLOY_FAILED":            4,
		"APP_VERSION_STATUS_ACTIVE":                   5,
		"APP_VERSION_STATUS_BACKUP":                   6,
		"APP_VERSION_STATUS_BUILDING":                 7,
		"APP_VERSION_STATUS_WAITING_TO_BUILD":         8,
		"APP_VERSION_STATUS_BUILD_FAILED":             9,
		"APP_VERSION_STATUS_PREPARING_RUNTIME":        10,
		"APP_VERSION_STATUS_PREPARING_RUNTIME_FAILED": 11,
		"APP_VERSION_STATUS_BUILD_VALIDATION_FAILED":  12,
	}
)

func (x AppVersionStatus) Enum() *AppVersionStatus {
	p := new(AppVersionStatus)
	*p = x
	return p
}

func (x AppVersionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppVersionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[4].Descriptor()
}

func (AppVersionStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[4]
}

func (x AppVersionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppVersionStatus.Descriptor instead.
func (AppVersionStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{4}
}

type ClientUserLightRoleCode int32

const (
	ClientUserLightRoleCode_CLIENT_USER_LIGHT_ROLE_CODE_UNKNOWN ClientUserLightRoleCode = 0
	ClientUserLightRoleCode_CLIENT_USER_LIGHT_ROLE_CODE_MANAGER ClientUserLightRoleCode = 1
)

// Enum value maps for ClientUserLightRoleCode.
var (
	ClientUserLightRoleCode_name = map[int32]string{
		0: "CLIENT_USER_LIGHT_ROLE_CODE_UNKNOWN",
		1: "CLIENT_USER_LIGHT_ROLE_CODE_MANAGER",
	}
	ClientUserLightRoleCode_value = map[string]int32{
		"CLIENT_USER_LIGHT_ROLE_CODE_UNKNOWN": 0,
		"CLIENT_USER_LIGHT_ROLE_CODE_MANAGER": 1,
	}
)

func (x ClientUserLightRoleCode) Enum() *ClientUserLightRoleCode {
	p := new(ClientUserLightRoleCode)
	*p = x
	return p
}

func (x ClientUserLightRoleCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientUserLightRoleCode) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[5].Descriptor()
}

func (ClientUserLightRoleCode) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[5]
}

func (x ClientUserLightRoleCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientUserLightRoleCode.Descriptor instead.
func (ClientUserLightRoleCode) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{5}
}

type ClientUserLightStatus int32

const (
	ClientUserLightStatus_CLIENT_USER_LIGHT_STATUS_UNKNOWN               ClientUserLightStatus = 0
	ClientUserLightStatus_CLIENT_USER_LIGHT_STATUS_ACTIVE                ClientUserLightStatus = 1
	ClientUserLightStatus_CLIENT_USER_LIGHT_STATUS_WAITING_AUTHORIZATION ClientUserLightStatus = 2
	ClientUserLightStatus_CLIENT_USER_LIGHT_STATUS_BEING_DELETED         ClientUserLightStatus = 3
)

// Enum value maps for ClientUserLightStatus.
var (
	ClientUserLightStatus_name = map[int32]string{
		0: "CLIENT_USER_LIGHT_STATUS_UNKNOWN",
		1: "CLIENT_USER_LIGHT_STATUS_ACTIVE",
		2: "CLIENT_USER_LIGHT_STATUS_WAITING_AUTHORIZATION",
		3: "CLIENT_USER_LIGHT_STATUS_BEING_DELETED",
	}
	ClientUserLightStatus_value = map[string]int32{
		"CLIENT_USER_LIGHT_STATUS_UNKNOWN":               0,
		"CLIENT_USER_LIGHT_STATUS_ACTIVE":                1,
		"CLIENT_USER_LIGHT_STATUS_WAITING_AUTHORIZATION": 2,
		"CLIENT_USER_LIGHT_STATUS_BEING_DELETED":         3,
	}
)

func (x ClientUserLightStatus) Enum() *ClientUserLightStatus {
	p := new(ClientUserLightStatus)
	*p = x
	return p
}

func (x ClientUserLightStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientUserLightStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[6].Descriptor()
}

func (ClientUserLightStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[6]
}

func (x ClientUserLightStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientUserLightStatus.Descriptor instead.
func (ClientUserLightStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{6}
}

type GithubIntegrationEventType int32

const (
	GithubIntegrationEventType_GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN GithubIntegrationEventType = 0
	GithubIntegrationEventType_GITHUB_INTEGRATION_EVENT_TYPE_BRANCH  GithubIntegrationEventType = 1
	GithubIntegrationEventType_GITHUB_INTEGRATION_EVENT_TYPE_TAG     GithubIntegrationEventType = 2
)

// Enum value maps for GithubIntegrationEventType.
var (
	GithubIntegrationEventType_name = map[int32]string{
		0: "GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN",
		1: "GITHUB_INTEGRATION_EVENT_TYPE_BRANCH",
		2: "GITHUB_INTEGRATION_EVENT_TYPE_TAG",
	}
	GithubIntegrationEventType_value = map[string]int32{
		"GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN": 0,
		"GITHUB_INTEGRATION_EVENT_TYPE_BRANCH":  1,
		"GITHUB_INTEGRATION_EVENT_TYPE_TAG":     2,
	}
)

func (x GithubIntegrationEventType) Enum() *GithubIntegrationEventType {
	p := new(GithubIntegrationEventType)
	*p = x
	return p
}

func (x GithubIntegrationEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GithubIntegrationEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[7].Descriptor()
}

func (GithubIntegrationEventType) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[7]
}

func (x GithubIntegrationEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GithubIntegrationEventType.Descriptor instead.
func (GithubIntegrationEventType) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{7}
}

type GitlabIntegrationEventType int32

const (
	GitlabIntegrationEventType_GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN GitlabIntegrationEventType = 0
	GitlabIntegrationEventType_GITLAB_INTEGRATION_EVENT_TYPE_BRANCH  GitlabIntegrationEventType = 1
	GitlabIntegrationEventType_GITLAB_INTEGRATION_EVENT_TYPE_TAG     GitlabIntegrationEventType = 2
)

// Enum value maps for GitlabIntegrationEventType.
var (
	GitlabIntegrationEventType_name = map[int32]string{
		0: "GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN",
		1: "GITLAB_INTEGRATION_EVENT_TYPE_BRANCH",
		2: "GITLAB_INTEGRATION_EVENT_TYPE_TAG",
	}
	GitlabIntegrationEventType_value = map[string]int32{
		"GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN": 0,
		"GITLAB_INTEGRATION_EVENT_TYPE_BRANCH":  1,
		"GITLAB_INTEGRATION_EVENT_TYPE_TAG":     2,
	}
)

func (x GitlabIntegrationEventType) Enum() *GitlabIntegrationEventType {
	p := new(GitlabIntegrationEventType)
	*p = x
	return p
}

func (x GitlabIntegrationEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GitlabIntegrationEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[8].Descriptor()
}

func (GitlabIntegrationEventType) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[8]
}

func (x GitlabIntegrationEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GitlabIntegrationEventType.Descriptor instead.
func (GitlabIntegrationEventType) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{8}
}

type ProcessStatus int32

const (
	ProcessStatus_PROCESS_STATUS_UNKNOWN     ProcessStatus = 0
	ProcessStatus_PROCESS_STATUS_PENDING     ProcessStatus = 1
	ProcessStatus_PROCESS_STATUS_RUNNING     ProcessStatus = 2
	ProcessStatus_PROCESS_STATUS_ROLLBACKING ProcessStatus = 3
	ProcessStatus_PROCESS_STATUS_CANCELING   ProcessStatus = 4
	ProcessStatus_PROCESS_STATUS_FINISHED    ProcessStatus = 5
	ProcessStatus_PROCESS_STATUS_FAILED      ProcessStatus = 6
	ProcessStatus_PROCESS_STATUS_CANCELED    ProcessStatus = 7
)

// Enum value maps for ProcessStatus.
var (
	ProcessStatus_name = map[int32]string{
		0: "PROCESS_STATUS_UNKNOWN",
		1: "PROCESS_STATUS_PENDING",
		2: "PROCESS_STATUS_RUNNING",
		3: "PROCESS_STATUS_ROLLBACKING",
		4: "PROCESS_STATUS_CANCELING",
		5: "PROCESS_STATUS_FINISHED",
		6: "PROCESS_STATUS_FAILED",
		7: "PROCESS_STATUS_CANCELED",
	}
	ProcessStatus_value = map[string]int32{
		"PROCESS_STATUS_UNKNOWN":     0,
		"PROCESS_STATUS_PENDING":     1,
		"PROCESS_STATUS_RUNNING":     2,
		"PROCESS_STATUS_ROLLBACKING": 3,
		"PROCESS_STATUS_CANCELING":   4,
		"PROCESS_STATUS_FINISHED":    5,
		"PROCESS_STATUS_FAILED":      6,
		"PROCESS_STATUS_CANCELED":    7,
	}
)

func (x ProcessStatus) Enum() *ProcessStatus {
	p := new(ProcessStatus)
	*p = x
	return p
}

func (x ProcessStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[9].Descriptor()
}

func (ProcessStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[9]
}

func (x ProcessStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessStatus.Descriptor instead.
func (ProcessStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{9}
}

type ProjectStatus int32

const (
	ProjectStatus_PROJECT_STATUS_UNKNOWN  ProjectStatus = 0
	ProjectStatus_PROJECT_STATUS_NEW      ProjectStatus = 1
	ProjectStatus_PROJECT_STATUS_CREATING ProjectStatus = 2
	ProjectStatus_PROJECT_STATUS_ACTIVE   ProjectStatus = 3
	ProjectStatus_PROJECT_STATUS_DELETING ProjectStatus = 4
	ProjectStatus_PROJECT_STATUS_FAILED   ProjectStatus = 5
	ProjectStatus_PROJECT_STATUS_STOPPING ProjectStatus = 6
	ProjectStatus_PROJECT_STATUS_STOPPED  ProjectStatus = 7
	ProjectStatus_PROJECT_STATUS_STARTING ProjectStatus = 8
)

// Enum value maps for ProjectStatus.
var (
	ProjectStatus_name = map[int32]string{
		0: "PROJECT_STATUS_UNKNOWN",
		1: "PROJECT_STATUS_NEW",
		2: "PROJECT_STATUS_CREATING",
		3: "PROJECT_STATUS_ACTIVE",
		4: "PROJECT_STATUS_DELETING",
		5: "PROJECT_STATUS_FAILED",
		6: "PROJECT_STATUS_STOPPING",
		7: "PROJECT_STATUS_STOPPED",
		8: "PROJECT_STATUS_STARTING",
	}
	ProjectStatus_value = map[string]int32{
		"PROJECT_STATUS_UNKNOWN":  0,
		"PROJECT_STATUS_NEW":      1,
		"PROJECT_STATUS_CREATING": 2,
		"PROJECT_STATUS_ACTIVE":   3,
		"PROJECT_STATUS_DELETING": 4,
		"PROJECT_STATUS_FAILED":   5,
		"PROJECT_STATUS_STOPPING": 6,
		"PROJECT_STATUS_STOPPED":  7,
		"PROJECT_STATUS_STARTING": 8,
	}
)

func (x ProjectStatus) Enum() *ProjectStatus {
	p := new(ProjectStatus)
	*p = x
	return p
}

func (x ProjectStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[10].Descriptor()
}

func (ProjectStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[10]
}

func (x ProjectStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectStatus.Descriptor instead.
func (ProjectStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{10}
}

type PublicHttpRoutingDomainDnsCheckStatus int32

const (
	PublicHttpRoutingDomainDnsCheckStatus_PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_UNKNOWN  PublicHttpRoutingDomainDnsCheckStatus = 0
	PublicHttpRoutingDomainDnsCheckStatus_PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_PENDING  PublicHttpRoutingDomainDnsCheckStatus = 1
	PublicHttpRoutingDomainDnsCheckStatus_PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_CHECKING PublicHttpRoutingDomainDnsCheckStatus = 2
	PublicHttpRoutingDomainDnsCheckStatus_PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_OK       PublicHttpRoutingDomainDnsCheckStatus = 3
	PublicHttpRoutingDomainDnsCheckStatus_PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_FAILED   PublicHttpRoutingDomainDnsCheckStatus = 4
	PublicHttpRoutingDomainDnsCheckStatus_PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_IGNORED  PublicHttpRoutingDomainDnsCheckStatus = 5
)

// Enum value maps for PublicHttpRoutingDomainDnsCheckStatus.
var (
	PublicHttpRoutingDomainDnsCheckStatus_name = map[int32]string{
		0: "PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_UNKNOWN",
		1: "PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_PENDING",
		2: "PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_CHECKING",
		3: "PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_OK",
		4: "PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_FAILED",
		5: "PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_IGNORED",
	}
	PublicHttpRoutingDomainDnsCheckStatus_value = map[string]int32{
		"PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_UNKNOWN":  0,
		"PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_PENDING":  1,
		"PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_CHECKING": 2,
		"PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_OK":       3,
		"PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_FAILED":   4,
		"PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_IGNORED":  5,
	}
)

func (x PublicHttpRoutingDomainDnsCheckStatus) Enum() *PublicHttpRoutingDomainDnsCheckStatus {
	p := new(PublicHttpRoutingDomainDnsCheckStatus)
	*p = x
	return p
}

func (x PublicHttpRoutingDomainDnsCheckStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicHttpRoutingDomainDnsCheckStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[11].Descriptor()
}

func (PublicHttpRoutingDomainDnsCheckStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[11]
}

func (x PublicHttpRoutingDomainDnsCheckStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicHttpRoutingDomainDnsCheckStatus.Descriptor instead.
func (PublicHttpRoutingDomainDnsCheckStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{11}
}

type PublicHttpRoutingDomainSslStatus int32

const (
	PublicHttpRoutingDomainSslStatus_PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_UNKNOWN             PublicHttpRoutingDomainSslStatus = 0
	PublicHttpRoutingDomainSslStatus_PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_INACTIVE            PublicHttpRoutingDomainSslStatus = 1
	PublicHttpRoutingDomainSslStatus_PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_BEING_INSTALLED     PublicHttpRoutingDomainSslStatus = 2
	PublicHttpRoutingDomainSslStatus_PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_WAITING_FOR_DNS     PublicHttpRoutingDomainSslStatus = 3
	PublicHttpRoutingDomainSslStatus_PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_ACTIVE              PublicHttpRoutingDomainSslStatus = 4
	PublicHttpRoutingDomainSslStatus_PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_INSTALLATION_FAILED PublicHttpRoutingDomainSslStatus = 5
)

// Enum value maps for PublicHttpRoutingDomainSslStatus.
var (
	PublicHttpRoutingDomainSslStatus_name = map[int32]string{
		0: "PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_UNKNOWN",
		1: "PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_INACTIVE",
		2: "PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_BEING_INSTALLED",
		3: "PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_WAITING_FOR_DNS",
		4: "PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_ACTIVE",
		5: "PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_INSTALLATION_FAILED",
	}
	PublicHttpRoutingDomainSslStatus_value = map[string]int32{
		"PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_UNKNOWN":             0,
		"PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_INACTIVE":            1,
		"PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_BEING_INSTALLED":     2,
		"PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_WAITING_FOR_DNS":     3,
		"PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_ACTIVE":              4,
		"PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_INSTALLATION_FAILED": 5,
	}
)

func (x PublicHttpRoutingDomainSslStatus) Enum() *PublicHttpRoutingDomainSslStatus {
	p := new(PublicHttpRoutingDomainSslStatus)
	*p = x
	return p
}

func (x PublicHttpRoutingDomainSslStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicHttpRoutingDomainSslStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[12].Descriptor()
}

func (PublicHttpRoutingDomainSslStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[12]
}

func (x PublicHttpRoutingDomainSslStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicHttpRoutingDomainSslStatus.Descriptor instead.
func (PublicHttpRoutingDomainSslStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{12}
}

type ServicePortProtocol int32

const (
	ServicePortProtocol_SERVICE_PORT_PROTOCOL_UNKNOWN ServicePortProtocol = 0
	ServicePortProtocol_SERVICE_PORT_PROTOCOL_tcp     ServicePortProtocol = 1
	ServicePortProtocol_SERVICE_PORT_PROTOCOL_udp     ServicePortProtocol = 2
)

// Enum value maps for ServicePortProtocol.
var (
	ServicePortProtocol_name = map[int32]string{
		0: "SERVICE_PORT_PROTOCOL_UNKNOWN",
		1: "SERVICE_PORT_PROTOCOL_tcp",
		2: "SERVICE_PORT_PROTOCOL_udp",
	}
	ServicePortProtocol_value = map[string]int32{
		"SERVICE_PORT_PROTOCOL_UNKNOWN": 0,
		"SERVICE_PORT_PROTOCOL_tcp":     1,
		"SERVICE_PORT_PROTOCOL_udp":     2,
	}
)

func (x ServicePortProtocol) Enum() *ServicePortProtocol {
	p := new(ServicePortProtocol)
	*p = x
	return p
}

func (x ServicePortProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServicePortProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[13].Descriptor()
}

func (ServicePortProtocol) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[13]
}

func (x ServicePortProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServicePortProtocol.Descriptor instead.
func (ServicePortProtocol) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{13}
}

type ServicePortScheme int32

const (
	ServicePortScheme_SERVICE_PORT_SCHEME_UNKNOWN    ServicePortScheme = 0
	ServicePortScheme_SERVICE_PORT_SCHEME_tcp        ServicePortScheme = 1
	ServicePortScheme_SERVICE_PORT_SCHEME_udp        ServicePortScheme = 2
	ServicePortScheme_SERVICE_PORT_SCHEME_http       ServicePortScheme = 3
	ServicePortScheme_SERVICE_PORT_SCHEME_https      ServicePortScheme = 4
	ServicePortScheme_SERVICE_PORT_SCHEME_redis      ServicePortScheme = 5
	ServicePortScheme_SERVICE_PORT_SCHEME_mysql      ServicePortScheme = 7
	ServicePortScheme_SERVICE_PORT_SCHEME_udpinflux  ServicePortScheme = 8
	ServicePortScheme_SERVICE_PORT_SCHEME_mongodb    ServicePortScheme = 9
	ServicePortScheme_SERVICE_PORT_SCHEME_postgresql ServicePortScheme = 10
	ServicePortScheme_SERVICE_PORT_SCHEME_amqp       ServicePortScheme = 11
	ServicePortScheme_SERVICE_PORT_SCHEME_stomp      ServicePortScheme = 12
	ServicePortScheme_SERVICE_PORT_SCHEME_mqtt       ServicePortScheme = 13
)

// Enum value maps for ServicePortScheme.
var (
	ServicePortScheme_name = map[int32]string{
		0:  "SERVICE_PORT_SCHEME_UNKNOWN",
		1:  "SERVICE_PORT_SCHEME_tcp",
		2:  "SERVICE_PORT_SCHEME_udp",
		3:  "SERVICE_PORT_SCHEME_http",
		4:  "SERVICE_PORT_SCHEME_https",
		5:  "SERVICE_PORT_SCHEME_redis",
		7:  "SERVICE_PORT_SCHEME_mysql",
		8:  "SERVICE_PORT_SCHEME_udpinflux",
		9:  "SERVICE_PORT_SCHEME_mongodb",
		10: "SERVICE_PORT_SCHEME_postgresql",
		11: "SERVICE_PORT_SCHEME_amqp",
		12: "SERVICE_PORT_SCHEME_stomp",
		13: "SERVICE_PORT_SCHEME_mqtt",
	}
	ServicePortScheme_value = map[string]int32{
		"SERVICE_PORT_SCHEME_UNKNOWN":    0,
		"SERVICE_PORT_SCHEME_tcp":        1,
		"SERVICE_PORT_SCHEME_udp":        2,
		"SERVICE_PORT_SCHEME_http":       3,
		"SERVICE_PORT_SCHEME_https":      4,
		"SERVICE_PORT_SCHEME_redis":      5,
		"SERVICE_PORT_SCHEME_mysql":      7,
		"SERVICE_PORT_SCHEME_udpinflux":  8,
		"SERVICE_PORT_SCHEME_mongodb":    9,
		"SERVICE_PORT_SCHEME_postgresql": 10,
		"SERVICE_PORT_SCHEME_amqp":       11,
		"SERVICE_PORT_SCHEME_stomp":      12,
		"SERVICE_PORT_SCHEME_mqtt":       13,
	}
)

func (x ServicePortScheme) Enum() *ServicePortScheme {
	p := new(ServicePortScheme)
	*p = x
	return p
}

func (x ServicePortScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServicePortScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[14].Descriptor()
}

func (ServicePortScheme) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[14]
}

func (x ServicePortScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServicePortScheme.Descriptor instead.
func (ServicePortScheme) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{14}
}

type ServiceStackConnectionStatus int32

const (
	ServiceStackConnectionStatus_SERVICE_STACK_CONNECTION_STATUS_UNKNOWN  ServiceStackConnectionStatus = 0
	ServiceStackConnectionStatus_SERVICE_STACK_CONNECTION_STATUS_CREATING ServiceStackConnectionStatus = 1
	ServiceStackConnectionStatus_SERVICE_STACK_CONNECTION_STATUS_ACTIVE   ServiceStackConnectionStatus = 2
	ServiceStackConnectionStatus_SERVICE_STACK_CONNECTION_STATUS_DELETING ServiceStackConnectionStatus = 3
)

// Enum value maps for ServiceStackConnectionStatus.
var (
	ServiceStackConnectionStatus_name = map[int32]string{
		0: "SERVICE_STACK_CONNECTION_STATUS_UNKNOWN",
		1: "SERVICE_STACK_CONNECTION_STATUS_CREATING",
		2: "SERVICE_STACK_CONNECTION_STATUS_ACTIVE",
		3: "SERVICE_STACK_CONNECTION_STATUS_DELETING",
	}
	ServiceStackConnectionStatus_value = map[string]int32{
		"SERVICE_STACK_CONNECTION_STATUS_UNKNOWN":  0,
		"SERVICE_STACK_CONNECTION_STATUS_CREATING": 1,
		"SERVICE_STACK_CONNECTION_STATUS_ACTIVE":   2,
		"SERVICE_STACK_CONNECTION_STATUS_DELETING": 3,
	}
)

func (x ServiceStackConnectionStatus) Enum() *ServiceStackConnectionStatus {
	p := new(ServiceStackConnectionStatus)
	*p = x
	return p
}

func (x ServiceStackConnectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStackConnectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[15].Descriptor()
}

func (ServiceStackConnectionStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[15]
}

func (x ServiceStackConnectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStackConnectionStatus.Descriptor instead.
func (ServiceStackConnectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{15}
}

type ServiceStackMode int32

const (
	ServiceStackMode_SERVICE_STACK_MODE_UNKNOWN ServiceStackMode = 0
	ServiceStackMode_SERVICE_STACK_MODE_HA      ServiceStackMode = 1
	ServiceStackMode_SERVICE_STACK_MODE_NON_HA  ServiceStackMode = 2
)

// Enum value maps for ServiceStackMode.
var (
	ServiceStackMode_name = map[int32]string{
		0: "SERVICE_STACK_MODE_UNKNOWN",
		1: "SERVICE_STACK_MODE_HA",
		2: "SERVICE_STACK_MODE_NON_HA",
	}
	ServiceStackMode_value = map[string]int32{
		"SERVICE_STACK_MODE_UNKNOWN": 0,
		"SERVICE_STACK_MODE_HA":      1,
		"SERVICE_STACK_MODE_NON_HA":  2,
	}
)

func (x ServiceStackMode) Enum() *ServiceStackMode {
	p := new(ServiceStackMode)
	*p = x
	return p
}

func (x ServiceStackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[16].Descriptor()
}

func (ServiceStackMode) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[16]
}

func (x ServiceStackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStackMode.Descriptor instead.
func (ServiceStackMode) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{16}
}

type ServiceStackStatus int32

const (
	ServiceStackStatus_SERVICE_STACK_STATUS_UNKNOWN                  ServiceStackStatus = 0
	ServiceStackStatus_SERVICE_STACK_STATUS_NEW                      ServiceStackStatus = 1
	ServiceStackStatus_SERVICE_STACK_STATUS_CREATING                 ServiceStackStatus = 2
	ServiceStackStatus_SERVICE_STACK_STATUS_ACTIVE                   ServiceStackStatus = 3
	ServiceStackStatus_SERVICE_STACK_STATUS_STOPPING                 ServiceStackStatus = 4
	ServiceStackStatus_SERVICE_STACK_STATUS_STOPPED                  ServiceStackStatus = 5
	ServiceStackStatus_SERVICE_STACK_STATUS_STARTING                 ServiceStackStatus = 6
	ServiceStackStatus_SERVICE_STACK_STATUS_RESTARTING               ServiceStackStatus = 7
	ServiceStackStatus_SERVICE_STACK_STATUS_RELOADING                ServiceStackStatus = 8
	ServiceStackStatus_SERVICE_STACK_STATUS_DELETING                 ServiceStackStatus = 9
	ServiceStackStatus_SERVICE_STACK_STATUS_DELETED                  ServiceStackStatus = 10
	ServiceStackStatus_SERVICE_STACK_STATUS_FAILED                   ServiceStackStatus = 11
	ServiceStackStatus_SERVICE_STACK_STATUS_ACTION_FAILED            ServiceStackStatus = 29
	ServiceStackStatus_SERVICE_STACK_STATUS_UPGRADING                ServiceStackStatus = 13
	ServiceStackStatus_SERVICE_STACK_STATUS_READY_TO_DEPLOY          ServiceStackStatus = 14
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_CREATING         ServiceStackStatus = 18
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_ACTIVE           ServiceStackStatus = 35
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_STOPPING         ServiceStackStatus = 21
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_STOPPED          ServiceStackStatus = 22
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_STARTING         ServiceStackStatus = 23
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_RESTARTING       ServiceStackStatus = 24
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_RELOADING        ServiceStackStatus = 25
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_DELETING         ServiceStackStatus = 15
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_DELETED          ServiceStackStatus = 36
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_FAILED           ServiceStackStatus = 16
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_ACTION_FAILED    ServiceStackStatus = 28
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_REPAIRING        ServiceStackStatus = 17
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_CONTAINER_FAILED ServiceStackStatus = 19
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_MOVING_CONTAINER ServiceStackStatus = 20
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_UPGRADING        ServiceStackStatus = 26
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_SCALING          ServiceStackStatus = 37
	ServiceStackStatus_SERVICE_STACK_STATUS_SERVICE_REPAIR_FAILED    ServiceStackStatus = 38
	ServiceStackStatus_SERVICE_STACK_STATUS_REPAIRING                ServiceStackStatus = 30
	ServiceStackStatus_SERVICE_STACK_STATUS_CONTAINER_FAILED         ServiceStackStatus = 31
	ServiceStackStatus_SERVICE_STACK_STATUS_MOVING_CONTAINER         ServiceStackStatus = 32
	ServiceStackStatus_SERVICE_STACK_STATUS_SCALING                  ServiceStackStatus = 33
	ServiceStackStatus_SERVICE_STACK_STATUS_REPAIR_FAILED            ServiceStackStatus = 34
)

// Enum value maps for ServiceStackStatus.
var (
	ServiceStackStatus_name = map[int32]string{
		0:  "SERVICE_STACK_STATUS_UNKNOWN",
		1:  "SERVICE_STACK_STATUS_NEW",
		2:  "SERVICE_STACK_STATUS_CREATING",
		3:  "SERVICE_STACK_STATUS_ACTIVE",
		4:  "SERVICE_STACK_STATUS_STOPPING",
		5:  "SERVICE_STACK_STATUS_STOPPED",
		6:  "SERVICE_STACK_STATUS_STARTING",
		7:  "SERVICE_STACK_STATUS_RESTARTING",
		8:  "SERVICE_STACK_STATUS_RELOADING",
		9:  "SERVICE_STACK_STATUS_DELETING",
		10: "SERVICE_STACK_STATUS_DELETED",
		11: "SERVICE_STACK_STATUS_FAILED",
		29: "SERVICE_STACK_STATUS_ACTION_FAILED",
		13: "SERVICE_STACK_STATUS_UPGRADING",
		14: "SERVICE_STACK_STATUS_READY_TO_DEPLOY",
		18: "SERVICE_STACK_STATUS_SERVICE_CREATING",
		35: "SERVICE_STACK_STATUS_SERVICE_ACTIVE",
		21: "SERVICE_STACK_STATUS_SERVICE_STOPPING",
		22: "SERVICE_STACK_STATUS_SERVICE_STOPPED",
		23: "SERVICE_STACK_STATUS_SERVICE_STARTING",
		24: "SERVICE_STACK_STATUS_SERVICE_RESTARTING",
		25: "SERVICE_STACK_STATUS_SERVICE_RELOADING",
		15: "SERVICE_STACK_STATUS_SERVICE_DELETING",
		36: "SERVICE_STACK_STATUS_SERVICE_DELETED",
		16: "SERVICE_STACK_STATUS_SERVICE_FAILED",
		28: "SERVICE_STACK_STATUS_SERVICE_ACTION_FAILED",
		17: "SERVICE_STACK_STATUS_SERVICE_REPAIRING",
		19: "SERVICE_STACK_STATUS_SERVICE_CONTAINER_FAILED",
		20: "SERVICE_STACK_STATUS_SERVICE_MOVING_CONTAINER",
		26: "SERVICE_STACK_STATUS_SERVICE_UPGRADING",
		37: "SERVICE_STACK_STATUS_SERVICE_SCALING",
		38: "SERVICE_STACK_STATUS_SERVICE_REPAIR_FAILED",
		30: "SERVICE_STACK_STATUS_REPAIRING",
		31: "SERVICE_STACK_STATUS_CONTAINER_FAILED",
		32: "SERVICE_STACK_STATUS_MOVING_CONTAINER",
		33: "SERVICE_STACK_STATUS_SCALING",
		34: "SERVICE_STACK_STATUS_REPAIR_FAILED",
	}
	ServiceStackStatus_value = map[string]int32{
		"SERVICE_STACK_STATUS_UNKNOWN":                  0,
		"SERVICE_STACK_STATUS_NEW":                      1,
		"SERVICE_STACK_STATUS_CREATING":                 2,
		"SERVICE_STACK_STATUS_ACTIVE":                   3,
		"SERVICE_STACK_STATUS_STOPPING":                 4,
		"SERVICE_STACK_STATUS_STOPPED":                  5,
		"SERVICE_STACK_STATUS_STARTING":                 6,
		"SERVICE_STACK_STATUS_RESTARTING":               7,
		"SERVICE_STACK_STATUS_RELOADING":                8,
		"SERVICE_STACK_STATUS_DELETING":                 9,
		"SERVICE_STACK_STATUS_DELETED":                  10,
		"SERVICE_STACK_STATUS_FAILED":                   11,
		"SERVICE_STACK_STATUS_ACTION_FAILED":            29,
		"SERVICE_STACK_STATUS_UPGRADING":                13,
		"SERVICE_STACK_STATUS_READY_TO_DEPLOY":          14,
		"SERVICE_STACK_STATUS_SERVICE_CREATING":         18,
		"SERVICE_STACK_STATUS_SERVICE_ACTIVE":           35,
		"SERVICE_STACK_STATUS_SERVICE_STOPPING":         21,
		"SERVICE_STACK_STATUS_SERVICE_STOPPED":          22,
		"SERVICE_STACK_STATUS_SERVICE_STARTING":         23,
		"SERVICE_STACK_STATUS_SERVICE_RESTARTING":       24,
		"SERVICE_STACK_STATUS_SERVICE_RELOADING":        25,
		"SERVICE_STACK_STATUS_SERVICE_DELETING":         15,
		"SERVICE_STACK_STATUS_SERVICE_DELETED":          36,
		"SERVICE_STACK_STATUS_SERVICE_FAILED":           16,
		"SERVICE_STACK_STATUS_SERVICE_ACTION_FAILED":    28,
		"SERVICE_STACK_STATUS_SERVICE_REPAIRING":        17,
		"SERVICE_STACK_STATUS_SERVICE_CONTAINER_FAILED": 19,
		"SERVICE_STACK_STATUS_SERVICE_MOVING_CONTAINER": 20,
		"SERVICE_STACK_STATUS_SERVICE_UPGRADING":        26,
		"SERVICE_STACK_STATUS_SERVICE_SCALING":          37,
		"SERVICE_STACK_STATUS_SERVICE_REPAIR_FAILED":    38,
		"SERVICE_STACK_STATUS_REPAIRING":                30,
		"SERVICE_STACK_STATUS_CONTAINER_FAILED":         31,
		"SERVICE_STACK_STATUS_MOVING_CONTAINER":         32,
		"SERVICE_STACK_STATUS_SCALING":                  33,
		"SERVICE_STACK_STATUS_REPAIR_FAILED":            34,
	}
)

func (x ServiceStackStatus) Enum() *ServiceStackStatus {
	p := new(ServiceStackStatus)
	*p = x
	return p
}

func (x ServiceStackStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStackStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[17].Descriptor()
}

func (ServiceStackStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[17]
}

func (x ServiceStackStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStackStatus.Descriptor instead.
func (ServiceStackStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{17}
}

type ServiceStackTypeCategory int32

const (
	ServiceStackTypeCategory_SERVICE_STACK_TYPE_CATEGORY_UNKNOWN          ServiceStackTypeCategory = 0
	ServiceStackTypeCategory_SERVICE_STACK_TYPE_CATEGORY_CORE             ServiceStackTypeCategory = 1
	ServiceStackTypeCategory_SERVICE_STACK_TYPE_CATEGORY_HTTP_L7_BALANCER ServiceStackTypeCategory = 2
	ServiceStackTypeCategory_SERVICE_STACK_TYPE_CATEGORY_STANDARD         ServiceStackTypeCategory = 3
	ServiceStackTypeCategory_SERVICE_STACK_TYPE_CATEGORY_USER             ServiceStackTypeCategory = 4
	ServiceStackTypeCategory_SERVICE_STACK_TYPE_CATEGORY_SHARED_STORAGE   ServiceStackTypeCategory = 5
	ServiceStackTypeCategory_SERVICE_STACK_TYPE_CATEGORY_OBJECT_STORAGE   ServiceStackTypeCategory = 6
	ServiceStackTypeCategory_SERVICE_STACK_TYPE_CATEGORY_BUILD            ServiceStackTypeCategory = 7
	ServiceStackTypeCategory_SERVICE_STACK_TYPE_CATEGORY_INTERNAL         ServiceStackTypeCategory = 8
	ServiceStackTypeCategory_SERVICE_STACK_TYPE_CATEGORY_PREPARE_RUNTIME  ServiceStackTypeCategory = 9
)

// Enum value maps for ServiceStackTypeCategory.
var (
	ServiceStackTypeCategory_name = map[int32]string{
		0: "SERVICE_STACK_TYPE_CATEGORY_UNKNOWN",
		1: "SERVICE_STACK_TYPE_CATEGORY_CORE",
		2: "SERVICE_STACK_TYPE_CATEGORY_HTTP_L7_BALANCER",
		3: "SERVICE_STACK_TYPE_CATEGORY_STANDARD",
		4: "SERVICE_STACK_TYPE_CATEGORY_USER",
		5: "SERVICE_STACK_TYPE_CATEGORY_SHARED_STORAGE",
		6: "SERVICE_STACK_TYPE_CATEGORY_OBJECT_STORAGE",
		7: "SERVICE_STACK_TYPE_CATEGORY_BUILD",
		8: "SERVICE_STACK_TYPE_CATEGORY_INTERNAL",
		9: "SERVICE_STACK_TYPE_CATEGORY_PREPARE_RUNTIME",
	}
	ServiceStackTypeCategory_value = map[string]int32{
		"SERVICE_STACK_TYPE_CATEGORY_UNKNOWN":          0,
		"SERVICE_STACK_TYPE_CATEGORY_CORE":             1,
		"SERVICE_STACK_TYPE_CATEGORY_HTTP_L7_BALANCER": 2,
		"SERVICE_STACK_TYPE_CATEGORY_STANDARD":         3,
		"SERVICE_STACK_TYPE_CATEGORY_USER":             4,
		"SERVICE_STACK_TYPE_CATEGORY_SHARED_STORAGE":   5,
		"SERVICE_STACK_TYPE_CATEGORY_OBJECT_STORAGE":   6,
		"SERVICE_STACK_TYPE_CATEGORY_BUILD":            7,
		"SERVICE_STACK_TYPE_CATEGORY_INTERNAL":         8,
		"SERVICE_STACK_TYPE_CATEGORY_PREPARE_RUNTIME":  9,
	}
)

func (x ServiceStackTypeCategory) Enum() *ServiceStackTypeCategory {
	p := new(ServiceStackTypeCategory)
	*p = x
	return p
}

func (x ServiceStackTypeCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStackTypeCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[18].Descriptor()
}

func (ServiceStackTypeCategory) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[18]
}

func (x ServiceStackTypeCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStackTypeCategory.Descriptor instead.
func (ServiceStackTypeCategory) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{18}
}

type UserDataType int32

const (
	UserDataType_USER_DATA_TYPE_UNKNOWN    UserDataType = 0
	UserDataType_USER_DATA_TYPE_RESTRICTED UserDataType = 1
	UserDataType_USER_DATA_TYPE_COMMON     UserDataType = 2
	UserDataType_USER_DATA_TYPE_USER       UserDataType = 3
	UserDataType_USER_DATA_TYPE_INTERNAL   UserDataType = 4
)

// Enum value maps for UserDataType.
var (
	UserDataType_name = map[int32]string{
		0: "USER_DATA_TYPE_UNKNOWN",
		1: "USER_DATA_TYPE_RESTRICTED",
		2: "USER_DATA_TYPE_COMMON",
		3: "USER_DATA_TYPE_USER",
		4: "USER_DATA_TYPE_INTERNAL",
	}
	UserDataType_value = map[string]int32{
		"USER_DATA_TYPE_UNKNOWN":    0,
		"USER_DATA_TYPE_RESTRICTED": 1,
		"USER_DATA_TYPE_COMMON":     2,
		"USER_DATA_TYPE_USER":       3,
		"USER_DATA_TYPE_INTERNAL":   4,
	}
)

func (x UserDataType) Enum() *UserDataType {
	p := new(UserDataType)
	*p = x
	return p
}

func (x UserDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[19].Descriptor()
}

func (UserDataType) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[19]
}

func (x UserDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserDataType.Descriptor instead.
func (UserDataType) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{19}
}

type UserDataVersion int32

const (
	UserDataVersion_USER_DATA_VERSION_UNKNOWN        UserDataVersion = 0
	UserDataVersion_USER_DATA_VERSION_USER           UserDataVersion = 1
	UserDataVersion_USER_DATA_VERSION_INFRASTRUCTURE UserDataVersion = 2
)

// Enum value maps for UserDataVersion.
var (
	UserDataVersion_name = map[int32]string{
		0: "USER_DATA_VERSION_UNKNOWN",
		1: "USER_DATA_VERSION_USER",
		2: "USER_DATA_VERSION_INFRASTRUCTURE",
	}
	UserDataVersion_value = map[string]int32{
		"USER_DATA_VERSION_UNKNOWN":        0,
		"USER_DATA_VERSION_USER":           1,
		"USER_DATA_VERSION_INFRASTRUCTURE": 2,
	}
)

func (x UserDataVersion) Enum() *UserDataVersion {
	p := new(UserDataVersion)
	*p = x
	return p
}

func (x UserDataVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserDataVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[20].Descriptor()
}

func (UserDataVersion) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[20]
}

func (x UserDataVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserDataVersion.Descriptor instead.
func (UserDataVersion) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{20}
}

type UserJsonObjectType int32

const (
	UserJsonObjectType_USER_JSON_OBJECT_TYPE_UNKNOWN UserJsonObjectType = 0
	UserJsonObjectType_USER_JSON_OBJECT_TYPE_GITHUB  UserJsonObjectType = 1
	UserJsonObjectType_USER_JSON_OBJECT_TYPE_GITLAB  UserJsonObjectType = 4
	UserJsonObjectType_USER_JSON_OBJECT_TYPE_USER    UserJsonObjectType = 2
	UserJsonObjectType_USER_JSON_OBJECT_TYPE_SYSTEM  UserJsonObjectType = 3
)

// Enum value maps for UserJsonObjectType.
var (
	UserJsonObjectType_name = map[int32]string{
		0: "USER_JSON_OBJECT_TYPE_UNKNOWN",
		1: "USER_JSON_OBJECT_TYPE_GITHUB",
		4: "USER_JSON_OBJECT_TYPE_GITLAB",
		2: "USER_JSON_OBJECT_TYPE_USER",
		3: "USER_JSON_OBJECT_TYPE_SYSTEM",
	}
	UserJsonObjectType_value = map[string]int32{
		"USER_JSON_OBJECT_TYPE_UNKNOWN": 0,
		"USER_JSON_OBJECT_TYPE_GITHUB":  1,
		"USER_JSON_OBJECT_TYPE_GITLAB":  4,
		"USER_JSON_OBJECT_TYPE_USER":    2,
		"USER_JSON_OBJECT_TYPE_SYSTEM":  3,
	}
)

func (x UserJsonObjectType) Enum() *UserJsonObjectType {
	p := new(UserJsonObjectType)
	*p = x
	return p
}

func (x UserJsonObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserJsonObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[21].Descriptor()
}

func (UserJsonObjectType) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[21]
}

func (x UserJsonObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserJsonObjectType.Descriptor instead.
func (UserJsonObjectType) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{21}
}

type UserStatus int32

const (
	UserStatus_USER_STATUS_UNKNOWN UserStatus = 0
	UserStatus_USER_STATUS_ACTIVE  UserStatus = 1
	UserStatus_USER_STATUS_DELETED UserStatus = 2
)

// Enum value maps for UserStatus.
var (
	UserStatus_name = map[int32]string{
		0: "USER_STATUS_UNKNOWN",
		1: "USER_STATUS_ACTIVE",
		2: "USER_STATUS_DELETED",
	}
	UserStatus_value = map[string]int32{
		"USER_STATUS_UNKNOWN": 0,
		"USER_STATUS_ACTIVE":  1,
		"USER_STATUS_DELETED": 2,
	}
)

func (x UserStatus) Enum() *UserStatus {
	p := new(UserStatus)
	*p = x
	return p
}

func (x UserStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsApiProtocol_proto_enumTypes[22].Descriptor()
}

func (UserStatus) Type() protoreflect.EnumType {
	return &file_zeropsApiProtocol_proto_enumTypes[22]
}

func (x UserStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserStatus.Descriptor instead.
func (UserStatus) EnumDescriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{22}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=zBusinessZeropsApiProtocol.ErrorCode" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Meta    []byte    `protobuf:"bytes,3,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_NO_ERROR
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetMeta() []byte {
	if x != nil {
		return x.Meta
	}
	return nil
}

type ErrorNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *Error `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool   `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *ErrorNull) Reset() {
	*x = ErrorNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorNull) ProtoMessage() {}

func (x *ErrorNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorNull.ProtoReflect.Descriptor instead.
func (*ErrorNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{1}
}

func (x *ErrorNull) GetValue() *Error {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ErrorNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSet   bool  `protobuf:"varint,1,opt,name=isSet,proto3" json:"isSet,omitempty"`
	Seconds int64 `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanos   int32 `protobuf:"varint,3,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{2}
}

func (x *Timestamp) GetIsSet() bool {
	if x != nil {
		return x.IsSet
	}
	return false
}

func (x *Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

type DeleteProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteProjectRequest) Reset() {
	*x = DeleteProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectRequest) ProtoMessage() {}

func (x *DeleteProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteProjectRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteServiceStackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteServiceStackRequest) Reset() {
	*x = DeleteServiceStackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServiceStackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceStackRequest) ProtoMessage() {}

func (x *DeleteServiceStackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceStackRequest.ProtoReflect.Descriptor instead.
func (*DeleteServiceStackRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteServiceStackRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetProcessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProcessRequest) Reset() {
	*x = GetProcessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessRequest) ProtoMessage() {}

func (x *GetProcessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessRequest.ProtoReflect.Descriptor instead.
func (*GetProcessRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{5}
}

func (x *GetProcessRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetProjectsByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetProjectsByNameRequest) Reset() {
	*x = GetProjectsByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectsByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsByNameRequest) ProtoMessage() {}

func (x *GetProjectsByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsByNameRequest.ProtoReflect.Descriptor instead.
func (*GetProjectsByNameRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{6}
}

func (x *GetProjectsByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetServiceStackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetServiceStackRequest) Reset() {
	*x = GetServiceStackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceStackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceStackRequest) ProtoMessage() {}

func (x *GetServiceStackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceStackRequest.ProtoReflect.Descriptor instead.
func (*GetServiceStackRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{7}
}

func (x *GetServiceStackRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetServiceStackByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,2,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetServiceStackByNameRequest) Reset() {
	*x = GetServiceStackByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceStackByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceStackByNameRequest) ProtoMessage() {}

func (x *GetServiceStackByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceStackByNameRequest.ProtoReflect.Descriptor instead.
func (*GetServiceStackByNameRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{8}
}

func (x *GetServiceStackByNameRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetServiceStackByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetUserInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserInfoRequest) Reset() {
	*x = GetUserInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoRequest) ProtoMessage() {}

func (x *GetUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoRequest.ProtoReflect.Descriptor instead.
func (*GetUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{9}
}

type PostAppVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceStackId string      `protobuf:"bytes,1,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Name           *StringNull `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PostAppVersionRequest) Reset() {
	*x = PostAppVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAppVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAppVersionRequest) ProtoMessage() {}

func (x *PostAppVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAppVersionRequest.ProtoReflect.Descriptor instead.
func (*PostAppVersionRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{10}
}

func (x *PostAppVersionRequest) GetServiceStackId() string {
	if x != nil {
		return x.ServiceStackId
	}
	return ""
}

func (x *PostAppVersionRequest) GetName() *StringNull {
	if x != nil {
		return x.Name
	}
	return nil
}

type PostProjectImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Yaml     string `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *PostProjectImportRequest) Reset() {
	*x = PostProjectImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostProjectImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostProjectImportRequest) ProtoMessage() {}

func (x *PostProjectImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostProjectImportRequest.ProtoReflect.Descriptor instead.
func (*PostProjectImportRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{11}
}

func (x *PostProjectImportRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PostProjectImportRequest) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type PostPublicHttpRoutingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string                           `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	SslEnabled bool                             `protobuf:"varint,2,opt,name=sslEnabled,proto3" json:"sslEnabled,omitempty"`
	Domains    []string                         `protobuf:"bytes,3,rep,name=domains,proto3" json:"domains,omitempty"`
	Locations  []*PublicHttpRoutingLocationPost `protobuf:"bytes,4,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *PostPublicHttpRoutingRequest) Reset() {
	*x = PostPublicHttpRoutingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostPublicHttpRoutingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostPublicHttpRoutingRequest) ProtoMessage() {}

func (x *PostPublicHttpRoutingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostPublicHttpRoutingRequest.ProtoReflect.Descriptor instead.
func (*PostPublicHttpRoutingRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{12}
}

func (x *PostPublicHttpRoutingRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PostPublicHttpRoutingRequest) GetSslEnabled() bool {
	if x != nil {
		return x.SslEnabled
	}
	return false
}

func (x *PostPublicHttpRoutingRequest) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *PostPublicHttpRoutingRequest) GetLocations() []*PublicHttpRoutingLocationPost {
	if x != nil {
		return x.Locations
	}
	return nil
}

type PostServiceStackImportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Yaml      string `protobuf:"bytes,2,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *PostServiceStackImportRequest) Reset() {
	*x = PostServiceStackImportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostServiceStackImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostServiceStackImportRequest) ProtoMessage() {}

func (x *PostServiceStackImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostServiceStackImportRequest.ProtoReflect.Descriptor instead.
func (*PostServiceStackImportRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{13}
}

func (x *PostServiceStackImportRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PostServiceStackImportRequest) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type PostVpnRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientPublicKey string `protobuf:"bytes,2,opt,name=clientPublicKey,proto3" json:"clientPublicKey,omitempty"`
}

func (x *PostVpnRequestRequest) Reset() {
	*x = PostVpnRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostVpnRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostVpnRequestRequest) ProtoMessage() {}

func (x *PostVpnRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostVpnRequestRequest.ProtoReflect.Descriptor instead.
func (*PostVpnRequestRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{14}
}

func (x *PostVpnRequestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PostVpnRequestRequest) GetClientPublicKey() string {
	if x != nil {
		return x.ClientPublicKey
	}
	return ""
}

type PublicHttpRoutingLocationPost struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path           string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Port           int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	ServiceStackId string `protobuf:"bytes,3,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
}

func (x *PublicHttpRoutingLocationPost) Reset() {
	*x = PublicHttpRoutingLocationPost{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicHttpRoutingLocationPost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicHttpRoutingLocationPost) ProtoMessage() {}

func (x *PublicHttpRoutingLocationPost) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicHttpRoutingLocationPost.ProtoReflect.Descriptor instead.
func (*PublicHttpRoutingLocationPost) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{15}
}

func (x *PublicHttpRoutingLocationPost) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PublicHttpRoutingLocationPost) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PublicHttpRoutingLocationPost) GetServiceStackId() string {
	if x != nil {
		return x.ServiceStackId
	}
	return ""
}

type PutAppVersionBuildAndDeployRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BuildConfigContent string      `protobuf:"bytes,5,opt,name=buildConfigContent,proto3" json:"buildConfigContent,omitempty"`
	Source             *StringNull `protobuf:"bytes,7,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *PutAppVersionBuildAndDeployRequest) Reset() {
	*x = PutAppVersionBuildAndDeployRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutAppVersionBuildAndDeployRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutAppVersionBuildAndDeployRequest) ProtoMessage() {}

func (x *PutAppVersionBuildAndDeployRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutAppVersionBuildAndDeployRequest.ProtoReflect.Descriptor instead.
func (*PutAppVersionBuildAndDeployRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{16}
}

func (x *PutAppVersionBuildAndDeployRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutAppVersionBuildAndDeployRequest) GetBuildConfigContent() string {
	if x != nil {
		return x.BuildConfigContent
	}
	return ""
}

func (x *PutAppVersionBuildAndDeployRequest) GetSource() *StringNull {
	if x != nil {
		return x.Source
	}
	return nil
}

type PutAppVersionDeployRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ConfigContent *StringNull `protobuf:"bytes,3,opt,name=configContent,proto3" json:"configContent,omitempty"`
	Source        *StringNull `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *PutAppVersionDeployRequest) Reset() {
	*x = PutAppVersionDeployRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutAppVersionDeployRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutAppVersionDeployRequest) ProtoMessage() {}

func (x *PutAppVersionDeployRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutAppVersionDeployRequest.ProtoReflect.Descriptor instead.
func (*PutAppVersionDeployRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{17}
}

func (x *PutAppVersionDeployRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutAppVersionDeployRequest) GetConfigContent() *StringNull {
	if x != nil {
		return x.ConfigContent
	}
	return nil
}

func (x *PutAppVersionDeployRequest) GetSource() *StringNull {
	if x != nil {
		return x.Source
	}
	return nil
}

type PutProjectStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PutProjectStartRequest) Reset() {
	*x = PutProjectStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutProjectStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutProjectStartRequest) ProtoMessage() {}

func (x *PutProjectStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutProjectStartRequest.ProtoReflect.Descriptor instead.
func (*PutProjectStartRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{18}
}

func (x *PutProjectStartRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PutProjectStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PutProjectStopRequest) Reset() {
	*x = PutProjectStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutProjectStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutProjectStopRequest) ProtoMessage() {}

func (x *PutProjectStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutProjectStopRequest.ProtoReflect.Descriptor instead.
func (*PutProjectStopRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{19}
}

func (x *PutProjectStopRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PutServiceStackRestartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PutServiceStackRestartRequest) Reset() {
	*x = PutServiceStackRestartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutServiceStackRestartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutServiceStackRestartRequest) ProtoMessage() {}

func (x *PutServiceStackRestartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutServiceStackRestartRequest.ProtoReflect.Descriptor instead.
func (*PutServiceStackRestartRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{20}
}

func (x *PutServiceStackRestartRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PutServiceStackStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PutServiceStackStartRequest) Reset() {
	*x = PutServiceStackStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutServiceStackStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutServiceStackStartRequest) ProtoMessage() {}

func (x *PutServiceStackStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutServiceStackStartRequest.ProtoReflect.Descriptor instead.
func (*PutServiceStackStartRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{21}
}

func (x *PutServiceStackStartRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PutServiceStackStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PutServiceStackStopRequest) Reset() {
	*x = PutServiceStackStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutServiceStackStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutServiceStackStopRequest) ProtoMessage() {}

func (x *PutServiceStackStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutServiceStackStopRequest.ProtoReflect.Descriptor instead.
func (*PutServiceStackStopRequest) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{22}
}

func (x *PutServiceStackStopRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                    `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *DeleteProjectResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *DeleteProjectResponse) Reset() {
	*x = DeleteProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectResponse) ProtoMessage() {}

func (x *DeleteProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectResponse.ProtoReflect.Descriptor instead.
func (*DeleteProjectResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteProjectResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DeleteProjectResponse) GetOutput() *DeleteProjectResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type DeleteProjectResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId        string                         `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId       string                         `protobuf:"bytes,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackId  *StringNull                    `protobuf:"bytes,4,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Project         *ProjectLightJsonObject        `protobuf:"bytes,5,opt,name=project,proto3" json:"project,omitempty"`
	ServiceStacks   []*ServiceStackLightJsonObject `protobuf:"bytes,6,rep,name=serviceStacks,proto3" json:"serviceStacks,omitempty"`
	Status          ProcessStatus                  `protobuf:"varint,7,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ProcessStatus" json:"status,omitempty"`
	Sequence        int32                          `protobuf:"varint,8,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CreatedByUser   *UserJsonObject                `protobuf:"bytes,9,opt,name=createdByUser,proto3" json:"createdByUser,omitempty"`
	CanceledByUser  *UserJsonObjectNull            `protobuf:"bytes,10,opt,name=canceledByUser,proto3" json:"canceledByUser,omitempty"`
	ActionName      string                         `protobuf:"bytes,11,opt,name=actionName,proto3" json:"actionName,omitempty"`
	Created         *Timestamp                     `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate      *Timestamp                     `protobuf:"bytes,13,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Started         *TimestampNull                 `protobuf:"bytes,14,opt,name=started,proto3" json:"started,omitempty"`
	Finished        *TimestampNull                 `protobuf:"bytes,15,opt,name=finished,proto3" json:"finished,omitempty"`
	CreatedBySystem bool                           `protobuf:"varint,16,opt,name=createdBySystem,proto3" json:"createdBySystem,omitempty"`
	AppVersion      *AppVersionJsonObjectNull      `protobuf:"bytes,17,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
}

func (x *DeleteProjectResponseDto) Reset() {
	*x = DeleteProjectResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectResponseDto) ProtoMessage() {}

func (x *DeleteProjectResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectResponseDto.ProtoReflect.Descriptor instead.
func (*DeleteProjectResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteProjectResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteProjectResponseDto) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *DeleteProjectResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteProjectResponseDto) GetServiceStackId() *StringNull {
	if x != nil {
		return x.ServiceStackId
	}
	return nil
}

func (x *DeleteProjectResponseDto) GetProject() *ProjectLightJsonObject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *DeleteProjectResponseDto) GetServiceStacks() []*ServiceStackLightJsonObject {
	if x != nil {
		return x.ServiceStacks
	}
	return nil
}

func (x *DeleteProjectResponseDto) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_PROCESS_STATUS_UNKNOWN
}

func (x *DeleteProjectResponseDto) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *DeleteProjectResponseDto) GetCreatedByUser() *UserJsonObject {
	if x != nil {
		return x.CreatedByUser
	}
	return nil
}

func (x *DeleteProjectResponseDto) GetCanceledByUser() *UserJsonObjectNull {
	if x != nil {
		return x.CanceledByUser
	}
	return nil
}

func (x *DeleteProjectResponseDto) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *DeleteProjectResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *DeleteProjectResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *DeleteProjectResponseDto) GetStarted() *TimestampNull {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *DeleteProjectResponseDto) GetFinished() *TimestampNull {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *DeleteProjectResponseDto) GetCreatedBySystem() bool {
	if x != nil {
		return x.CreatedBySystem
	}
	return false
}

func (x *DeleteProjectResponseDto) GetAppVersion() *AppVersionJsonObjectNull {
	if x != nil {
		return x.AppVersion
	}
	return nil
}

type DeleteServiceStackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                         `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *DeleteServiceStackResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *DeleteServiceStackResponse) Reset() {
	*x = DeleteServiceStackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServiceStackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceStackResponse) ProtoMessage() {}

func (x *DeleteServiceStackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceStackResponse.ProtoReflect.Descriptor instead.
func (*DeleteServiceStackResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteServiceStackResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DeleteServiceStackResponse) GetOutput() *DeleteServiceStackResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type DeleteServiceStackResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId        string                         `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId       string                         `protobuf:"bytes,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackId  *StringNull                    `protobuf:"bytes,4,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Project         *ProjectLightJsonObject        `protobuf:"bytes,5,opt,name=project,proto3" json:"project,omitempty"`
	ServiceStacks   []*ServiceStackLightJsonObject `protobuf:"bytes,6,rep,name=serviceStacks,proto3" json:"serviceStacks,omitempty"`
	Status          ProcessStatus                  `protobuf:"varint,7,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ProcessStatus" json:"status,omitempty"`
	Sequence        int32                          `protobuf:"varint,8,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CreatedByUser   *UserJsonObject                `protobuf:"bytes,9,opt,name=createdByUser,proto3" json:"createdByUser,omitempty"`
	CanceledByUser  *UserJsonObjectNull            `protobuf:"bytes,10,opt,name=canceledByUser,proto3" json:"canceledByUser,omitempty"`
	ActionName      string                         `protobuf:"bytes,11,opt,name=actionName,proto3" json:"actionName,omitempty"`
	Created         *Timestamp                     `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate      *Timestamp                     `protobuf:"bytes,13,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Started         *TimestampNull                 `protobuf:"bytes,14,opt,name=started,proto3" json:"started,omitempty"`
	Finished        *TimestampNull                 `protobuf:"bytes,15,opt,name=finished,proto3" json:"finished,omitempty"`
	CreatedBySystem bool                           `protobuf:"varint,16,opt,name=createdBySystem,proto3" json:"createdBySystem,omitempty"`
	AppVersion      *AppVersionJsonObjectNull      `protobuf:"bytes,17,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
}

func (x *DeleteServiceStackResponseDto) Reset() {
	*x = DeleteServiceStackResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServiceStackResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceStackResponseDto) ProtoMessage() {}

func (x *DeleteServiceStackResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceStackResponseDto.ProtoReflect.Descriptor instead.
func (*DeleteServiceStackResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteServiceStackResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteServiceStackResponseDto) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *DeleteServiceStackResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteServiceStackResponseDto) GetServiceStackId() *StringNull {
	if x != nil {
		return x.ServiceStackId
	}
	return nil
}

func (x *DeleteServiceStackResponseDto) GetProject() *ProjectLightJsonObject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *DeleteServiceStackResponseDto) GetServiceStacks() []*ServiceStackLightJsonObject {
	if x != nil {
		return x.ServiceStacks
	}
	return nil
}

func (x *DeleteServiceStackResponseDto) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_PROCESS_STATUS_UNKNOWN
}

func (x *DeleteServiceStackResponseDto) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *DeleteServiceStackResponseDto) GetCreatedByUser() *UserJsonObject {
	if x != nil {
		return x.CreatedByUser
	}
	return nil
}

func (x *DeleteServiceStackResponseDto) GetCanceledByUser() *UserJsonObjectNull {
	if x != nil {
		return x.CanceledByUser
	}
	return nil
}

func (x *DeleteServiceStackResponseDto) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *DeleteServiceStackResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *DeleteServiceStackResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *DeleteServiceStackResponseDto) GetStarted() *TimestampNull {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *DeleteServiceStackResponseDto) GetFinished() *TimestampNull {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *DeleteServiceStackResponseDto) GetCreatedBySystem() bool {
	if x != nil {
		return x.CreatedBySystem
	}
	return false
}

func (x *DeleteServiceStackResponseDto) GetAppVersion() *AppVersionJsonObjectNull {
	if x != nil {
		return x.AppVersion
	}
	return nil
}

type GetProcessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *GetProcessResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GetProcessResponse) Reset() {
	*x = GetProcessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessResponse) ProtoMessage() {}

func (x *GetProcessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessResponse.ProtoReflect.Descriptor instead.
func (*GetProcessResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{27}
}

func (x *GetProcessResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetProcessResponse) GetOutput() *GetProcessResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type GetProcessResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId        string                         `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId       string                         `protobuf:"bytes,14,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackId  *StringNull                    `protobuf:"bytes,15,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Project         *ProjectLightJsonObject        `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	ServiceStacks   []*ServiceStackLightJsonObject `protobuf:"bytes,4,rep,name=serviceStacks,proto3" json:"serviceStacks,omitempty"`
	Status          ProcessStatus                  `protobuf:"varint,5,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ProcessStatus" json:"status,omitempty"`
	Sequence        int32                          `protobuf:"varint,16,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CreatedByUser   *UserJsonObject                `protobuf:"bytes,6,opt,name=createdByUser,proto3" json:"createdByUser,omitempty"`
	CanceledByUser  *UserJsonObjectNull            `protobuf:"bytes,7,opt,name=canceledByUser,proto3" json:"canceledByUser,omitempty"`
	ActionName      string                         `protobuf:"bytes,8,opt,name=actionName,proto3" json:"actionName,omitempty"`
	Created         *Timestamp                     `protobuf:"bytes,10,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate      *Timestamp                     `protobuf:"bytes,11,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Started         *TimestampNull                 `protobuf:"bytes,17,opt,name=started,proto3" json:"started,omitempty"`
	Finished        *TimestampNull                 `protobuf:"bytes,18,opt,name=finished,proto3" json:"finished,omitempty"`
	CreatedBySystem bool                           `protobuf:"varint,12,opt,name=createdBySystem,proto3" json:"createdBySystem,omitempty"`
	AppVersion      *AppVersionJsonObjectNull      `protobuf:"bytes,13,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
}

func (x *GetProcessResponseDto) Reset() {
	*x = GetProcessResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProcessResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProcessResponseDto) ProtoMessage() {}

func (x *GetProcessResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProcessResponseDto.ProtoReflect.Descriptor instead.
func (*GetProcessResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{28}
}

func (x *GetProcessResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetProcessResponseDto) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GetProcessResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetProcessResponseDto) GetServiceStackId() *StringNull {
	if x != nil {
		return x.ServiceStackId
	}
	return nil
}

func (x *GetProcessResponseDto) GetProject() *ProjectLightJsonObject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *GetProcessResponseDto) GetServiceStacks() []*ServiceStackLightJsonObject {
	if x != nil {
		return x.ServiceStacks
	}
	return nil
}

func (x *GetProcessResponseDto) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_PROCESS_STATUS_UNKNOWN
}

func (x *GetProcessResponseDto) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *GetProcessResponseDto) GetCreatedByUser() *UserJsonObject {
	if x != nil {
		return x.CreatedByUser
	}
	return nil
}

func (x *GetProcessResponseDto) GetCanceledByUser() *UserJsonObjectNull {
	if x != nil {
		return x.CanceledByUser
	}
	return nil
}

func (x *GetProcessResponseDto) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *GetProcessResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetProcessResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *GetProcessResponseDto) GetStarted() *TimestampNull {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *GetProcessResponseDto) GetFinished() *TimestampNull {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *GetProcessResponseDto) GetCreatedBySystem() bool {
	if x != nil {
		return x.CreatedBySystem
	}
	return false
}

func (x *GetProcessResponseDto) GetAppVersion() *AppVersionJsonObjectNull {
	if x != nil {
		return x.AppVersion
	}
	return nil
}

type GetProjectsByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *GetProjectsByNameResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GetProjectsByNameResponse) Reset() {
	*x = GetProjectsByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectsByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsByNameResponse) ProtoMessage() {}

func (x *GetProjectsByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsByNameResponse.ProtoReflect.Descriptor instead.
func (*GetProjectsByNameResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{29}
}

func (x *GetProjectsByNameResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetProjectsByNameResponse) GetOutput() *GetProjectsByNameResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type GetProjectsByNameResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *GetProjectsByNameResponseDto) Reset() {
	*x = GetProjectsByNameResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectsByNameResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsByNameResponseDto) ProtoMessage() {}

func (x *GetProjectsByNameResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsByNameResponseDto.ProtoReflect.Descriptor instead.
func (*GetProjectsByNameResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{30}
}

func (x *GetProjectsByNameResponseDto) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

type GetServiceStackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *GetServiceStackResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GetServiceStackResponse) Reset() {
	*x = GetServiceStackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceStackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceStackResponse) ProtoMessage() {}

func (x *GetServiceStackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceStackResponse.ProtoReflect.Descriptor instead.
func (*GetServiceStackResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{31}
}

func (x *GetServiceStackResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetServiceStackResponse) GetOutput() *GetServiceStackResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type GetServiceStackResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                 string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status                             ServiceStackStatus                   `protobuf:"varint,2,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ServiceStackStatus" json:"status,omitempty"`
	Name                               string                               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ServiceStackTypeInfo               *ServiceStackInfoJsonObject          `protobuf:"bytes,4,opt,name=serviceStackTypeInfo,proto3" json:"serviceStackTypeInfo,omitempty"`
	ServiceStackTypeId                 string                               `protobuf:"bytes,5,opt,name=serviceStackTypeId,proto3" json:"serviceStackTypeId,omitempty"`
	ServiceStackTypeVersionId          string                               `protobuf:"bytes,6,opt,name=serviceStackTypeVersionId,proto3" json:"serviceStackTypeVersionId,omitempty"`
	IsSystem                           bool                                 `protobuf:"varint,7,opt,name=isSystem,proto3" json:"isSystem,omitempty"`
	StartOnProjectStart                bool                                 `protobuf:"varint,31,opt,name=startOnProjectStart,proto3" json:"startOnProjectStart,omitempty"`
	GithubIntegration                  *GithubIntegrationNull               `protobuf:"bytes,26,opt,name=githubIntegration,proto3" json:"githubIntegration,omitempty"`
	GitlabIntegration                  *GitlabIntegrationNull               `protobuf:"bytes,29,opt,name=gitlabIntegration,proto3" json:"gitlabIntegration,omitempty"`
	CustomAutoscaling                  *CustomAutoscalingNull               `protobuf:"bytes,33,opt,name=customAutoscaling,proto3" json:"customAutoscaling,omitempty"`
	Ports                              []*ServicePort                       `protobuf:"bytes,8,rep,name=ports,proto3" json:"ports,omitempty"`
	RequestedPorts                     *RequestedPortsJsonObject            `protobuf:"bytes,9,opt,name=requestedPorts,proto3" json:"requestedPorts,omitempty"`
	Created                            *Timestamp                           `protobuf:"bytes,10,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate                         *Timestamp                           `protobuf:"bytes,11,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Mode                               ServiceStackMode                     `protobuf:"varint,12,opt,name=mode,proto3,enum=zBusinessZeropsApiProtocol.ServiceStackMode" json:"mode,omitempty"`
	CustomPortsEnabled                 bool                                 `protobuf:"varint,13,opt,name=customPortsEnabled,proto3" json:"customPortsEnabled,omitempty"`
	SubdomainAccess                    bool                                 `protobuf:"varint,14,opt,name=subdomainAccess,proto3" json:"subdomainAccess,omitempty"`
	ReloadAvailable                    bool                                 `protobuf:"varint,15,opt,name=reloadAvailable,proto3" json:"reloadAvailable,omitempty"`
	VersionNumber                      string                               `protobuf:"bytes,16,opt,name=versionNumber,proto3" json:"versionNumber,omitempty"`
	ProjectId                          string                               `protobuf:"bytes,32,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Project                            *ProjectLight                        `protobuf:"bytes,17,opt,name=project,proto3" json:"project,omitempty"`
	ConnectedStacks                    []*ServiceStackConnectedServiceStack `protobuf:"bytes,18,rep,name=connectedStacks,proto3" json:"connectedStacks,omitempty"`
	UserData                           []*UserDataLight                     `protobuf:"bytes,34,rep,name=userData,proto3" json:"userData,omitempty"`
	ActiveAppVersion                   *AppVersionLightNull                 `protobuf:"bytes,19,opt,name=activeAppVersion,proto3" json:"activeAppVersion,omitempty"`
	HasUnsyncedUserDataRecord          bool                                 `protobuf:"varint,20,opt,name=hasUnsyncedUserDataRecord,proto3" json:"hasUnsyncedUserDataRecord,omitempty"`
	HasUnsyncedPublicHttpRoutingRecord bool                                 `protobuf:"varint,21,opt,name=hasUnsyncedPublicHttpRoutingRecord,proto3" json:"hasUnsyncedPublicHttpRoutingRecord,omitempty"`
	HasUnsyncedPublicPortRecord        bool                                 `protobuf:"varint,22,opt,name=hasUnsyncedPublicPortRecord,proto3" json:"hasUnsyncedPublicPortRecord,omitempty"`
	HasPublicPortRoutingAccess         bool                                 `protobuf:"varint,24,opt,name=hasPublicPortRoutingAccess,proto3" json:"hasPublicPortRoutingAccess,omitempty"`
	HasPublicHttpRoutingAccess         bool                                 `protobuf:"varint,25,opt,name=hasPublicHttpRoutingAccess,proto3" json:"hasPublicHttpRoutingAccess,omitempty"`
	ActivePublicHttpRoutingCount       *Int32Null                           `protobuf:"bytes,27,opt,name=activePublicHttpRoutingCount,proto3" json:"activePublicHttpRoutingCount,omitempty"`
	ActivePublicPortRoutingCount       *Int32Null                           `protobuf:"bytes,28,opt,name=activePublicPortRoutingCount,proto3" json:"activePublicPortRoutingCount,omitempty"`
}

func (x *GetServiceStackResponseDto) Reset() {
	*x = GetServiceStackResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceStackResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceStackResponseDto) ProtoMessage() {}

func (x *GetServiceStackResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceStackResponseDto.ProtoReflect.Descriptor instead.
func (*GetServiceStackResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{32}
}

func (x *GetServiceStackResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetServiceStackResponseDto) GetStatus() ServiceStackStatus {
	if x != nil {
		return x.Status
	}
	return ServiceStackStatus_SERVICE_STACK_STATUS_UNKNOWN
}

func (x *GetServiceStackResponseDto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetServiceStackResponseDto) GetServiceStackTypeInfo() *ServiceStackInfoJsonObject {
	if x != nil {
		return x.ServiceStackTypeInfo
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetServiceStackTypeId() string {
	if x != nil {
		return x.ServiceStackTypeId
	}
	return ""
}

func (x *GetServiceStackResponseDto) GetServiceStackTypeVersionId() string {
	if x != nil {
		return x.ServiceStackTypeVersionId
	}
	return ""
}

func (x *GetServiceStackResponseDto) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *GetServiceStackResponseDto) GetStartOnProjectStart() bool {
	if x != nil {
		return x.StartOnProjectStart
	}
	return false
}

func (x *GetServiceStackResponseDto) GetGithubIntegration() *GithubIntegrationNull {
	if x != nil {
		return x.GithubIntegration
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetGitlabIntegration() *GitlabIntegrationNull {
	if x != nil {
		return x.GitlabIntegration
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetCustomAutoscaling() *CustomAutoscalingNull {
	if x != nil {
		return x.CustomAutoscaling
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetPorts() []*ServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetRequestedPorts() *RequestedPortsJsonObject {
	if x != nil {
		return x.RequestedPorts
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetMode() ServiceStackMode {
	if x != nil {
		return x.Mode
	}
	return ServiceStackMode_SERVICE_STACK_MODE_UNKNOWN
}

func (x *GetServiceStackResponseDto) GetCustomPortsEnabled() bool {
	if x != nil {
		return x.CustomPortsEnabled
	}
	return false
}

func (x *GetServiceStackResponseDto) GetSubdomainAccess() bool {
	if x != nil {
		return x.SubdomainAccess
	}
	return false
}

func (x *GetServiceStackResponseDto) GetReloadAvailable() bool {
	if x != nil {
		return x.ReloadAvailable
	}
	return false
}

func (x *GetServiceStackResponseDto) GetVersionNumber() string {
	if x != nil {
		return x.VersionNumber
	}
	return ""
}

func (x *GetServiceStackResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetServiceStackResponseDto) GetProject() *ProjectLight {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetConnectedStacks() []*ServiceStackConnectedServiceStack {
	if x != nil {
		return x.ConnectedStacks
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetUserData() []*UserDataLight {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetActiveAppVersion() *AppVersionLightNull {
	if x != nil {
		return x.ActiveAppVersion
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetHasUnsyncedUserDataRecord() bool {
	if x != nil {
		return x.HasUnsyncedUserDataRecord
	}
	return false
}

func (x *GetServiceStackResponseDto) GetHasUnsyncedPublicHttpRoutingRecord() bool {
	if x != nil {
		return x.HasUnsyncedPublicHttpRoutingRecord
	}
	return false
}

func (x *GetServiceStackResponseDto) GetHasUnsyncedPublicPortRecord() bool {
	if x != nil {
		return x.HasUnsyncedPublicPortRecord
	}
	return false
}

func (x *GetServiceStackResponseDto) GetHasPublicPortRoutingAccess() bool {
	if x != nil {
		return x.HasPublicPortRoutingAccess
	}
	return false
}

func (x *GetServiceStackResponseDto) GetHasPublicHttpRoutingAccess() bool {
	if x != nil {
		return x.HasPublicHttpRoutingAccess
	}
	return false
}

func (x *GetServiceStackResponseDto) GetActivePublicHttpRoutingCount() *Int32Null {
	if x != nil {
		return x.ActivePublicHttpRoutingCount
	}
	return nil
}

func (x *GetServiceStackResponseDto) GetActivePublicPortRoutingCount() *Int32Null {
	if x != nil {
		return x.ActivePublicPortRoutingCount
	}
	return nil
}

type GetServiceStackByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                            `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *GetServiceStackByNameResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GetServiceStackByNameResponse) Reset() {
	*x = GetServiceStackByNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceStackByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceStackByNameResponse) ProtoMessage() {}

func (x *GetServiceStackByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceStackByNameResponse.ProtoReflect.Descriptor instead.
func (*GetServiceStackByNameResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{33}
}

func (x *GetServiceStackByNameResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetServiceStackByNameResponse) GetOutput() *GetServiceStackByNameResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type GetServiceStackByNameResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                 string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status                             ServiceStackStatus                   `protobuf:"varint,2,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ServiceStackStatus" json:"status,omitempty"`
	Name                               string                               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ServiceStackTypeInfo               *ServiceStackInfoJsonObject          `protobuf:"bytes,4,opt,name=serviceStackTypeInfo,proto3" json:"serviceStackTypeInfo,omitempty"`
	ServiceStackTypeId                 string                               `protobuf:"bytes,5,opt,name=serviceStackTypeId,proto3" json:"serviceStackTypeId,omitempty"`
	ServiceStackTypeVersionId          string                               `protobuf:"bytes,6,opt,name=serviceStackTypeVersionId,proto3" json:"serviceStackTypeVersionId,omitempty"`
	IsSystem                           bool                                 `protobuf:"varint,7,opt,name=isSystem,proto3" json:"isSystem,omitempty"`
	StartOnProjectStart                bool                                 `protobuf:"varint,31,opt,name=startOnProjectStart,proto3" json:"startOnProjectStart,omitempty"`
	GithubIntegration                  *GithubIntegrationNull               `protobuf:"bytes,26,opt,name=githubIntegration,proto3" json:"githubIntegration,omitempty"`
	GitlabIntegration                  *GitlabIntegrationNull               `protobuf:"bytes,29,opt,name=gitlabIntegration,proto3" json:"gitlabIntegration,omitempty"`
	CustomAutoscaling                  *CustomAutoscalingNull               `protobuf:"bytes,33,opt,name=customAutoscaling,proto3" json:"customAutoscaling,omitempty"`
	Ports                              []*ServicePort                       `protobuf:"bytes,8,rep,name=ports,proto3" json:"ports,omitempty"`
	RequestedPorts                     *RequestedPortsJsonObject            `protobuf:"bytes,9,opt,name=requestedPorts,proto3" json:"requestedPorts,omitempty"`
	Created                            *Timestamp                           `protobuf:"bytes,10,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate                         *Timestamp                           `protobuf:"bytes,11,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Mode                               ServiceStackMode                     `protobuf:"varint,12,opt,name=mode,proto3,enum=zBusinessZeropsApiProtocol.ServiceStackMode" json:"mode,omitempty"`
	CustomPortsEnabled                 bool                                 `protobuf:"varint,13,opt,name=customPortsEnabled,proto3" json:"customPortsEnabled,omitempty"`
	SubdomainAccess                    bool                                 `protobuf:"varint,14,opt,name=subdomainAccess,proto3" json:"subdomainAccess,omitempty"`
	ReloadAvailable                    bool                                 `protobuf:"varint,15,opt,name=reloadAvailable,proto3" json:"reloadAvailable,omitempty"`
	VersionNumber                      string                               `protobuf:"bytes,16,opt,name=versionNumber,proto3" json:"versionNumber,omitempty"`
	ProjectId                          string                               `protobuf:"bytes,32,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Project                            *ProjectLight                        `protobuf:"bytes,17,opt,name=project,proto3" json:"project,omitempty"`
	ConnectedStacks                    []*ServiceStackConnectedServiceStack `protobuf:"bytes,18,rep,name=connectedStacks,proto3" json:"connectedStacks,omitempty"`
	UserData                           []*UserDataLight                     `protobuf:"bytes,34,rep,name=userData,proto3" json:"userData,omitempty"`
	ActiveAppVersion                   *AppVersionLightNull                 `protobuf:"bytes,19,opt,name=activeAppVersion,proto3" json:"activeAppVersion,omitempty"`
	HasUnsyncedUserDataRecord          bool                                 `protobuf:"varint,20,opt,name=hasUnsyncedUserDataRecord,proto3" json:"hasUnsyncedUserDataRecord,omitempty"`
	HasUnsyncedPublicHttpRoutingRecord bool                                 `protobuf:"varint,21,opt,name=hasUnsyncedPublicHttpRoutingRecord,proto3" json:"hasUnsyncedPublicHttpRoutingRecord,omitempty"`
	HasUnsyncedPublicPortRecord        bool                                 `protobuf:"varint,22,opt,name=hasUnsyncedPublicPortRecord,proto3" json:"hasUnsyncedPublicPortRecord,omitempty"`
	HasPublicPortRoutingAccess         bool                                 `protobuf:"varint,24,opt,name=hasPublicPortRoutingAccess,proto3" json:"hasPublicPortRoutingAccess,omitempty"`
	HasPublicHttpRoutingAccess         bool                                 `protobuf:"varint,25,opt,name=hasPublicHttpRoutingAccess,proto3" json:"hasPublicHttpRoutingAccess,omitempty"`
	ActivePublicHttpRoutingCount       *Int32Null                           `protobuf:"bytes,27,opt,name=activePublicHttpRoutingCount,proto3" json:"activePublicHttpRoutingCount,omitempty"`
	ActivePublicPortRoutingCount       *Int32Null                           `protobuf:"bytes,28,opt,name=activePublicPortRoutingCount,proto3" json:"activePublicPortRoutingCount,omitempty"`
}

func (x *GetServiceStackByNameResponseDto) Reset() {
	*x = GetServiceStackByNameResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceStackByNameResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceStackByNameResponseDto) ProtoMessage() {}

func (x *GetServiceStackByNameResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceStackByNameResponseDto.ProtoReflect.Descriptor instead.
func (*GetServiceStackByNameResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{34}
}

func (x *GetServiceStackByNameResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetServiceStackByNameResponseDto) GetStatus() ServiceStackStatus {
	if x != nil {
		return x.Status
	}
	return ServiceStackStatus_SERVICE_STACK_STATUS_UNKNOWN
}

func (x *GetServiceStackByNameResponseDto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetServiceStackByNameResponseDto) GetServiceStackTypeInfo() *ServiceStackInfoJsonObject {
	if x != nil {
		return x.ServiceStackTypeInfo
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetServiceStackTypeId() string {
	if x != nil {
		return x.ServiceStackTypeId
	}
	return ""
}

func (x *GetServiceStackByNameResponseDto) GetServiceStackTypeVersionId() string {
	if x != nil {
		return x.ServiceStackTypeVersionId
	}
	return ""
}

func (x *GetServiceStackByNameResponseDto) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetStartOnProjectStart() bool {
	if x != nil {
		return x.StartOnProjectStart
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetGithubIntegration() *GithubIntegrationNull {
	if x != nil {
		return x.GithubIntegration
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetGitlabIntegration() *GitlabIntegrationNull {
	if x != nil {
		return x.GitlabIntegration
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetCustomAutoscaling() *CustomAutoscalingNull {
	if x != nil {
		return x.CustomAutoscaling
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetPorts() []*ServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetRequestedPorts() *RequestedPortsJsonObject {
	if x != nil {
		return x.RequestedPorts
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetMode() ServiceStackMode {
	if x != nil {
		return x.Mode
	}
	return ServiceStackMode_SERVICE_STACK_MODE_UNKNOWN
}

func (x *GetServiceStackByNameResponseDto) GetCustomPortsEnabled() bool {
	if x != nil {
		return x.CustomPortsEnabled
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetSubdomainAccess() bool {
	if x != nil {
		return x.SubdomainAccess
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetReloadAvailable() bool {
	if x != nil {
		return x.ReloadAvailable
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetVersionNumber() string {
	if x != nil {
		return x.VersionNumber
	}
	return ""
}

func (x *GetServiceStackByNameResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetServiceStackByNameResponseDto) GetProject() *ProjectLight {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetConnectedStacks() []*ServiceStackConnectedServiceStack {
	if x != nil {
		return x.ConnectedStacks
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetUserData() []*UserDataLight {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetActiveAppVersion() *AppVersionLightNull {
	if x != nil {
		return x.ActiveAppVersion
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetHasUnsyncedUserDataRecord() bool {
	if x != nil {
		return x.HasUnsyncedUserDataRecord
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetHasUnsyncedPublicHttpRoutingRecord() bool {
	if x != nil {
		return x.HasUnsyncedPublicHttpRoutingRecord
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetHasUnsyncedPublicPortRecord() bool {
	if x != nil {
		return x.HasUnsyncedPublicPortRecord
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetHasPublicPortRoutingAccess() bool {
	if x != nil {
		return x.HasPublicPortRoutingAccess
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetHasPublicHttpRoutingAccess() bool {
	if x != nil {
		return x.HasPublicHttpRoutingAccess
	}
	return false
}

func (x *GetServiceStackByNameResponseDto) GetActivePublicHttpRoutingCount() *Int32Null {
	if x != nil {
		return x.ActivePublicHttpRoutingCount
	}
	return nil
}

func (x *GetServiceStackByNameResponseDto) GetActivePublicPortRoutingCount() *Int32Null {
	if x != nil {
		return x.ActivePublicPortRoutingCount
	}
	return nil
}

type GetUserInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                  `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *GetUserInfoResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GetUserInfoResponse) Reset() {
	*x = GetUserInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResponse) ProtoMessage() {}

func (x *GetUserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResponse.ProtoReflect.Descriptor instead.
func (*GetUserInfoResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{35}
}

func (x *GetUserInfoResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetUserInfoResponse) GetOutput() *GetUserInfoResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type GetUserInfoResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email              string             `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	FullName           string             `protobuf:"bytes,3,opt,name=fullName,proto3" json:"fullName,omitempty"`
	FirstName          string             `protobuf:"bytes,4,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName           string             `protobuf:"bytes,5,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Avatar             *UserAvatarNull    `protobuf:"bytes,13,opt,name=avatar,proto3" json:"avatar,omitempty"`
	CountryCallingCode *Int32Null         `protobuf:"bytes,6,opt,name=countryCallingCode,proto3" json:"countryCallingCode,omitempty"`
	PhoneNumber        *Int32Null         `protobuf:"bytes,7,opt,name=phoneNumber,proto3" json:"phoneNumber,omitempty"`
	Language           *Language          `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	Created            *Timestamp         `protobuf:"bytes,9,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate         *Timestamp         `protobuf:"bytes,10,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Status             UserStatus         `protobuf:"varint,11,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.UserStatus" json:"status,omitempty"`
	ClientUserList     []*ClientUserExtra `protobuf:"bytes,12,rep,name=clientUserList,proto3" json:"clientUserList,omitempty"`
	PasswordIsSet      bool               `protobuf:"varint,14,opt,name=passwordIsSet,proto3" json:"passwordIsSet,omitempty"`
}

func (x *GetUserInfoResponseDto) Reset() {
	*x = GetUserInfoResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResponseDto) ProtoMessage() {}

func (x *GetUserInfoResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResponseDto.ProtoReflect.Descriptor instead.
func (*GetUserInfoResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{36}
}

func (x *GetUserInfoResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetUserInfoResponseDto) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetUserInfoResponseDto) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *GetUserInfoResponseDto) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *GetUserInfoResponseDto) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *GetUserInfoResponseDto) GetAvatar() *UserAvatarNull {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *GetUserInfoResponseDto) GetCountryCallingCode() *Int32Null {
	if x != nil {
		return x.CountryCallingCode
	}
	return nil
}

func (x *GetUserInfoResponseDto) GetPhoneNumber() *Int32Null {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *GetUserInfoResponseDto) GetLanguage() *Language {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *GetUserInfoResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetUserInfoResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *GetUserInfoResponseDto) GetStatus() UserStatus {
	if x != nil {
		return x.Status
	}
	return UserStatus_USER_STATUS_UNKNOWN
}

func (x *GetUserInfoResponseDto) GetClientUserList() []*ClientUserExtra {
	if x != nil {
		return x.ClientUserList
	}
	return nil
}

func (x *GetUserInfoResponseDto) GetPasswordIsSet() bool {
	if x != nil {
		return x.PasswordIsSet
	}
	return false
}

type PostAppVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PostAppVersionResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PostAppVersionResponse) Reset() {
	*x = PostAppVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAppVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAppVersionResponse) ProtoMessage() {}

func (x *PostAppVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAppVersionResponse.ProtoReflect.Descriptor instead.
func (*PostAppVersionResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{37}
}

func (x *PostAppVersionResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PostAppVersionResponse) GetOutput() *PostAppVersionResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PostAppVersionResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId       string                `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId      string                `protobuf:"bytes,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackId string                `protobuf:"bytes,4,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Build          *AppVersionBuildNull  `protobuf:"bytes,13,opt,name=build,proto3" json:"build,omitempty"`
	Sequence       int32                 `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Status         AppVersionStatus      `protobuf:"varint,6,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.AppVersionStatus" json:"status,omitempty"`
	UserDataList   []*AppVersionUserData `protobuf:"bytes,7,rep,name=userDataList,proto3" json:"userDataList,omitempty"`
	Created        *Timestamp            `protobuf:"bytes,8,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate     *Timestamp            `protobuf:"bytes,9,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	UploadUrl      string                `protobuf:"bytes,10,opt,name=uploadUrl,proto3" json:"uploadUrl,omitempty"`
}

func (x *PostAppVersionResponseDto) Reset() {
	*x = PostAppVersionResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostAppVersionResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostAppVersionResponseDto) ProtoMessage() {}

func (x *PostAppVersionResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostAppVersionResponseDto.ProtoReflect.Descriptor instead.
func (*PostAppVersionResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{38}
}

func (x *PostAppVersionResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PostAppVersionResponseDto) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PostAppVersionResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PostAppVersionResponseDto) GetServiceStackId() string {
	if x != nil {
		return x.ServiceStackId
	}
	return ""
}

func (x *PostAppVersionResponseDto) GetBuild() *AppVersionBuildNull {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *PostAppVersionResponseDto) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PostAppVersionResponseDto) GetStatus() AppVersionStatus {
	if x != nil {
		return x.Status
	}
	return AppVersionStatus_APP_VERSION_STATUS_UNKNOWN
}

func (x *PostAppVersionResponseDto) GetUserDataList() []*AppVersionUserData {
	if x != nil {
		return x.UserDataList
	}
	return nil
}

func (x *PostAppVersionResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PostAppVersionResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *PostAppVersionResponseDto) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

type PostProjectImportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PostProjectImportResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PostProjectImportResponse) Reset() {
	*x = PostProjectImportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostProjectImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostProjectImportResponse) ProtoMessage() {}

func (x *PostProjectImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostProjectImportResponse.ProtoReflect.Descriptor instead.
func (*PostProjectImportResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{39}
}

func (x *PostProjectImportResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PostProjectImportResponse) GetOutput() *PostProjectImportResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PostProjectImportResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId     string                       `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ProjectName   string                       `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ServiceStacks []*ProjectImportServiceStack `protobuf:"bytes,3,rep,name=serviceStacks,proto3" json:"serviceStacks,omitempty"`
}

func (x *PostProjectImportResponseDto) Reset() {
	*x = PostProjectImportResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostProjectImportResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostProjectImportResponseDto) ProtoMessage() {}

func (x *PostProjectImportResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostProjectImportResponseDto.ProtoReflect.Descriptor instead.
func (*PostProjectImportResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{40}
}

func (x *PostProjectImportResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PostProjectImportResponseDto) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *PostProjectImportResponseDto) GetServiceStacks() []*ProjectImportServiceStack {
	if x != nil {
		return x.ServiceStacks
	}
	return nil
}

type PostPublicHttpRoutingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                            `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PostPublicHttpRoutingResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PostPublicHttpRoutingResponse) Reset() {
	*x = PostPublicHttpRoutingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostPublicHttpRoutingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostPublicHttpRoutingResponse) ProtoMessage() {}

func (x *PostPublicHttpRoutingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostPublicHttpRoutingResponse.ProtoReflect.Descriptor instead.
func (*PostPublicHttpRoutingResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{41}
}

func (x *PostPublicHttpRoutingResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PostPublicHttpRoutingResponse) GetOutput() *PostPublicHttpRoutingResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PostPublicHttpRoutingResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId     string                       `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId    string                       `protobuf:"bytes,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	SslEnabled   bool                         `protobuf:"varint,4,opt,name=sslEnabled,proto3" json:"sslEnabled,omitempty"`
	Domains      []*PublicHttpRoutingDomain   `protobuf:"bytes,5,rep,name=domains,proto3" json:"domains,omitempty"`
	Locations    []*PublicHttpRoutingLocation `protobuf:"bytes,6,rep,name=locations,proto3" json:"locations,omitempty"`
	Created      *Timestamp                   `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate   *Timestamp                   `protobuf:"bytes,8,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	IsSynced     bool                         `protobuf:"varint,9,opt,name=isSynced,proto3" json:"isSynced,omitempty"`
	IsEditable   bool                         `protobuf:"varint,11,opt,name=isEditable,proto3" json:"isEditable,omitempty"`
	DeleteOnSync bool                         `protobuf:"varint,12,opt,name=deleteOnSync,proto3" json:"deleteOnSync,omitempty"`
}

func (x *PostPublicHttpRoutingResponseDto) Reset() {
	*x = PostPublicHttpRoutingResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostPublicHttpRoutingResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostPublicHttpRoutingResponseDto) ProtoMessage() {}

func (x *PostPublicHttpRoutingResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostPublicHttpRoutingResponseDto.ProtoReflect.Descriptor instead.
func (*PostPublicHttpRoutingResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{42}
}

func (x *PostPublicHttpRoutingResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PostPublicHttpRoutingResponseDto) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PostPublicHttpRoutingResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PostPublicHttpRoutingResponseDto) GetSslEnabled() bool {
	if x != nil {
		return x.SslEnabled
	}
	return false
}

func (x *PostPublicHttpRoutingResponseDto) GetDomains() []*PublicHttpRoutingDomain {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *PostPublicHttpRoutingResponseDto) GetLocations() []*PublicHttpRoutingLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *PostPublicHttpRoutingResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PostPublicHttpRoutingResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *PostPublicHttpRoutingResponseDto) GetIsSynced() bool {
	if x != nil {
		return x.IsSynced
	}
	return false
}

func (x *PostPublicHttpRoutingResponseDto) GetIsEditable() bool {
	if x != nil {
		return x.IsEditable
	}
	return false
}

func (x *PostPublicHttpRoutingResponseDto) GetDeleteOnSync() bool {
	if x != nil {
		return x.DeleteOnSync
	}
	return false
}

type PostServiceStackImportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                             `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PostServiceStackImportResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PostServiceStackImportResponse) Reset() {
	*x = PostServiceStackImportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostServiceStackImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostServiceStackImportResponse) ProtoMessage() {}

func (x *PostServiceStackImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostServiceStackImportResponse.ProtoReflect.Descriptor instead.
func (*PostServiceStackImportResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{43}
}

func (x *PostServiceStackImportResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PostServiceStackImportResponse) GetOutput() *PostServiceStackImportResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PostServiceStackImportResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId     string                       `protobuf:"bytes,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ProjectName   string                       `protobuf:"bytes,2,opt,name=projectName,proto3" json:"projectName,omitempty"`
	ServiceStacks []*ProjectImportServiceStack `protobuf:"bytes,3,rep,name=serviceStacks,proto3" json:"serviceStacks,omitempty"`
}

func (x *PostServiceStackImportResponseDto) Reset() {
	*x = PostServiceStackImportResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostServiceStackImportResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostServiceStackImportResponseDto) ProtoMessage() {}

func (x *PostServiceStackImportResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostServiceStackImportResponseDto.ProtoReflect.Descriptor instead.
func (*PostServiceStackImportResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{44}
}

func (x *PostServiceStackImportResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PostServiceStackImportResponseDto) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *PostServiceStackImportResponseDto) GetServiceStacks() []*ProjectImportServiceStack {
	if x != nil {
		return x.ServiceStacks
	}
	return nil
}

type PostVpnRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PostVpnRequestResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PostVpnRequestResponse) Reset() {
	*x = PostVpnRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostVpnRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostVpnRequestResponse) ProtoMessage() {}

func (x *PostVpnRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostVpnRequestResponse.ProtoReflect.Descriptor instead.
func (*PostVpnRequestResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{45}
}

func (x *PostVpnRequestResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PostVpnRequestResponse) GetOutput() *PostVpnRequestResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PostVpnRequestResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string     `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	Expiry      *Timestamp `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *PostVpnRequestResponseDto) Reset() {
	*x = PostVpnRequestResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostVpnRequestResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostVpnRequestResponseDto) ProtoMessage() {}

func (x *PostVpnRequestResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostVpnRequestResponseDto.ProtoReflect.Descriptor instead.
func (*PostVpnRequestResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{46}
}

func (x *PostVpnRequestResponseDto) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *PostVpnRequestResponseDto) GetExpiry() *Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

type PutAppVersionBuildAndDeployResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                                  `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PutAppVersionBuildAndDeployResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PutAppVersionBuildAndDeployResponse) Reset() {
	*x = PutAppVersionBuildAndDeployResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutAppVersionBuildAndDeployResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutAppVersionBuildAndDeployResponse) ProtoMessage() {}

func (x *PutAppVersionBuildAndDeployResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutAppVersionBuildAndDeployResponse.ProtoReflect.Descriptor instead.
func (*PutAppVersionBuildAndDeployResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{47}
}

func (x *PutAppVersionBuildAndDeployResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PutAppVersionBuildAndDeployResponse) GetOutput() *PutAppVersionBuildAndDeployResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PutAppVersionBuildAndDeployResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId        string                         `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId       string                         `protobuf:"bytes,14,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackId  *StringNull                    `protobuf:"bytes,15,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Project         *ProjectLightJsonObject        `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	ServiceStacks   []*ServiceStackLightJsonObject `protobuf:"bytes,4,rep,name=serviceStacks,proto3" json:"serviceStacks,omitempty"`
	Status          ProcessStatus                  `protobuf:"varint,5,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ProcessStatus" json:"status,omitempty"`
	Sequence        int32                          `protobuf:"varint,16,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CreatedByUser   *UserJsonObject                `protobuf:"bytes,6,opt,name=createdByUser,proto3" json:"createdByUser,omitempty"`
	CanceledByUser  *UserJsonObjectNull            `protobuf:"bytes,7,opt,name=canceledByUser,proto3" json:"canceledByUser,omitempty"`
	ActionName      string                         `protobuf:"bytes,8,opt,name=actionName,proto3" json:"actionName,omitempty"`
	Created         *Timestamp                     `protobuf:"bytes,10,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate      *Timestamp                     `protobuf:"bytes,11,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Started         *TimestampNull                 `protobuf:"bytes,17,opt,name=started,proto3" json:"started,omitempty"`
	Finished        *TimestampNull                 `protobuf:"bytes,18,opt,name=finished,proto3" json:"finished,omitempty"`
	CreatedBySystem bool                           `protobuf:"varint,12,opt,name=createdBySystem,proto3" json:"createdBySystem,omitempty"`
	AppVersion      *AppVersionJsonObjectNull      `protobuf:"bytes,13,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
}

func (x *PutAppVersionBuildAndDeployResponseDto) Reset() {
	*x = PutAppVersionBuildAndDeployResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutAppVersionBuildAndDeployResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutAppVersionBuildAndDeployResponseDto) ProtoMessage() {}

func (x *PutAppVersionBuildAndDeployResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutAppVersionBuildAndDeployResponseDto.ProtoReflect.Descriptor instead.
func (*PutAppVersionBuildAndDeployResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{48}
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetServiceStackId() *StringNull {
	if x != nil {
		return x.ServiceStackId
	}
	return nil
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetProject() *ProjectLightJsonObject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetServiceStacks() []*ServiceStackLightJsonObject {
	if x != nil {
		return x.ServiceStacks
	}
	return nil
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_PROCESS_STATUS_UNKNOWN
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetCreatedByUser() *UserJsonObject {
	if x != nil {
		return x.CreatedByUser
	}
	return nil
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetCanceledByUser() *UserJsonObjectNull {
	if x != nil {
		return x.CanceledByUser
	}
	return nil
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetStarted() *TimestampNull {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetFinished() *TimestampNull {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetCreatedBySystem() bool {
	if x != nil {
		return x.CreatedBySystem
	}
	return false
}

func (x *PutAppVersionBuildAndDeployResponseDto) GetAppVersion() *AppVersionJsonObjectNull {
	if x != nil {
		return x.AppVersion
	}
	return nil
}

type PutAppVersionDeployResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                          `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PutAppVersionDeployResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PutAppVersionDeployResponse) Reset() {
	*x = PutAppVersionDeployResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutAppVersionDeployResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutAppVersionDeployResponse) ProtoMessage() {}

func (x *PutAppVersionDeployResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutAppVersionDeployResponse.ProtoReflect.Descriptor instead.
func (*PutAppVersionDeployResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{49}
}

func (x *PutAppVersionDeployResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PutAppVersionDeployResponse) GetOutput() *PutAppVersionDeployResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PutAppVersionDeployResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId        string                         `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId       string                         `protobuf:"bytes,14,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackId  *StringNull                    `protobuf:"bytes,15,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Project         *ProjectLightJsonObject        `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	ServiceStacks   []*ServiceStackLightJsonObject `protobuf:"bytes,4,rep,name=serviceStacks,proto3" json:"serviceStacks,omitempty"`
	Status          ProcessStatus                  `protobuf:"varint,5,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ProcessStatus" json:"status,omitempty"`
	Sequence        int32                          `protobuf:"varint,16,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CreatedByUser   *UserJsonObject                `protobuf:"bytes,6,opt,name=createdByUser,proto3" json:"createdByUser,omitempty"`
	CanceledByUser  *UserJsonObjectNull            `protobuf:"bytes,7,opt,name=canceledByUser,proto3" json:"canceledByUser,omitempty"`
	ActionName      string                         `protobuf:"bytes,8,opt,name=actionName,proto3" json:"actionName,omitempty"`
	Created         *Timestamp                     `protobuf:"bytes,10,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate      *Timestamp                     `protobuf:"bytes,11,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Started         *TimestampNull                 `protobuf:"bytes,17,opt,name=started,proto3" json:"started,omitempty"`
	Finished        *TimestampNull                 `protobuf:"bytes,18,opt,name=finished,proto3" json:"finished,omitempty"`
	CreatedBySystem bool                           `protobuf:"varint,12,opt,name=createdBySystem,proto3" json:"createdBySystem,omitempty"`
	AppVersion      *AppVersionJsonObjectNull      `protobuf:"bytes,13,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
}

func (x *PutAppVersionDeployResponseDto) Reset() {
	*x = PutAppVersionDeployResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutAppVersionDeployResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutAppVersionDeployResponseDto) ProtoMessage() {}

func (x *PutAppVersionDeployResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutAppVersionDeployResponseDto.ProtoReflect.Descriptor instead.
func (*PutAppVersionDeployResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{50}
}

func (x *PutAppVersionDeployResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutAppVersionDeployResponseDto) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PutAppVersionDeployResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PutAppVersionDeployResponseDto) GetServiceStackId() *StringNull {
	if x != nil {
		return x.ServiceStackId
	}
	return nil
}

func (x *PutAppVersionDeployResponseDto) GetProject() *ProjectLightJsonObject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *PutAppVersionDeployResponseDto) GetServiceStacks() []*ServiceStackLightJsonObject {
	if x != nil {
		return x.ServiceStacks
	}
	return nil
}

func (x *PutAppVersionDeployResponseDto) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_PROCESS_STATUS_UNKNOWN
}

func (x *PutAppVersionDeployResponseDto) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PutAppVersionDeployResponseDto) GetCreatedByUser() *UserJsonObject {
	if x != nil {
		return x.CreatedByUser
	}
	return nil
}

func (x *PutAppVersionDeployResponseDto) GetCanceledByUser() *UserJsonObjectNull {
	if x != nil {
		return x.CanceledByUser
	}
	return nil
}

func (x *PutAppVersionDeployResponseDto) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *PutAppVersionDeployResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PutAppVersionDeployResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *PutAppVersionDeployResponseDto) GetStarted() *TimestampNull {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *PutAppVersionDeployResponseDto) GetFinished() *TimestampNull {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *PutAppVersionDeployResponseDto) GetCreatedBySystem() bool {
	if x != nil {
		return x.CreatedBySystem
	}
	return false
}

func (x *PutAppVersionDeployResponseDto) GetAppVersion() *AppVersionJsonObjectNull {
	if x != nil {
		return x.AppVersion
	}
	return nil
}

type PutProjectStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                      `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PutProjectStartResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PutProjectStartResponse) Reset() {
	*x = PutProjectStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutProjectStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutProjectStartResponse) ProtoMessage() {}

func (x *PutProjectStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutProjectStartResponse.ProtoReflect.Descriptor instead.
func (*PutProjectStartResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{51}
}

func (x *PutProjectStartResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PutProjectStartResponse) GetOutput() *PutProjectStartResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PutProjectStartResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId        string                         `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId       string                         `protobuf:"bytes,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackId  *StringNull                    `protobuf:"bytes,4,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Project         *ProjectLightJsonObject        `protobuf:"bytes,5,opt,name=project,proto3" json:"project,omitempty"`
	ServiceStacks   []*ServiceStackLightJsonObject `protobuf:"bytes,6,rep,name=serviceStacks,proto3" json:"serviceStacks,omitempty"`
	Status          ProcessStatus                  `protobuf:"varint,7,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ProcessStatus" json:"status,omitempty"`
	Sequence        int32                          `protobuf:"varint,8,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CreatedByUser   *UserJsonObject                `protobuf:"bytes,9,opt,name=createdByUser,proto3" json:"createdByUser,omitempty"`
	CanceledByUser  *UserJsonObjectNull            `protobuf:"bytes,10,opt,name=canceledByUser,proto3" json:"canceledByUser,omitempty"`
	ActionName      string                         `protobuf:"bytes,11,opt,name=actionName,proto3" json:"actionName,omitempty"`
	Created         *Timestamp                     `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate      *Timestamp                     `protobuf:"bytes,13,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Started         *TimestampNull                 `protobuf:"bytes,14,opt,name=started,proto3" json:"started,omitempty"`
	Finished        *TimestampNull                 `protobuf:"bytes,15,opt,name=finished,proto3" json:"finished,omitempty"`
	CreatedBySystem bool                           `protobuf:"varint,16,opt,name=createdBySystem,proto3" json:"createdBySystem,omitempty"`
	AppVersion      *AppVersionJsonObjectNull      `protobuf:"bytes,17,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
}

func (x *PutProjectStartResponseDto) Reset() {
	*x = PutProjectStartResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutProjectStartResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutProjectStartResponseDto) ProtoMessage() {}

func (x *PutProjectStartResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutProjectStartResponseDto.ProtoReflect.Descriptor instead.
func (*PutProjectStartResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{52}
}

func (x *PutProjectStartResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutProjectStartResponseDto) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PutProjectStartResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PutProjectStartResponseDto) GetServiceStackId() *StringNull {
	if x != nil {
		return x.ServiceStackId
	}
	return nil
}

func (x *PutProjectStartResponseDto) GetProject() *ProjectLightJsonObject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *PutProjectStartResponseDto) GetServiceStacks() []*ServiceStackLightJsonObject {
	if x != nil {
		return x.ServiceStacks
	}
	return nil
}

func (x *PutProjectStartResponseDto) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_PROCESS_STATUS_UNKNOWN
}

func (x *PutProjectStartResponseDto) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PutProjectStartResponseDto) GetCreatedByUser() *UserJsonObject {
	if x != nil {
		return x.CreatedByUser
	}
	return nil
}

func (x *PutProjectStartResponseDto) GetCanceledByUser() *UserJsonObjectNull {
	if x != nil {
		return x.CanceledByUser
	}
	return nil
}

func (x *PutProjectStartResponseDto) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *PutProjectStartResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PutProjectStartResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *PutProjectStartResponseDto) GetStarted() *TimestampNull {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *PutProjectStartResponseDto) GetFinished() *TimestampNull {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *PutProjectStartResponseDto) GetCreatedBySystem() bool {
	if x != nil {
		return x.CreatedBySystem
	}
	return false
}

func (x *PutProjectStartResponseDto) GetAppVersion() *AppVersionJsonObjectNull {
	if x != nil {
		return x.AppVersion
	}
	return nil
}

type PutProjectStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                     `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PutProjectStopResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PutProjectStopResponse) Reset() {
	*x = PutProjectStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutProjectStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutProjectStopResponse) ProtoMessage() {}

func (x *PutProjectStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutProjectStopResponse.ProtoReflect.Descriptor instead.
func (*PutProjectStopResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{53}
}

func (x *PutProjectStopResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PutProjectStopResponse) GetOutput() *PutProjectStopResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PutProjectStopResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId        string                         `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId       string                         `protobuf:"bytes,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackId  *StringNull                    `protobuf:"bytes,4,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Project         *ProjectLightJsonObject        `protobuf:"bytes,5,opt,name=project,proto3" json:"project,omitempty"`
	ServiceStacks   []*ServiceStackLightJsonObject `protobuf:"bytes,6,rep,name=serviceStacks,proto3" json:"serviceStacks,omitempty"`
	Status          ProcessStatus                  `protobuf:"varint,7,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ProcessStatus" json:"status,omitempty"`
	Sequence        int32                          `protobuf:"varint,8,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CreatedByUser   *UserJsonObject                `protobuf:"bytes,9,opt,name=createdByUser,proto3" json:"createdByUser,omitempty"`
	CanceledByUser  *UserJsonObjectNull            `protobuf:"bytes,10,opt,name=canceledByUser,proto3" json:"canceledByUser,omitempty"`
	ActionName      string                         `protobuf:"bytes,11,opt,name=actionName,proto3" json:"actionName,omitempty"`
	Created         *Timestamp                     `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate      *Timestamp                     `protobuf:"bytes,13,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Started         *TimestampNull                 `protobuf:"bytes,14,opt,name=started,proto3" json:"started,omitempty"`
	Finished        *TimestampNull                 `protobuf:"bytes,15,opt,name=finished,proto3" json:"finished,omitempty"`
	CreatedBySystem bool                           `protobuf:"varint,16,opt,name=createdBySystem,proto3" json:"createdBySystem,omitempty"`
	AppVersion      *AppVersionJsonObjectNull      `protobuf:"bytes,17,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
}

func (x *PutProjectStopResponseDto) Reset() {
	*x = PutProjectStopResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutProjectStopResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutProjectStopResponseDto) ProtoMessage() {}

func (x *PutProjectStopResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutProjectStopResponseDto.ProtoReflect.Descriptor instead.
func (*PutProjectStopResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{54}
}

func (x *PutProjectStopResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutProjectStopResponseDto) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PutProjectStopResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PutProjectStopResponseDto) GetServiceStackId() *StringNull {
	if x != nil {
		return x.ServiceStackId
	}
	return nil
}

func (x *PutProjectStopResponseDto) GetProject() *ProjectLightJsonObject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *PutProjectStopResponseDto) GetServiceStacks() []*ServiceStackLightJsonObject {
	if x != nil {
		return x.ServiceStacks
	}
	return nil
}

func (x *PutProjectStopResponseDto) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_PROCESS_STATUS_UNKNOWN
}

func (x *PutProjectStopResponseDto) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PutProjectStopResponseDto) GetCreatedByUser() *UserJsonObject {
	if x != nil {
		return x.CreatedByUser
	}
	return nil
}

func (x *PutProjectStopResponseDto) GetCanceledByUser() *UserJsonObjectNull {
	if x != nil {
		return x.CanceledByUser
	}
	return nil
}

func (x *PutProjectStopResponseDto) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *PutProjectStopResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PutProjectStopResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *PutProjectStopResponseDto) GetStarted() *TimestampNull {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *PutProjectStopResponseDto) GetFinished() *TimestampNull {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *PutProjectStopResponseDto) GetCreatedBySystem() bool {
	if x != nil {
		return x.CreatedBySystem
	}
	return false
}

func (x *PutProjectStopResponseDto) GetAppVersion() *AppVersionJsonObjectNull {
	if x != nil {
		return x.AppVersion
	}
	return nil
}

type PutServiceStackRestartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                             `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PutServiceStackRestartResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PutServiceStackRestartResponse) Reset() {
	*x = PutServiceStackRestartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutServiceStackRestartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutServiceStackRestartResponse) ProtoMessage() {}

func (x *PutServiceStackRestartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutServiceStackRestartResponse.ProtoReflect.Descriptor instead.
func (*PutServiceStackRestartResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{55}
}

func (x *PutServiceStackRestartResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PutServiceStackRestartResponse) GetOutput() *PutServiceStackRestartResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PutServiceStackRestartResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId        string                         `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId       string                         `protobuf:"bytes,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackId  *StringNull                    `protobuf:"bytes,4,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Project         *ProjectLightJsonObject        `protobuf:"bytes,5,opt,name=project,proto3" json:"project,omitempty"`
	ServiceStacks   []*ServiceStackLightJsonObject `protobuf:"bytes,6,rep,name=serviceStacks,proto3" json:"serviceStacks,omitempty"`
	Status          ProcessStatus                  `protobuf:"varint,7,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ProcessStatus" json:"status,omitempty"`
	Sequence        int32                          `protobuf:"varint,8,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CreatedByUser   *UserJsonObject                `protobuf:"bytes,9,opt,name=createdByUser,proto3" json:"createdByUser,omitempty"`
	CanceledByUser  *UserJsonObjectNull            `protobuf:"bytes,10,opt,name=canceledByUser,proto3" json:"canceledByUser,omitempty"`
	ActionName      string                         `protobuf:"bytes,11,opt,name=actionName,proto3" json:"actionName,omitempty"`
	Created         *Timestamp                     `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate      *Timestamp                     `protobuf:"bytes,13,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Started         *TimestampNull                 `protobuf:"bytes,14,opt,name=started,proto3" json:"started,omitempty"`
	Finished        *TimestampNull                 `protobuf:"bytes,15,opt,name=finished,proto3" json:"finished,omitempty"`
	CreatedBySystem bool                           `protobuf:"varint,16,opt,name=createdBySystem,proto3" json:"createdBySystem,omitempty"`
	AppVersion      *AppVersionJsonObjectNull      `protobuf:"bytes,17,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
}

func (x *PutServiceStackRestartResponseDto) Reset() {
	*x = PutServiceStackRestartResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutServiceStackRestartResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutServiceStackRestartResponseDto) ProtoMessage() {}

func (x *PutServiceStackRestartResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutServiceStackRestartResponseDto.ProtoReflect.Descriptor instead.
func (*PutServiceStackRestartResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{56}
}

func (x *PutServiceStackRestartResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutServiceStackRestartResponseDto) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PutServiceStackRestartResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PutServiceStackRestartResponseDto) GetServiceStackId() *StringNull {
	if x != nil {
		return x.ServiceStackId
	}
	return nil
}

func (x *PutServiceStackRestartResponseDto) GetProject() *ProjectLightJsonObject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *PutServiceStackRestartResponseDto) GetServiceStacks() []*ServiceStackLightJsonObject {
	if x != nil {
		return x.ServiceStacks
	}
	return nil
}

func (x *PutServiceStackRestartResponseDto) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_PROCESS_STATUS_UNKNOWN
}

func (x *PutServiceStackRestartResponseDto) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PutServiceStackRestartResponseDto) GetCreatedByUser() *UserJsonObject {
	if x != nil {
		return x.CreatedByUser
	}
	return nil
}

func (x *PutServiceStackRestartResponseDto) GetCanceledByUser() *UserJsonObjectNull {
	if x != nil {
		return x.CanceledByUser
	}
	return nil
}

func (x *PutServiceStackRestartResponseDto) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *PutServiceStackRestartResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PutServiceStackRestartResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *PutServiceStackRestartResponseDto) GetStarted() *TimestampNull {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *PutServiceStackRestartResponseDto) GetFinished() *TimestampNull {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *PutServiceStackRestartResponseDto) GetCreatedBySystem() bool {
	if x != nil {
		return x.CreatedBySystem
	}
	return false
}

func (x *PutServiceStackRestartResponseDto) GetAppVersion() *AppVersionJsonObjectNull {
	if x != nil {
		return x.AppVersion
	}
	return nil
}

type PutServiceStackStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                           `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PutServiceStackStartResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PutServiceStackStartResponse) Reset() {
	*x = PutServiceStackStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutServiceStackStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutServiceStackStartResponse) ProtoMessage() {}

func (x *PutServiceStackStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutServiceStackStartResponse.ProtoReflect.Descriptor instead.
func (*PutServiceStackStartResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{57}
}

func (x *PutServiceStackStartResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PutServiceStackStartResponse) GetOutput() *PutServiceStackStartResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PutServiceStackStartResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId        string                         `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId       string                         `protobuf:"bytes,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackId  *StringNull                    `protobuf:"bytes,4,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Project         *ProjectLightJsonObject        `protobuf:"bytes,5,opt,name=project,proto3" json:"project,omitempty"`
	ServiceStacks   []*ServiceStackLightJsonObject `protobuf:"bytes,6,rep,name=serviceStacks,proto3" json:"serviceStacks,omitempty"`
	Status          ProcessStatus                  `protobuf:"varint,7,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ProcessStatus" json:"status,omitempty"`
	Sequence        int32                          `protobuf:"varint,8,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CreatedByUser   *UserJsonObject                `protobuf:"bytes,9,opt,name=createdByUser,proto3" json:"createdByUser,omitempty"`
	CanceledByUser  *UserJsonObjectNull            `protobuf:"bytes,10,opt,name=canceledByUser,proto3" json:"canceledByUser,omitempty"`
	ActionName      string                         `protobuf:"bytes,11,opt,name=actionName,proto3" json:"actionName,omitempty"`
	Created         *Timestamp                     `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate      *Timestamp                     `protobuf:"bytes,13,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Started         *TimestampNull                 `protobuf:"bytes,14,opt,name=started,proto3" json:"started,omitempty"`
	Finished        *TimestampNull                 `protobuf:"bytes,15,opt,name=finished,proto3" json:"finished,omitempty"`
	CreatedBySystem bool                           `protobuf:"varint,16,opt,name=createdBySystem,proto3" json:"createdBySystem,omitempty"`
	AppVersion      *AppVersionJsonObjectNull      `protobuf:"bytes,17,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
}

func (x *PutServiceStackStartResponseDto) Reset() {
	*x = PutServiceStackStartResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutServiceStackStartResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutServiceStackStartResponseDto) ProtoMessage() {}

func (x *PutServiceStackStartResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutServiceStackStartResponseDto.ProtoReflect.Descriptor instead.
func (*PutServiceStackStartResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{58}
}

func (x *PutServiceStackStartResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutServiceStackStartResponseDto) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PutServiceStackStartResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PutServiceStackStartResponseDto) GetServiceStackId() *StringNull {
	if x != nil {
		return x.ServiceStackId
	}
	return nil
}

func (x *PutServiceStackStartResponseDto) GetProject() *ProjectLightJsonObject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *PutServiceStackStartResponseDto) GetServiceStacks() []*ServiceStackLightJsonObject {
	if x != nil {
		return x.ServiceStacks
	}
	return nil
}

func (x *PutServiceStackStartResponseDto) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_PROCESS_STATUS_UNKNOWN
}

func (x *PutServiceStackStartResponseDto) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PutServiceStackStartResponseDto) GetCreatedByUser() *UserJsonObject {
	if x != nil {
		return x.CreatedByUser
	}
	return nil
}

func (x *PutServiceStackStartResponseDto) GetCanceledByUser() *UserJsonObjectNull {
	if x != nil {
		return x.CanceledByUser
	}
	return nil
}

func (x *PutServiceStackStartResponseDto) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *PutServiceStackStartResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PutServiceStackStartResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *PutServiceStackStartResponseDto) GetStarted() *TimestampNull {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *PutServiceStackStartResponseDto) GetFinished() *TimestampNull {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *PutServiceStackStartResponseDto) GetCreatedBySystem() bool {
	if x != nil {
		return x.CreatedBySystem
	}
	return false
}

func (x *PutServiceStackStartResponseDto) GetAppVersion() *AppVersionJsonObjectNull {
	if x != nil {
		return x.AppVersion
	}
	return nil
}

type PutServiceStackStopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error  *Error                          `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Output *PutServiceStackStopResponseDto `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PutServiceStackStopResponse) Reset() {
	*x = PutServiceStackStopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutServiceStackStopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutServiceStackStopResponse) ProtoMessage() {}

func (x *PutServiceStackStopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutServiceStackStopResponse.ProtoReflect.Descriptor instead.
func (*PutServiceStackStopResponse) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{59}
}

func (x *PutServiceStackStopResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PutServiceStackStopResponse) GetOutput() *PutServiceStackStopResponseDto {
	if x != nil {
		return x.Output
	}
	return nil
}

type PutServiceStackStopResponseDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId        string                         `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId       string                         `protobuf:"bytes,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackId  *StringNull                    `protobuf:"bytes,4,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Project         *ProjectLightJsonObject        `protobuf:"bytes,5,opt,name=project,proto3" json:"project,omitempty"`
	ServiceStacks   []*ServiceStackLightJsonObject `protobuf:"bytes,6,rep,name=serviceStacks,proto3" json:"serviceStacks,omitempty"`
	Status          ProcessStatus                  `protobuf:"varint,7,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ProcessStatus" json:"status,omitempty"`
	Sequence        int32                          `protobuf:"varint,8,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CreatedByUser   *UserJsonObject                `protobuf:"bytes,9,opt,name=createdByUser,proto3" json:"createdByUser,omitempty"`
	CanceledByUser  *UserJsonObjectNull            `protobuf:"bytes,10,opt,name=canceledByUser,proto3" json:"canceledByUser,omitempty"`
	ActionName      string                         `protobuf:"bytes,11,opt,name=actionName,proto3" json:"actionName,omitempty"`
	Created         *Timestamp                     `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate      *Timestamp                     `protobuf:"bytes,13,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Started         *TimestampNull                 `protobuf:"bytes,14,opt,name=started,proto3" json:"started,omitempty"`
	Finished        *TimestampNull                 `protobuf:"bytes,15,opt,name=finished,proto3" json:"finished,omitempty"`
	CreatedBySystem bool                           `protobuf:"varint,16,opt,name=createdBySystem,proto3" json:"createdBySystem,omitempty"`
	AppVersion      *AppVersionJsonObjectNull      `protobuf:"bytes,17,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
}

func (x *PutServiceStackStopResponseDto) Reset() {
	*x = PutServiceStackStopResponseDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutServiceStackStopResponseDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutServiceStackStopResponseDto) ProtoMessage() {}

func (x *PutServiceStackStopResponseDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutServiceStackStopResponseDto.ProtoReflect.Descriptor instead.
func (*PutServiceStackStopResponseDto) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{60}
}

func (x *PutServiceStackStopResponseDto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PutServiceStackStopResponseDto) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PutServiceStackStopResponseDto) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PutServiceStackStopResponseDto) GetServiceStackId() *StringNull {
	if x != nil {
		return x.ServiceStackId
	}
	return nil
}

func (x *PutServiceStackStopResponseDto) GetProject() *ProjectLightJsonObject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *PutServiceStackStopResponseDto) GetServiceStacks() []*ServiceStackLightJsonObject {
	if x != nil {
		return x.ServiceStacks
	}
	return nil
}

func (x *PutServiceStackStopResponseDto) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_PROCESS_STATUS_UNKNOWN
}

func (x *PutServiceStackStopResponseDto) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PutServiceStackStopResponseDto) GetCreatedByUser() *UserJsonObject {
	if x != nil {
		return x.CreatedByUser
	}
	return nil
}

func (x *PutServiceStackStopResponseDto) GetCanceledByUser() *UserJsonObjectNull {
	if x != nil {
		return x.CanceledByUser
	}
	return nil
}

func (x *PutServiceStackStopResponseDto) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *PutServiceStackStopResponseDto) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *PutServiceStackStopResponseDto) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *PutServiceStackStopResponseDto) GetStarted() *TimestampNull {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *PutServiceStackStopResponseDto) GetFinished() *TimestampNull {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *PutServiceStackStopResponseDto) GetCreatedBySystem() bool {
	if x != nil {
		return x.CreatedBySystem
	}
	return false
}

func (x *PutServiceStackStopResponseDto) GetAppVersion() *AppVersionJsonObjectNull {
	if x != nil {
		return x.AppVersion
	}
	return nil
}

type AppVersionBuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceStackId            *StringNull    `protobuf:"bytes,1,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	ServiceStackName          *StringNull    `protobuf:"bytes,2,opt,name=serviceStackName,proto3" json:"serviceStackName,omitempty"`
	ServiceStackTypeVersionId *StringNull    `protobuf:"bytes,3,opt,name=serviceStackTypeVersionId,proto3" json:"serviceStackTypeVersionId,omitempty"`
	PipelineStart             *TimestampNull `protobuf:"bytes,10,opt,name=pipelineStart,proto3" json:"pipelineStart,omitempty"`
	PipelineFinish            *TimestampNull `protobuf:"bytes,11,opt,name=pipelineFinish,proto3" json:"pipelineFinish,omitempty"`
	PipelineFailed            *TimestampNull `protobuf:"bytes,12,opt,name=pipelineFailed,proto3" json:"pipelineFailed,omitempty"`
	ContainerCreationStart    *TimestampNull `protobuf:"bytes,9,opt,name=containerCreationStart,proto3" json:"containerCreationStart,omitempty"`
	StartDate                 *TimestampNull `protobuf:"bytes,4,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate                   *TimestampNull `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate,omitempty"`
	CacheUsed                 bool           `protobuf:"varint,6,opt,name=cacheUsed,proto3" json:"cacheUsed,omitempty"`
	HasCurrentCache           bool           `protobuf:"varint,7,opt,name=hasCurrentCache,proto3" json:"hasCurrentCache,omitempty"`
}

func (x *AppVersionBuild) Reset() {
	*x = AppVersionBuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionBuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionBuild) ProtoMessage() {}

func (x *AppVersionBuild) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionBuild.ProtoReflect.Descriptor instead.
func (*AppVersionBuild) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{61}
}

func (x *AppVersionBuild) GetServiceStackId() *StringNull {
	if x != nil {
		return x.ServiceStackId
	}
	return nil
}

func (x *AppVersionBuild) GetServiceStackName() *StringNull {
	if x != nil {
		return x.ServiceStackName
	}
	return nil
}

func (x *AppVersionBuild) GetServiceStackTypeVersionId() *StringNull {
	if x != nil {
		return x.ServiceStackTypeVersionId
	}
	return nil
}

func (x *AppVersionBuild) GetPipelineStart() *TimestampNull {
	if x != nil {
		return x.PipelineStart
	}
	return nil
}

func (x *AppVersionBuild) GetPipelineFinish() *TimestampNull {
	if x != nil {
		return x.PipelineFinish
	}
	return nil
}

func (x *AppVersionBuild) GetPipelineFailed() *TimestampNull {
	if x != nil {
		return x.PipelineFailed
	}
	return nil
}

func (x *AppVersionBuild) GetContainerCreationStart() *TimestampNull {
	if x != nil {
		return x.ContainerCreationStart
	}
	return nil
}

func (x *AppVersionBuild) GetStartDate() *TimestampNull {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *AppVersionBuild) GetEndDate() *TimestampNull {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *AppVersionBuild) GetCacheUsed() bool {
	if x != nil {
		return x.CacheUsed
	}
	return false
}

func (x *AppVersionBuild) GetHasCurrentCache() bool {
	if x != nil {
		return x.HasCurrentCache
	}
	return false
}

type AppVersionGithubIntegration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType          AppVersionGithubIntegrationEventType `protobuf:"varint,1,opt,name=eventType,proto3,enum=zBusinessZeropsApiProtocol.AppVersionGithubIntegrationEventType" json:"eventType,omitempty"`
	BranchName         *StringNull                          `protobuf:"bytes,2,opt,name=branchName,proto3" json:"branchName,omitempty"`
	Pusher             string                               `protobuf:"bytes,3,opt,name=pusher,proto3" json:"pusher,omitempty"`
	Commit             string                               `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	RepositoryFullName string                               `protobuf:"bytes,5,opt,name=repositoryFullName,proto3" json:"repositoryFullName,omitempty"`
	TagName            *StringNull                          `protobuf:"bytes,6,opt,name=tagName,proto3" json:"tagName,omitempty"`
}

func (x *AppVersionGithubIntegration) Reset() {
	*x = AppVersionGithubIntegration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionGithubIntegration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionGithubIntegration) ProtoMessage() {}

func (x *AppVersionGithubIntegration) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionGithubIntegration.ProtoReflect.Descriptor instead.
func (*AppVersionGithubIntegration) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{62}
}

func (x *AppVersionGithubIntegration) GetEventType() AppVersionGithubIntegrationEventType {
	if x != nil {
		return x.EventType
	}
	return AppVersionGithubIntegrationEventType_APP_VERSION_GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN
}

func (x *AppVersionGithubIntegration) GetBranchName() *StringNull {
	if x != nil {
		return x.BranchName
	}
	return nil
}

func (x *AppVersionGithubIntegration) GetPusher() string {
	if x != nil {
		return x.Pusher
	}
	return ""
}

func (x *AppVersionGithubIntegration) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *AppVersionGithubIntegration) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *AppVersionGithubIntegration) GetTagName() *StringNull {
	if x != nil {
		return x.TagName
	}
	return nil
}

type AppVersionGitlabIntegration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType          AppVersionGitlabIntegrationEventType `protobuf:"varint,1,opt,name=eventType,proto3,enum=zBusinessZeropsApiProtocol.AppVersionGitlabIntegrationEventType" json:"eventType,omitempty"`
	BranchName         *StringNull                          `protobuf:"bytes,2,opt,name=branchName,proto3" json:"branchName,omitempty"`
	Pusher             string                               `protobuf:"bytes,3,opt,name=pusher,proto3" json:"pusher,omitempty"`
	Commit             string                               `protobuf:"bytes,4,opt,name=commit,proto3" json:"commit,omitempty"`
	RepositoryFullName string                               `protobuf:"bytes,5,opt,name=repositoryFullName,proto3" json:"repositoryFullName,omitempty"`
	TagName            *StringNull                          `protobuf:"bytes,6,opt,name=tagName,proto3" json:"tagName,omitempty"`
}

func (x *AppVersionGitlabIntegration) Reset() {
	*x = AppVersionGitlabIntegration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionGitlabIntegration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionGitlabIntegration) ProtoMessage() {}

func (x *AppVersionGitlabIntegration) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionGitlabIntegration.ProtoReflect.Descriptor instead.
func (*AppVersionGitlabIntegration) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{63}
}

func (x *AppVersionGitlabIntegration) GetEventType() AppVersionGitlabIntegrationEventType {
	if x != nil {
		return x.EventType
	}
	return AppVersionGitlabIntegrationEventType_APP_VERSION_GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN
}

func (x *AppVersionGitlabIntegration) GetBranchName() *StringNull {
	if x != nil {
		return x.BranchName
	}
	return nil
}

func (x *AppVersionGitlabIntegration) GetPusher() string {
	if x != nil {
		return x.Pusher
	}
	return ""
}

func (x *AppVersionGitlabIntegration) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *AppVersionGitlabIntegration) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *AppVersionGitlabIntegration) GetTagName() *StringNull {
	if x != nil {
		return x.TagName
	}
	return nil
}

type AppVersionJsonObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ServiceStackId       *StringNull                      `protobuf:"bytes,15,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	ProjectId            *StringNull                      `protobuf:"bytes,16,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Status               AppVersionStatus                 `protobuf:"varint,9,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.AppVersionStatus" json:"status,omitempty"`
	Source               AppVersionSource                 `protobuf:"varint,2,opt,name=source,proto3,enum=zBusinessZeropsApiProtocol.AppVersionSource" json:"source,omitempty"`
	Sequence             int32                            `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Name                 *StringNull                      `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Created              *TimestampNull                   `protobuf:"bytes,11,opt,name=created,proto3" json:"created,omitempty"`
	Build                *AppVersionBuildNull             `protobuf:"bytes,4,opt,name=build,proto3" json:"build,omitempty"`
	PrepareCustomRuntime *PrepareCustomRuntimeNull        `protobuf:"bytes,13,opt,name=prepareCustomRuntime,proto3" json:"prepareCustomRuntime,omitempty"`
	GithubIntegration    *AppVersionGithubIntegrationNull `protobuf:"bytes,5,opt,name=githubIntegration,proto3" json:"githubIntegration,omitempty"`
	GitlabIntegration    *AppVersionGitlabIntegrationNull `protobuf:"bytes,6,opt,name=gitlabIntegration,proto3" json:"gitlabIntegration,omitempty"`
	CreatedByUser        *UserJsonObjectNull              `protobuf:"bytes,7,opt,name=createdByUser,proto3" json:"createdByUser,omitempty"`
	ActivationDate       *TimestampNull                   `protobuf:"bytes,8,opt,name=activationDate,proto3" json:"activationDate,omitempty"`
	PublicGitSource      *AppVersionPublicGitSourceNull   `protobuf:"bytes,12,opt,name=publicGitSource,proto3" json:"publicGitSource,omitempty"`
	ConfigContent        *StringNull                      `protobuf:"bytes,14,opt,name=configContent,proto3" json:"configContent,omitempty"`
}

func (x *AppVersionJsonObject) Reset() {
	*x = AppVersionJsonObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionJsonObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionJsonObject) ProtoMessage() {}

func (x *AppVersionJsonObject) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionJsonObject.ProtoReflect.Descriptor instead.
func (*AppVersionJsonObject) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{64}
}

func (x *AppVersionJsonObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppVersionJsonObject) GetServiceStackId() *StringNull {
	if x != nil {
		return x.ServiceStackId
	}
	return nil
}

func (x *AppVersionJsonObject) GetProjectId() *StringNull {
	if x != nil {
		return x.ProjectId
	}
	return nil
}

func (x *AppVersionJsonObject) GetStatus() AppVersionStatus {
	if x != nil {
		return x.Status
	}
	return AppVersionStatus_APP_VERSION_STATUS_UNKNOWN
}

func (x *AppVersionJsonObject) GetSource() AppVersionSource {
	if x != nil {
		return x.Source
	}
	return AppVersionSource_APP_VERSION_SOURCE_UNKNOWN
}

func (x *AppVersionJsonObject) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *AppVersionJsonObject) GetName() *StringNull {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AppVersionJsonObject) GetCreated() *TimestampNull {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *AppVersionJsonObject) GetBuild() *AppVersionBuildNull {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *AppVersionJsonObject) GetPrepareCustomRuntime() *PrepareCustomRuntimeNull {
	if x != nil {
		return x.PrepareCustomRuntime
	}
	return nil
}

func (x *AppVersionJsonObject) GetGithubIntegration() *AppVersionGithubIntegrationNull {
	if x != nil {
		return x.GithubIntegration
	}
	return nil
}

func (x *AppVersionJsonObject) GetGitlabIntegration() *AppVersionGitlabIntegrationNull {
	if x != nil {
		return x.GitlabIntegration
	}
	return nil
}

func (x *AppVersionJsonObject) GetCreatedByUser() *UserJsonObjectNull {
	if x != nil {
		return x.CreatedByUser
	}
	return nil
}

func (x *AppVersionJsonObject) GetActivationDate() *TimestampNull {
	if x != nil {
		return x.ActivationDate
	}
	return nil
}

func (x *AppVersionJsonObject) GetPublicGitSource() *AppVersionPublicGitSourceNull {
	if x != nil {
		return x.PublicGitSource
	}
	return nil
}

func (x *AppVersionJsonObject) GetConfigContent() *StringNull {
	if x != nil {
		return x.ConfigContent
	}
	return nil
}

type AppVersionLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status     AppVersionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.AppVersionStatus" json:"status,omitempty"`
	Created    *Timestamp       `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate *Timestamp       `protobuf:"bytes,4,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
}

func (x *AppVersionLight) Reset() {
	*x = AppVersionLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionLight) ProtoMessage() {}

func (x *AppVersionLight) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionLight.ProtoReflect.Descriptor instead.
func (*AppVersionLight) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{65}
}

func (x *AppVersionLight) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AppVersionLight) GetStatus() AppVersionStatus {
	if x != nil {
		return x.Status
	}
	return AppVersionStatus_APP_VERSION_STATUS_UNKNOWN
}

func (x *AppVersionLight) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *AppVersionLight) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

type AppVersionPublicGitSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitUrl     string `protobuf:"bytes,1,opt,name=gitUrl,proto3" json:"gitUrl,omitempty"`
	BranchName string `protobuf:"bytes,2,opt,name=branchName,proto3" json:"branchName,omitempty"`
}

func (x *AppVersionPublicGitSource) Reset() {
	*x = AppVersionPublicGitSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionPublicGitSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionPublicGitSource) ProtoMessage() {}

func (x *AppVersionPublicGitSource) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionPublicGitSource.ProtoReflect.Descriptor instead.
func (*AppVersionPublicGitSource) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{66}
}

func (x *AppVersionPublicGitSource) GetGitUrl() string {
	if x != nil {
		return x.GitUrl
	}
	return ""
}

func (x *AppVersionPublicGitSource) GetBranchName() string {
	if x != nil {
		return x.BranchName
	}
	return ""
}

type AppVersionUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Content string       `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Type    UserDataType `protobuf:"varint,3,opt,name=type,proto3,enum=zBusinessZeropsApiProtocol.UserDataType" json:"type,omitempty"`
}

func (x *AppVersionUserData) Reset() {
	*x = AppVersionUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionUserData) ProtoMessage() {}

func (x *AppVersionUserData) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionUserData.ProtoReflect.Descriptor instead.
func (*AppVersionUserData) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{67}
}

func (x *AppVersionUserData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *AppVersionUserData) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AppVersionUserData) GetType() UserDataType {
	if x != nil {
		return x.Type
	}
	return UserDataType_USER_DATA_TYPE_UNKNOWN
}

type ClientAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeAvatarUrl    *StringNull `protobuf:"bytes,1,opt,name=largeAvatarUrl,proto3" json:"largeAvatarUrl,omitempty"`
	SmallAvatarUrl    *StringNull `protobuf:"bytes,2,opt,name=smallAvatarUrl,proto3" json:"smallAvatarUrl,omitempty"`
	ExternalAvatarUrl *StringNull `protobuf:"bytes,3,opt,name=externalAvatarUrl,proto3" json:"externalAvatarUrl,omitempty"`
}

func (x *ClientAvatar) Reset() {
	*x = ClientAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientAvatar) ProtoMessage() {}

func (x *ClientAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientAvatar.ProtoReflect.Descriptor instead.
func (*ClientAvatar) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{68}
}

func (x *ClientAvatar) GetLargeAvatarUrl() *StringNull {
	if x != nil {
		return x.LargeAvatarUrl
	}
	return nil
}

func (x *ClientAvatar) GetSmallAvatarUrl() *StringNull {
	if x != nil {
		return x.SmallAvatarUrl
	}
	return nil
}

func (x *ClientAvatar) GetExternalAvatarUrl() *StringNull {
	if x != nil {
		return x.ExternalAvatarUrl
	}
	return nil
}

type ClientExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CompanyName   string            `protobuf:"bytes,2,opt,name=companyName,proto3" json:"companyName,omitempty"`
	CompanyNumber *StringNull       `protobuf:"bytes,3,opt,name=companyNumber,proto3" json:"companyNumber,omitempty"`
	VatNumber     *StringNull       `protobuf:"bytes,4,opt,name=vatNumber,proto3" json:"vatNumber,omitempty"`
	Avatar        *ClientAvatarNull `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`
	AccountName   string            `protobuf:"bytes,6,opt,name=accountName,proto3" json:"accountName,omitempty"`
}

func (x *ClientExtra) Reset() {
	*x = ClientExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientExtra) ProtoMessage() {}

func (x *ClientExtra) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientExtra.ProtoReflect.Descriptor instead.
func (*ClientExtra) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{69}
}

func (x *ClientExtra) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientExtra) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ClientExtra) GetCompanyNumber() *StringNull {
	if x != nil {
		return x.CompanyNumber
	}
	return nil
}

func (x *ClientExtra) GetVatNumber() *StringNull {
	if x != nil {
		return x.VatNumber
	}
	return nil
}

func (x *ClientExtra) GetAvatar() *ClientAvatarNull {
	if x != nil {
		return x.Avatar
	}
	return nil
}

func (x *ClientExtra) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type ClientUserExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId string                  `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	UserId   string                  `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Status   ClientUserLightStatus   `protobuf:"varint,4,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ClientUserLightStatus" json:"status,omitempty"`
	RoleCode ClientUserLightRoleCode `protobuf:"varint,5,opt,name=roleCode,proto3,enum=zBusinessZeropsApiProtocol.ClientUserLightRoleCode" json:"roleCode,omitempty"`
	Client   *ClientExtra            `protobuf:"bytes,6,opt,name=client,proto3" json:"client,omitempty"`
	User     *UserLight              `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ClientUserExtra) Reset() {
	*x = ClientUserExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientUserExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientUserExtra) ProtoMessage() {}

func (x *ClientUserExtra) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientUserExtra.ProtoReflect.Descriptor instead.
func (*ClientUserExtra) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{70}
}

func (x *ClientUserExtra) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ClientUserExtra) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientUserExtra) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClientUserExtra) GetStatus() ClientUserLightStatus {
	if x != nil {
		return x.Status
	}
	return ClientUserLightStatus_CLIENT_USER_LIGHT_STATUS_UNKNOWN
}

func (x *ClientUserExtra) GetRoleCode() ClientUserLightRoleCode {
	if x != nil {
		return x.RoleCode
	}
	return ClientUserLightRoleCode_CLIENT_USER_LIGHT_ROLE_CODE_UNKNOWN
}

func (x *ClientUserExtra) GetClient() *ClientExtra {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *ClientUserExtra) GetUser() *UserLight {
	if x != nil {
		return x.User
	}
	return nil
}

type CustomAutoscaling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerticalAutoscaling   *VerticalAutoscalingNull   `protobuf:"bytes,1,opt,name=verticalAutoscaling,proto3" json:"verticalAutoscaling,omitempty"`
	HorizontalAutoscaling *HorizontalAutoscalingNull `protobuf:"bytes,2,opt,name=horizontalAutoscaling,proto3" json:"horizontalAutoscaling,omitempty"`
}

func (x *CustomAutoscaling) Reset() {
	*x = CustomAutoscaling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomAutoscaling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomAutoscaling) ProtoMessage() {}

func (x *CustomAutoscaling) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomAutoscaling.ProtoReflect.Descriptor instead.
func (*CustomAutoscaling) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{71}
}

func (x *CustomAutoscaling) GetVerticalAutoscaling() *VerticalAutoscalingNull {
	if x != nil {
		return x.VerticalAutoscaling
	}
	return nil
}

func (x *CustomAutoscaling) GetHorizontalAutoscaling() *HorizontalAutoscalingNull {
	if x != nil {
		return x.HorizontalAutoscaling
	}
	return nil
}

type GithubIntegration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                string                     `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	AuthorizationRequired bool                       `protobuf:"varint,2,opt,name=authorizationRequired,proto3" json:"authorizationRequired,omitempty"`
	BranchName            *StringNull                `protobuf:"bytes,3,opt,name=branchName,proto3" json:"branchName,omitempty"`
	EventType             GithubIntegrationEventType `protobuf:"varint,5,opt,name=eventType,proto3,enum=zBusinessZeropsApiProtocol.GithubIntegrationEventType" json:"eventType,omitempty"`
	IsActive              bool                       `protobuf:"varint,6,opt,name=isActive,proto3" json:"isActive,omitempty"`
	RepositoryFullName    string                     `protobuf:"bytes,7,opt,name=repositoryFullName,proto3" json:"repositoryFullName,omitempty"`
	WebhookId             *Int32Null                 `protobuf:"bytes,9,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
}

func (x *GithubIntegration) Reset() {
	*x = GithubIntegration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubIntegration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubIntegration) ProtoMessage() {}

func (x *GithubIntegration) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubIntegration.ProtoReflect.Descriptor instead.
func (*GithubIntegration) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{72}
}

func (x *GithubIntegration) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GithubIntegration) GetAuthorizationRequired() bool {
	if x != nil {
		return x.AuthorizationRequired
	}
	return false
}

func (x *GithubIntegration) GetBranchName() *StringNull {
	if x != nil {
		return x.BranchName
	}
	return nil
}

func (x *GithubIntegration) GetEventType() GithubIntegrationEventType {
	if x != nil {
		return x.EventType
	}
	return GithubIntegrationEventType_GITHUB_INTEGRATION_EVENT_TYPE_UNKNOWN
}

func (x *GithubIntegration) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *GithubIntegration) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *GithubIntegration) GetWebhookId() *Int32Null {
	if x != nil {
		return x.WebhookId
	}
	return nil
}

type GitlabIntegration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                string                     `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	AuthorizationRequired bool                       `protobuf:"varint,2,opt,name=authorizationRequired,proto3" json:"authorizationRequired,omitempty"`
	BranchName            *StringNull                `protobuf:"bytes,3,opt,name=branchName,proto3" json:"branchName,omitempty"`
	EventType             GitlabIntegrationEventType `protobuf:"varint,4,opt,name=eventType,proto3,enum=zBusinessZeropsApiProtocol.GitlabIntegrationEventType" json:"eventType,omitempty"`
	IsActive              bool                       `protobuf:"varint,5,opt,name=isActive,proto3" json:"isActive,omitempty"`
	RepositoryFullName    string                     `protobuf:"bytes,6,opt,name=repositoryFullName,proto3" json:"repositoryFullName,omitempty"`
	WebhookId             *Int32Null                 `protobuf:"bytes,7,opt,name=webhookId,proto3" json:"webhookId,omitempty"`
}

func (x *GitlabIntegration) Reset() {
	*x = GitlabIntegration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabIntegration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabIntegration) ProtoMessage() {}

func (x *GitlabIntegration) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabIntegration.ProtoReflect.Descriptor instead.
func (*GitlabIntegration) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{73}
}

func (x *GitlabIntegration) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GitlabIntegration) GetAuthorizationRequired() bool {
	if x != nil {
		return x.AuthorizationRequired
	}
	return false
}

func (x *GitlabIntegration) GetBranchName() *StringNull {
	if x != nil {
		return x.BranchName
	}
	return nil
}

func (x *GitlabIntegration) GetEventType() GitlabIntegrationEventType {
	if x != nil {
		return x.EventType
	}
	return GitlabIntegrationEventType_GITLAB_INTEGRATION_EVENT_TYPE_UNKNOWN
}

func (x *GitlabIntegration) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *GitlabIntegration) GetRepositoryFullName() string {
	if x != nil {
		return x.RepositoryFullName
	}
	return ""
}

func (x *GitlabIntegration) GetWebhookId() *Int32Null {
	if x != nil {
		return x.WebhookId
	}
	return nil
}

type HorizontalAutoscaling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxContainerCount int32 `protobuf:"varint,1,opt,name=maxContainerCount,proto3" json:"maxContainerCount,omitempty"`
	MinContainerCount int32 `protobuf:"varint,2,opt,name=minContainerCount,proto3" json:"minContainerCount,omitempty"`
}

func (x *HorizontalAutoscaling) Reset() {
	*x = HorizontalAutoscaling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalAutoscaling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalAutoscaling) ProtoMessage() {}

func (x *HorizontalAutoscaling) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalAutoscaling.ProtoReflect.Descriptor instead.
func (*HorizontalAutoscaling) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{74}
}

func (x *HorizontalAutoscaling) GetMaxContainerCount() int32 {
	if x != nil {
		return x.MaxContainerCount
	}
	return 0
}

func (x *HorizontalAutoscaling) GetMinContainerCount() int32 {
	if x != nil {
		return x.MinContainerCount
	}
	return 0
}

type Language struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Language) Reset() {
	*x = Language{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Language) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Language) ProtoMessage() {}

func (x *Language) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Language.ProtoReflect.Descriptor instead.
func (*Language) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{75}
}

func (x *Language) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Language) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LocationServiceStackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceStackName            string `protobuf:"bytes,1,opt,name=serviceStackName,proto3" json:"serviceStackName,omitempty"`
	ServiceStackTypeName        string `protobuf:"bytes,2,opt,name=serviceStackTypeName,proto3" json:"serviceStackTypeName,omitempty"`
	ServiceStackTypeVersionName string `protobuf:"bytes,3,opt,name=serviceStackTypeVersionName,proto3" json:"serviceStackTypeVersionName,omitempty"`
}

func (x *LocationServiceStackInfo) Reset() {
	*x = LocationServiceStackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationServiceStackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationServiceStackInfo) ProtoMessage() {}

func (x *LocationServiceStackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationServiceStackInfo.ProtoReflect.Descriptor instead.
func (*LocationServiceStackInfo) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{76}
}

func (x *LocationServiceStackInfo) GetServiceStackName() string {
	if x != nil {
		return x.ServiceStackName
	}
	return ""
}

func (x *LocationServiceStackInfo) GetServiceStackTypeName() string {
	if x != nil {
		return x.ServiceStackTypeName
	}
	return ""
}

func (x *LocationServiceStackInfo) GetServiceStackTypeVersionName() string {
	if x != nil {
		return x.ServiceStackTypeVersionName
	}
	return ""
}

type PrepareCustomRuntime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerCreationStart *TimestampNull `protobuf:"bytes,8,opt,name=containerCreationStart,proto3" json:"containerCreationStart,omitempty"`
	StartDate              *TimestampNull `protobuf:"bytes,1,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate                *TimestampNull `protobuf:"bytes,2,opt,name=endDate,proto3" json:"endDate,omitempty"`
	ServiceStackId         *StringNull    `protobuf:"bytes,5,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	ServiceStackName       *StringNull    `protobuf:"bytes,6,opt,name=serviceStackName,proto3" json:"serviceStackName,omitempty"`
}

func (x *PrepareCustomRuntime) Reset() {
	*x = PrepareCustomRuntime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareCustomRuntime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareCustomRuntime) ProtoMessage() {}

func (x *PrepareCustomRuntime) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareCustomRuntime.ProtoReflect.Descriptor instead.
func (*PrepareCustomRuntime) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{77}
}

func (x *PrepareCustomRuntime) GetContainerCreationStart() *TimestampNull {
	if x != nil {
		return x.ContainerCreationStart
	}
	return nil
}

func (x *PrepareCustomRuntime) GetStartDate() *TimestampNull {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *PrepareCustomRuntime) GetEndDate() *TimestampNull {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *PrepareCustomRuntime) GetServiceStackId() *StringNull {
	if x != nil {
		return x.ServiceStackId
	}
	return nil
}

func (x *PrepareCustomRuntime) GetServiceStackName() *StringNull {
	if x != nil {
		return x.ServiceStackName
	}
	return nil
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId        string                         `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId       string                         `protobuf:"bytes,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackId  *StringNull                    `protobuf:"bytes,4,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Project         *ProjectLightJsonObject        `protobuf:"bytes,5,opt,name=project,proto3" json:"project,omitempty"`
	ServiceStacks   []*ServiceStackLightJsonObject `protobuf:"bytes,6,rep,name=serviceStacks,proto3" json:"serviceStacks,omitempty"`
	Status          ProcessStatus                  `protobuf:"varint,7,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ProcessStatus" json:"status,omitempty"`
	Sequence        int32                          `protobuf:"varint,8,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CreatedByUser   *UserJsonObject                `protobuf:"bytes,9,opt,name=createdByUser,proto3" json:"createdByUser,omitempty"`
	CanceledByUser  *UserJsonObjectNull            `protobuf:"bytes,10,opt,name=canceledByUser,proto3" json:"canceledByUser,omitempty"`
	ActionName      string                         `protobuf:"bytes,11,opt,name=actionName,proto3" json:"actionName,omitempty"`
	Created         *Timestamp                     `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate      *Timestamp                     `protobuf:"bytes,13,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Started         *TimestampNull                 `protobuf:"bytes,14,opt,name=started,proto3" json:"started,omitempty"`
	Finished        *TimestampNull                 `protobuf:"bytes,15,opt,name=finished,proto3" json:"finished,omitempty"`
	CreatedBySystem bool                           `protobuf:"varint,16,opt,name=createdBySystem,proto3" json:"createdBySystem,omitempty"`
	AppVersion      *AppVersionJsonObjectNull      `protobuf:"bytes,17,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{78}
}

func (x *Process) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Process) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Process) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Process) GetServiceStackId() *StringNull {
	if x != nil {
		return x.ServiceStackId
	}
	return nil
}

func (x *Process) GetProject() *ProjectLightJsonObject {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *Process) GetServiceStacks() []*ServiceStackLightJsonObject {
	if x != nil {
		return x.ServiceStacks
	}
	return nil
}

func (x *Process) GetStatus() ProcessStatus {
	if x != nil {
		return x.Status
	}
	return ProcessStatus_PROCESS_STATUS_UNKNOWN
}

func (x *Process) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Process) GetCreatedByUser() *UserJsonObject {
	if x != nil {
		return x.CreatedByUser
	}
	return nil
}

func (x *Process) GetCanceledByUser() *UserJsonObjectNull {
	if x != nil {
		return x.CanceledByUser
	}
	return nil
}

func (x *Process) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *Process) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Process) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *Process) GetStarted() *TimestampNull {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *Process) GetFinished() *TimestampNull {
	if x != nil {
		return x.Finished
	}
	return nil
}

func (x *Process) GetCreatedBySystem() bool {
	if x != nil {
		return x.CreatedBySystem
	}
	return false
}

func (x *Process) GetAppVersion() *AppVersionJsonObjectNull {
	if x != nil {
		return x.AppVersion
	}
	return nil
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId            string        `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Name                string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description         *StringNull   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	TagList             []string      `protobuf:"bytes,5,rep,name=tagList,proto3" json:"tagList,omitempty"`
	Status              ProjectStatus `protobuf:"varint,6,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ProjectStatus" json:"status,omitempty"`
	Created             *Timestamp    `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate          *Timestamp    `protobuf:"bytes,8,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	PublicIpV4          *StringNull   `protobuf:"bytes,9,opt,name=publicIpV4,proto3" json:"publicIpV4,omitempty"`
	PublicIpV6          *StringNull   `protobuf:"bytes,10,opt,name=publicIpV6,proto3" json:"publicIpV6,omitempty"`
	ZeropsSubdomainHost *StringNull   `protobuf:"bytes,13,opt,name=zeropsSubdomainHost,proto3" json:"zeropsSubdomainHost,omitempty"`
	AutoStartup         bool          `protobuf:"varint,14,opt,name=autoStartup,proto3" json:"autoStartup,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{79}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetDescription() *StringNull {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Project) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *Project) GetStatus() ProjectStatus {
	if x != nil {
		return x.Status
	}
	return ProjectStatus_PROJECT_STATUS_UNKNOWN
}

func (x *Project) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Project) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *Project) GetPublicIpV4() *StringNull {
	if x != nil {
		return x.PublicIpV4
	}
	return nil
}

func (x *Project) GetPublicIpV6() *StringNull {
	if x != nil {
		return x.PublicIpV6
	}
	return nil
}

func (x *Project) GetZeropsSubdomainHost() *StringNull {
	if x != nil {
		return x.ZeropsSubdomainHost
	}
	return nil
}

func (x *Project) GetAutoStartup() bool {
	if x != nil {
		return x.AutoStartup
	}
	return false
}

type ProjectImportServiceStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Error     *ErrorNull `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Processes []*Process `protobuf:"bytes,4,rep,name=processes,proto3" json:"processes,omitempty"`
}

func (x *ProjectImportServiceStack) Reset() {
	*x = ProjectImportServiceStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectImportServiceStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectImportServiceStack) ProtoMessage() {}

func (x *ProjectImportServiceStack) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectImportServiceStack.ProtoReflect.Descriptor instead.
func (*ProjectImportServiceStack) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{80}
}

func (x *ProjectImportServiceStack) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProjectImportServiceStack) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectImportServiceStack) GetError() *ErrorNull {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ProjectImportServiceStack) GetProcesses() []*Process {
	if x != nil {
		return x.Processes
	}
	return nil
}

type ProjectLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId    string        `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Name        string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description *StringNull   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	TagList     []string      `protobuf:"bytes,5,rep,name=tagList,proto3" json:"tagList,omitempty"`
	Status      ProjectStatus `protobuf:"varint,6,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ProjectStatus" json:"status,omitempty"`
	Created     *Timestamp    `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate  *Timestamp    `protobuf:"bytes,8,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
}

func (x *ProjectLight) Reset() {
	*x = ProjectLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectLight) ProtoMessage() {}

func (x *ProjectLight) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectLight.ProtoReflect.Descriptor instead.
func (*ProjectLight) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{81}
}

func (x *ProjectLight) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProjectLight) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ProjectLight) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectLight) GetDescription() *StringNull {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ProjectLight) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *ProjectLight) GetStatus() ProjectStatus {
	if x != nil {
		return x.Status
	}
	return ProjectStatus_PROJECT_STATUS_UNKNOWN
}

func (x *ProjectLight) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ProjectLight) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

type ProjectLightJsonObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId    string        `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Name        string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description *StringNull   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	TagList     []string      `protobuf:"bytes,5,rep,name=tagList,proto3" json:"tagList,omitempty"`
	Status      ProjectStatus `protobuf:"varint,6,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ProjectStatus" json:"status,omitempty"`
	Created     *Timestamp    `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate  *Timestamp    `protobuf:"bytes,8,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
}

func (x *ProjectLightJsonObject) Reset() {
	*x = ProjectLightJsonObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectLightJsonObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectLightJsonObject) ProtoMessage() {}

func (x *ProjectLightJsonObject) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectLightJsonObject.ProtoReflect.Descriptor instead.
func (*ProjectLightJsonObject) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{82}
}

func (x *ProjectLightJsonObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProjectLightJsonObject) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ProjectLightJsonObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectLightJsonObject) GetDescription() *StringNull {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ProjectLightJsonObject) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *ProjectLightJsonObject) GetStatus() ProjectStatus {
	if x != nil {
		return x.Status
	}
	return ProjectStatus_PROJECT_STATUS_UNKNOWN
}

func (x *ProjectLightJsonObject) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ProjectLightJsonObject) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

type PublicHttpRoutingDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DomainName     string                                `protobuf:"bytes,1,opt,name=domainName,proto3" json:"domainName,omitempty"`
	DnsCheckStatus PublicHttpRoutingDomainDnsCheckStatus `protobuf:"varint,2,opt,name=dnsCheckStatus,proto3,enum=zBusinessZeropsApiProtocol.PublicHttpRoutingDomainDnsCheckStatus" json:"dnsCheckStatus,omitempty"`
	SslStatus      PublicHttpRoutingDomainSslStatus      `protobuf:"varint,3,opt,name=sslStatus,proto3,enum=zBusinessZeropsApiProtocol.PublicHttpRoutingDomainSslStatus" json:"sslStatus,omitempty"`
}

func (x *PublicHttpRoutingDomain) Reset() {
	*x = PublicHttpRoutingDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicHttpRoutingDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicHttpRoutingDomain) ProtoMessage() {}

func (x *PublicHttpRoutingDomain) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicHttpRoutingDomain.ProtoReflect.Descriptor instead.
func (*PublicHttpRoutingDomain) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{83}
}

func (x *PublicHttpRoutingDomain) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *PublicHttpRoutingDomain) GetDnsCheckStatus() PublicHttpRoutingDomainDnsCheckStatus {
	if x != nil {
		return x.DnsCheckStatus
	}
	return PublicHttpRoutingDomainDnsCheckStatus_PUBLIC_HTTP_ROUTING_DOMAIN_DNS_CHECK_STATUS_UNKNOWN
}

func (x *PublicHttpRoutingDomain) GetSslStatus() PublicHttpRoutingDomainSslStatus {
	if x != nil {
		return x.SslStatus
	}
	return PublicHttpRoutingDomainSslStatus_PUBLIC_HTTP_ROUTING_DOMAIN_SSL_STATUS_UNKNOWN
}

type PublicHttpRoutingLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path             string                    `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Port             int32                     `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	ServiceStackId   string                    `protobuf:"bytes,3,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	ServiceStackInfo *LocationServiceStackInfo `protobuf:"bytes,4,opt,name=serviceStackInfo,proto3" json:"serviceStackInfo,omitempty"`
}

func (x *PublicHttpRoutingLocation) Reset() {
	*x = PublicHttpRoutingLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicHttpRoutingLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicHttpRoutingLocation) ProtoMessage() {}

func (x *PublicHttpRoutingLocation) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicHttpRoutingLocation.ProtoReflect.Descriptor instead.
func (*PublicHttpRoutingLocation) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{84}
}

func (x *PublicHttpRoutingLocation) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PublicHttpRoutingLocation) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PublicHttpRoutingLocation) GetServiceStackId() string {
	if x != nil {
		return x.ServiceStackId
	}
	return ""
}

func (x *PublicHttpRoutingLocation) GetServiceStackInfo() *LocationServiceStackInfo {
	if x != nil {
		return x.ServiceStackInfo
	}
	return nil
}

type RequestedPortsJsonObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActive       bool           `protobuf:"varint,1,opt,name=isActive,proto3" json:"isActive,omitempty"`
	RequestedPorts []*ServicePort `protobuf:"bytes,2,rep,name=requestedPorts,proto3" json:"requestedPorts,omitempty"`
}

func (x *RequestedPortsJsonObject) Reset() {
	*x = RequestedPortsJsonObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestedPortsJsonObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestedPortsJsonObject) ProtoMessage() {}

func (x *RequestedPortsJsonObject) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestedPortsJsonObject.ProtoReflect.Descriptor instead.
func (*RequestedPortsJsonObject) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{85}
}

func (x *RequestedPortsJsonObject) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *RequestedPortsJsonObject) GetRequestedPorts() []*ServicePort {
	if x != nil {
		return x.RequestedPorts
	}
	return nil
}

type ScalingResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuCoreCount int32   `protobuf:"varint,1,opt,name=cpuCoreCount,proto3" json:"cpuCoreCount,omitempty"`
	MemoryGBytes float32 `protobuf:"fixed32,2,opt,name=memoryGBytes,proto3" json:"memoryGBytes,omitempty"`
	DiskGBytes   float32 `protobuf:"fixed32,3,opt,name=diskGBytes,proto3" json:"diskGBytes,omitempty"`
}

func (x *ScalingResource) Reset() {
	*x = ScalingResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalingResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalingResource) ProtoMessage() {}

func (x *ScalingResource) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalingResource.ProtoReflect.Descriptor instead.
func (*ScalingResource) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{86}
}

func (x *ScalingResource) GetCpuCoreCount() int32 {
	if x != nil {
		return x.CpuCoreCount
	}
	return 0
}

func (x *ScalingResource) GetMemoryGBytes() float32 {
	if x != nil {
		return x.MemoryGBytes
	}
	return 0
}

func (x *ScalingResource) GetDiskGBytes() float32 {
	if x != nil {
		return x.DiskGBytes
	}
	return 0
}

type ServicePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol    ServicePortProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=zBusinessZeropsApiProtocol.ServicePortProtocol" json:"protocol,omitempty"`
	Port        int32               `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Description string              `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Scheme      ServicePortScheme   `protobuf:"varint,4,opt,name=scheme,proto3,enum=zBusinessZeropsApiProtocol.ServicePortScheme" json:"scheme,omitempty"`
	ServiceId   *StringNull         `protobuf:"bytes,5,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
}

func (x *ServicePort) Reset() {
	*x = ServicePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicePort) ProtoMessage() {}

func (x *ServicePort) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicePort.ProtoReflect.Descriptor instead.
func (*ServicePort) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{87}
}

func (x *ServicePort) GetProtocol() ServicePortProtocol {
	if x != nil {
		return x.Protocol
	}
	return ServicePortProtocol_SERVICE_PORT_PROTOCOL_UNKNOWN
}

func (x *ServicePort) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ServicePort) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServicePort) GetScheme() ServicePortScheme {
	if x != nil {
		return x.Scheme
	}
	return ServicePortScheme_SERVICE_PORT_SCHEME_UNKNOWN
}

func (x *ServicePort) GetServiceId() *StringNull {
	if x != nil {
		return x.ServiceId
	}
	return nil
}

type ServiceStackConnectedServiceStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceStack *ServiceStackLight           `protobuf:"bytes,1,opt,name=serviceStack,proto3" json:"serviceStack,omitempty"`
	Status       ServiceStackConnectionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ServiceStackConnectionStatus" json:"status,omitempty"`
}

func (x *ServiceStackConnectedServiceStack) Reset() {
	*x = ServiceStackConnectedServiceStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStackConnectedServiceStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStackConnectedServiceStack) ProtoMessage() {}

func (x *ServiceStackConnectedServiceStack) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStackConnectedServiceStack.ProtoReflect.Descriptor instead.
func (*ServiceStackConnectedServiceStack) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{88}
}

func (x *ServiceStackConnectedServiceStack) GetServiceStack() *ServiceStackLight {
	if x != nil {
		return x.ServiceStack
	}
	return nil
}

func (x *ServiceStackConnectedServiceStack) GetStatus() ServiceStackConnectionStatus {
	if x != nil {
		return x.Status
	}
	return ServiceStackConnectionStatus_SERVICE_STACK_CONNECTION_STATUS_UNKNOWN
}

type ServiceStackInfoJsonObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceStackTypeName        string                   `protobuf:"bytes,1,opt,name=serviceStackTypeName,proto3" json:"serviceStackTypeName,omitempty"`
	ServiceStackTypeCategory    ServiceStackTypeCategory `protobuf:"varint,2,opt,name=serviceStackTypeCategory,proto3,enum=zBusinessZeropsApiProtocol.ServiceStackTypeCategory" json:"serviceStackTypeCategory,omitempty"`
	ServiceStackTypeVersionName string                   `protobuf:"bytes,3,opt,name=serviceStackTypeVersionName,proto3" json:"serviceStackTypeVersionName,omitempty"`
}

func (x *ServiceStackInfoJsonObject) Reset() {
	*x = ServiceStackInfoJsonObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStackInfoJsonObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStackInfoJsonObject) ProtoMessage() {}

func (x *ServiceStackInfoJsonObject) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStackInfoJsonObject.ProtoReflect.Descriptor instead.
func (*ServiceStackInfoJsonObject) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{89}
}

func (x *ServiceStackInfoJsonObject) GetServiceStackTypeName() string {
	if x != nil {
		return x.ServiceStackTypeName
	}
	return ""
}

func (x *ServiceStackInfoJsonObject) GetServiceStackTypeCategory() ServiceStackTypeCategory {
	if x != nil {
		return x.ServiceStackTypeCategory
	}
	return ServiceStackTypeCategory_SERVICE_STACK_TYPE_CATEGORY_UNKNOWN
}

func (x *ServiceStackInfoJsonObject) GetServiceStackTypeVersionName() string {
	if x != nil {
		return x.ServiceStackTypeVersionName
	}
	return ""
}

type ServiceStackLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status                    ServiceStackStatus          `protobuf:"varint,2,opt,name=status,proto3,enum=zBusinessZeropsApiProtocol.ServiceStackStatus" json:"status,omitempty"`
	Name                      string                      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ServiceStackTypeInfo      *ServiceStackInfoJsonObject `protobuf:"bytes,4,opt,name=serviceStackTypeInfo,proto3" json:"serviceStackTypeInfo,omitempty"`
	ServiceStackTypeId        string                      `protobuf:"bytes,5,opt,name=serviceStackTypeId,proto3" json:"serviceStackTypeId,omitempty"`
	ServiceStackTypeVersionId string                      `protobuf:"bytes,6,opt,name=serviceStackTypeVersionId,proto3" json:"serviceStackTypeVersionId,omitempty"`
	IsSystem                  bool                        `protobuf:"varint,7,opt,name=isSystem,proto3" json:"isSystem,omitempty"`
	StartOnProjectStart       bool                        `protobuf:"varint,11,opt,name=startOnProjectStart,proto3" json:"startOnProjectStart,omitempty"`
	GithubIntegration         *GithubIntegrationNull      `protobuf:"bytes,8,opt,name=githubIntegration,proto3" json:"githubIntegration,omitempty"`
	GitlabIntegration         *GitlabIntegrationNull      `protobuf:"bytes,9,opt,name=gitlabIntegration,proto3" json:"gitlabIntegration,omitempty"`
	CustomAutoscaling         *CustomAutoscalingNull      `protobuf:"bytes,12,opt,name=customAutoscaling,proto3" json:"customAutoscaling,omitempty"`
}

func (x *ServiceStackLight) Reset() {
	*x = ServiceStackLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStackLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStackLight) ProtoMessage() {}

func (x *ServiceStackLight) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStackLight.ProtoReflect.Descriptor instead.
func (*ServiceStackLight) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{90}
}

func (x *ServiceStackLight) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceStackLight) GetStatus() ServiceStackStatus {
	if x != nil {
		return x.Status
	}
	return ServiceStackStatus_SERVICE_STACK_STATUS_UNKNOWN
}

func (x *ServiceStackLight) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceStackLight) GetServiceStackTypeInfo() *ServiceStackInfoJsonObject {
	if x != nil {
		return x.ServiceStackTypeInfo
	}
	return nil
}

func (x *ServiceStackLight) GetServiceStackTypeId() string {
	if x != nil {
		return x.ServiceStackTypeId
	}
	return ""
}

func (x *ServiceStackLight) GetServiceStackTypeVersionId() string {
	if x != nil {
		return x.ServiceStackTypeVersionId
	}
	return ""
}

func (x *ServiceStackLight) GetIsSystem() bool {
	if x != nil {
		return x.IsSystem
	}
	return false
}

func (x *ServiceStackLight) GetStartOnProjectStart() bool {
	if x != nil {
		return x.StartOnProjectStart
	}
	return false
}

func (x *ServiceStackLight) GetGithubIntegration() *GithubIntegrationNull {
	if x != nil {
		return x.GithubIntegration
	}
	return nil
}

func (x *ServiceStackLight) GetGitlabIntegration() *GitlabIntegrationNull {
	if x != nil {
		return x.GitlabIntegration
	}
	return nil
}

func (x *ServiceStackLight) GetCustomAutoscaling() *CustomAutoscalingNull {
	if x != nil {
		return x.CustomAutoscaling
	}
	return nil
}

type ServiceStackLightJsonObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Created                   *Timestamp                  `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate                *Timestamp                  `protobuf:"bytes,3,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	ProjectId                 string                      `protobuf:"bytes,4,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackTypeId        string                      `protobuf:"bytes,5,opt,name=serviceStackTypeId,proto3" json:"serviceStackTypeId,omitempty"`
	ServiceStackTypeVersionId string                      `protobuf:"bytes,6,opt,name=serviceStackTypeVersionId,proto3" json:"serviceStackTypeVersionId,omitempty"`
	DriverId                  *StringNull                 `protobuf:"bytes,7,opt,name=driverId,proto3" json:"driverId,omitempty"`
	Name                      string                      `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	ServiceStackTypeInfo      *ServiceStackInfoJsonObject `protobuf:"bytes,9,opt,name=serviceStackTypeInfo,proto3" json:"serviceStackTypeInfo,omitempty"`
	Ports                     []*ServicePort              `protobuf:"bytes,10,rep,name=ports,proto3" json:"ports,omitempty"`
}

func (x *ServiceStackLightJsonObject) Reset() {
	*x = ServiceStackLightJsonObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceStackLightJsonObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceStackLightJsonObject) ProtoMessage() {}

func (x *ServiceStackLightJsonObject) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceStackLightJsonObject.ProtoReflect.Descriptor instead.
func (*ServiceStackLightJsonObject) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{91}
}

func (x *ServiceStackLightJsonObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceStackLightJsonObject) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ServiceStackLightJsonObject) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *ServiceStackLightJsonObject) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ServiceStackLightJsonObject) GetServiceStackTypeId() string {
	if x != nil {
		return x.ServiceStackTypeId
	}
	return ""
}

func (x *ServiceStackLightJsonObject) GetServiceStackTypeVersionId() string {
	if x != nil {
		return x.ServiceStackTypeVersionId
	}
	return ""
}

func (x *ServiceStackLightJsonObject) GetDriverId() *StringNull {
	if x != nil {
		return x.DriverId
	}
	return nil
}

func (x *ServiceStackLightJsonObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceStackLightJsonObject) GetServiceStackTypeInfo() *ServiceStackInfoJsonObject {
	if x != nil {
		return x.ServiceStackTypeInfo
	}
	return nil
}

func (x *ServiceStackLightJsonObject) GetPorts() []*ServicePort {
	if x != nil {
		return x.Ports
	}
	return nil
}

type UserAvatar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LargeAvatarUrl    *StringNull `protobuf:"bytes,1,opt,name=largeAvatarUrl,proto3" json:"largeAvatarUrl,omitempty"`
	SmallAvatarUrl    *StringNull `protobuf:"bytes,2,opt,name=smallAvatarUrl,proto3" json:"smallAvatarUrl,omitempty"`
	ExternalAvatarUrl *StringNull `protobuf:"bytes,3,opt,name=externalAvatarUrl,proto3" json:"externalAvatarUrl,omitempty"`
}

func (x *UserAvatar) Reset() {
	*x = UserAvatar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAvatar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAvatar) ProtoMessage() {}

func (x *UserAvatar) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAvatar.ProtoReflect.Descriptor instead.
func (*UserAvatar) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{92}
}

func (x *UserAvatar) GetLargeAvatarUrl() *StringNull {
	if x != nil {
		return x.LargeAvatarUrl
	}
	return nil
}

func (x *UserAvatar) GetSmallAvatarUrl() *StringNull {
	if x != nil {
		return x.SmallAvatarUrl
	}
	return nil
}

func (x *UserAvatar) GetExternalAvatarUrl() *StringNull {
	if x != nil {
		return x.ExternalAvatarUrl
	}
	return nil
}

type UserDataLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClientId       string          `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId      string          `protobuf:"bytes,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	ServiceStackId string          `protobuf:"bytes,4,opt,name=serviceStackId,proto3" json:"serviceStackId,omitempty"`
	Key            string          `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Content        string          `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Type           UserDataType    `protobuf:"varint,7,opt,name=type,proto3,enum=zBusinessZeropsApiProtocol.UserDataType" json:"type,omitempty"`
	Created        *Timestamp      `protobuf:"bytes,8,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdate     *Timestamp      `protobuf:"bytes,9,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	IsSynced       bool            `protobuf:"varint,10,opt,name=isSynced,proto3" json:"isSynced,omitempty"`
	DeleteOnSync   bool            `protobuf:"varint,11,opt,name=deleteOnSync,proto3" json:"deleteOnSync,omitempty"`
	Version        UserDataVersion `protobuf:"varint,12,opt,name=version,proto3,enum=zBusinessZeropsApiProtocol.UserDataVersion" json:"version,omitempty"`
	LastSync       *TimestampNull  `protobuf:"bytes,13,opt,name=lastSync,proto3" json:"lastSync,omitempty"`
}

func (x *UserDataLight) Reset() {
	*x = UserDataLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDataLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDataLight) ProtoMessage() {}

func (x *UserDataLight) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDataLight.ProtoReflect.Descriptor instead.
func (*UserDataLight) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{93}
}

func (x *UserDataLight) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserDataLight) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *UserDataLight) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UserDataLight) GetServiceStackId() string {
	if x != nil {
		return x.ServiceStackId
	}
	return ""
}

func (x *UserDataLight) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *UserDataLight) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UserDataLight) GetType() UserDataType {
	if x != nil {
		return x.Type
	}
	return UserDataType_USER_DATA_TYPE_UNKNOWN
}

func (x *UserDataLight) GetCreated() *Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *UserDataLight) GetLastUpdate() *Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *UserDataLight) GetIsSynced() bool {
	if x != nil {
		return x.IsSynced
	}
	return false
}

func (x *UserDataLight) GetDeleteOnSync() bool {
	if x != nil {
		return x.DeleteOnSync
	}
	return false
}

func (x *UserDataLight) GetVersion() UserDataVersion {
	if x != nil {
		return x.Version
	}
	return UserDataVersion_USER_DATA_VERSION_UNKNOWN
}

func (x *UserDataLight) GetLastSync() *TimestampNull {
	if x != nil {
		return x.LastSync
	}
	return nil
}

type UserJsonObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      UserJsonObjectType `protobuf:"varint,5,opt,name=type,proto3,enum=zBusinessZeropsApiProtocol.UserJsonObjectType" json:"type,omitempty"`
	Id        *StringNull        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email     *StringNull        `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	FirstName *StringNull        `protobuf:"bytes,3,opt,name=firstName,proto3" json:"firstName,omitempty"`
	FullName  *StringNull        `protobuf:"bytes,4,opt,name=fullName,proto3" json:"fullName,omitempty"`
	Avatar    *UserAvatarNull    `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *UserJsonObject) Reset() {
	*x = UserJsonObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserJsonObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserJsonObject) ProtoMessage() {}

func (x *UserJsonObject) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserJsonObject.ProtoReflect.Descriptor instead.
func (*UserJsonObject) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{94}
}

func (x *UserJsonObject) GetType() UserJsonObjectType {
	if x != nil {
		return x.Type
	}
	return UserJsonObjectType_USER_JSON_OBJECT_TYPE_UNKNOWN
}

func (x *UserJsonObject) GetId() *StringNull {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UserJsonObject) GetEmail() *StringNull {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *UserJsonObject) GetFirstName() *StringNull {
	if x != nil {
		return x.FirstName
	}
	return nil
}

func (x *UserJsonObject) GetFullName() *StringNull {
	if x != nil {
		return x.FullName
	}
	return nil
}

func (x *UserJsonObject) GetAvatar() *UserAvatarNull {
	if x != nil {
		return x.Avatar
	}
	return nil
}

type UserLight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Email     string          `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	FullName  string          `protobuf:"bytes,3,opt,name=fullName,proto3" json:"fullName,omitempty"`
	FirstName string          `protobuf:"bytes,4,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName  string          `protobuf:"bytes,5,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Avatar    *UserAvatarNull `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (x *UserLight) Reset() {
	*x = UserLight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLight) ProtoMessage() {}

func (x *UserLight) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLight.ProtoReflect.Descriptor instead.
func (*UserLight) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{95}
}

func (x *UserLight) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserLight) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserLight) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *UserLight) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserLight) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserLight) GetAvatar() *UserAvatarNull {
	if x != nil {
		return x.Avatar
	}
	return nil
}

type VerticalAutoscaling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxResource *ScalingResource `protobuf:"bytes,1,opt,name=maxResource,proto3" json:"maxResource,omitempty"`
	MinResource *ScalingResource `protobuf:"bytes,2,opt,name=minResource,proto3" json:"minResource,omitempty"`
}

func (x *VerticalAutoscaling) Reset() {
	*x = VerticalAutoscaling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerticalAutoscaling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerticalAutoscaling) ProtoMessage() {}

func (x *VerticalAutoscaling) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerticalAutoscaling.ProtoReflect.Descriptor instead.
func (*VerticalAutoscaling) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{96}
}

func (x *VerticalAutoscaling) GetMaxResource() *ScalingResource {
	if x != nil {
		return x.MaxResource
	}
	return nil
}

func (x *VerticalAutoscaling) GetMinResource() *ScalingResource {
	if x != nil {
		return x.MinResource
	}
	return nil
}

type AppVersionBuildNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *AppVersionBuild `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool             `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *AppVersionBuildNull) Reset() {
	*x = AppVersionBuildNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionBuildNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionBuildNull) ProtoMessage() {}

func (x *AppVersionBuildNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionBuildNull.ProtoReflect.Descriptor instead.
func (*AppVersionBuildNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{97}
}

func (x *AppVersionBuildNull) GetValue() *AppVersionBuild {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AppVersionBuildNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type AppVersionGithubIntegrationNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *AppVersionGithubIntegration `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool                         `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *AppVersionGithubIntegrationNull) Reset() {
	*x = AppVersionGithubIntegrationNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionGithubIntegrationNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionGithubIntegrationNull) ProtoMessage() {}

func (x *AppVersionGithubIntegrationNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionGithubIntegrationNull.ProtoReflect.Descriptor instead.
func (*AppVersionGithubIntegrationNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{98}
}

func (x *AppVersionGithubIntegrationNull) GetValue() *AppVersionGithubIntegration {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AppVersionGithubIntegrationNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type AppVersionGitlabIntegrationNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *AppVersionGitlabIntegration `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool                         `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *AppVersionGitlabIntegrationNull) Reset() {
	*x = AppVersionGitlabIntegrationNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionGitlabIntegrationNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionGitlabIntegrationNull) ProtoMessage() {}

func (x *AppVersionGitlabIntegrationNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionGitlabIntegrationNull.ProtoReflect.Descriptor instead.
func (*AppVersionGitlabIntegrationNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{99}
}

func (x *AppVersionGitlabIntegrationNull) GetValue() *AppVersionGitlabIntegration {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AppVersionGitlabIntegrationNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type AppVersionJsonObjectNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *AppVersionJsonObject `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool                  `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *AppVersionJsonObjectNull) Reset() {
	*x = AppVersionJsonObjectNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionJsonObjectNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionJsonObjectNull) ProtoMessage() {}

func (x *AppVersionJsonObjectNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionJsonObjectNull.ProtoReflect.Descriptor instead.
func (*AppVersionJsonObjectNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{100}
}

func (x *AppVersionJsonObjectNull) GetValue() *AppVersionJsonObject {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AppVersionJsonObjectNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type AppVersionLightNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *AppVersionLight `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool             `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *AppVersionLightNull) Reset() {
	*x = AppVersionLightNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionLightNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionLightNull) ProtoMessage() {}

func (x *AppVersionLightNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionLightNull.ProtoReflect.Descriptor instead.
func (*AppVersionLightNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{101}
}

func (x *AppVersionLightNull) GetValue() *AppVersionLight {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AppVersionLightNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type AppVersionPublicGitSourceNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *AppVersionPublicGitSource `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool                       `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *AppVersionPublicGitSourceNull) Reset() {
	*x = AppVersionPublicGitSourceNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionPublicGitSourceNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionPublicGitSourceNull) ProtoMessage() {}

func (x *AppVersionPublicGitSourceNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionPublicGitSourceNull.ProtoReflect.Descriptor instead.
func (*AppVersionPublicGitSourceNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{102}
}

func (x *AppVersionPublicGitSourceNull) GetValue() *AppVersionPublicGitSource {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AppVersionPublicGitSourceNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type ClientAvatarNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *ClientAvatar `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool          `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *ClientAvatarNull) Reset() {
	*x = ClientAvatarNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientAvatarNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientAvatarNull) ProtoMessage() {}

func (x *ClientAvatarNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientAvatarNull.ProtoReflect.Descriptor instead.
func (*ClientAvatarNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{103}
}

func (x *ClientAvatarNull) GetValue() *ClientAvatar {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ClientAvatarNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type CustomAutoscalingNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *CustomAutoscaling `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool               `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *CustomAutoscalingNull) Reset() {
	*x = CustomAutoscalingNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomAutoscalingNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomAutoscalingNull) ProtoMessage() {}

func (x *CustomAutoscalingNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomAutoscalingNull.ProtoReflect.Descriptor instead.
func (*CustomAutoscalingNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{104}
}

func (x *CustomAutoscalingNull) GetValue() *CustomAutoscaling {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CustomAutoscalingNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type GithubIntegrationNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *GithubIntegration `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool               `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *GithubIntegrationNull) Reset() {
	*x = GithubIntegrationNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubIntegrationNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubIntegrationNull) ProtoMessage() {}

func (x *GithubIntegrationNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubIntegrationNull.ProtoReflect.Descriptor instead.
func (*GithubIntegrationNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{105}
}

func (x *GithubIntegrationNull) GetValue() *GithubIntegration {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GithubIntegrationNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type GitlabIntegrationNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *GitlabIntegration `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool               `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *GitlabIntegrationNull) Reset() {
	*x = GitlabIntegrationNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitlabIntegrationNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitlabIntegrationNull) ProtoMessage() {}

func (x *GitlabIntegrationNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitlabIntegrationNull.ProtoReflect.Descriptor instead.
func (*GitlabIntegrationNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{106}
}

func (x *GitlabIntegrationNull) GetValue() *GitlabIntegration {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *GitlabIntegrationNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type HorizontalAutoscalingNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *HorizontalAutoscaling `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool                   `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *HorizontalAutoscalingNull) Reset() {
	*x = HorizontalAutoscalingNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalAutoscalingNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalAutoscalingNull) ProtoMessage() {}

func (x *HorizontalAutoscalingNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalAutoscalingNull.ProtoReflect.Descriptor instead.
func (*HorizontalAutoscalingNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{107}
}

func (x *HorizontalAutoscalingNull) GetValue() *HorizontalAutoscaling {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *HorizontalAutoscalingNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type Int32Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool  `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *Int32Null) Reset() {
	*x = Int32Null{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Null) ProtoMessage() {}

func (x *Int32Null) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Null.ProtoReflect.Descriptor instead.
func (*Int32Null) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{108}
}

func (x *Int32Null) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Int32Null) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type PrepareCustomRuntimeNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *PrepareCustomRuntime `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool                  `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *PrepareCustomRuntimeNull) Reset() {
	*x = PrepareCustomRuntimeNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareCustomRuntimeNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareCustomRuntimeNull) ProtoMessage() {}

func (x *PrepareCustomRuntimeNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareCustomRuntimeNull.ProtoReflect.Descriptor instead.
func (*PrepareCustomRuntimeNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{109}
}

func (x *PrepareCustomRuntimeNull) GetValue() *PrepareCustomRuntime {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PrepareCustomRuntimeNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type StringNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool   `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *StringNull) Reset() {
	*x = StringNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringNull) ProtoMessage() {}

func (x *StringNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringNull.ProtoReflect.Descriptor instead.
func (*StringNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{110}
}

func (x *StringNull) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *StringNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type TimestampNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *Timestamp `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool       `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *TimestampNull) Reset() {
	*x = TimestampNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampNull) ProtoMessage() {}

func (x *TimestampNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampNull.ProtoReflect.Descriptor instead.
func (*TimestampNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{111}
}

func (x *TimestampNull) GetValue() *Timestamp {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TimestampNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type UserAvatarNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *UserAvatar `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool        `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *UserAvatarNull) Reset() {
	*x = UserAvatarNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAvatarNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAvatarNull) ProtoMessage() {}

func (x *UserAvatarNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAvatarNull.ProtoReflect.Descriptor instead.
func (*UserAvatarNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{112}
}

func (x *UserAvatarNull) GetValue() *UserAvatar {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UserAvatarNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type UserJsonObjectNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *UserJsonObject `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool            `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *UserJsonObjectNull) Reset() {
	*x = UserJsonObjectNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserJsonObjectNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserJsonObjectNull) ProtoMessage() {}

func (x *UserJsonObjectNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserJsonObjectNull.ProtoReflect.Descriptor instead.
func (*UserJsonObjectNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{113}
}

func (x *UserJsonObjectNull) GetValue() *UserJsonObject {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UserJsonObjectNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type VerticalAutoscalingNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *VerticalAutoscaling `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Valid bool                 `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (x *VerticalAutoscalingNull) Reset() {
	*x = VerticalAutoscalingNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsApiProtocol_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerticalAutoscalingNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerticalAutoscalingNull) ProtoMessage() {}

func (x *VerticalAutoscalingNull) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsApiProtocol_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerticalAutoscalingNull.ProtoReflect.Descriptor instead.
func (*VerticalAutoscalingNull) Descriptor() ([]byte, []int) {
	return file_zeropsApiProtocol_proto_rawDescGZIP(), []int{114}
}

func (x *VerticalAutoscalingNull) GetValue() *VerticalAutoscaling {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *VerticalAutoscalingNull) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

var File_zeropsApiProtocol_proto protoreflect.FileDescriptor

var file_zeropsApiProtocol_proto_rawDesc = []byte{
	0x0a, 0x17, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x70, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x39,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x5a, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x53, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b,
	0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x14, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x7b, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x4a, 0x0a, 0x18, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0xcf, 0x01, 0x0a, 0x1c,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x73,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x73, 0x73, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x51, 0x0a,
	0x1d, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x79, 0x61, 0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c,
	0x22, 0x51, 0x0a, 0x15, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x22, 0x6f, 0x0a, 0x1d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x22, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x1a,
	0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x50, 0x75, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x50, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x1d, 0x50,
	0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x1b,
	0x50, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x1a, 0x50,
	0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x9e, 0x08, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c,
	0x6c, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49,
	0x64, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x5d, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x41,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x56, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c,
	0x6c, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x54, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xa3, 0x08, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75,
	0x6c, 0x6c, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f,
	0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x5d, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12,
	0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x50,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x56, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75,
	0x6c, 0x6c, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x54, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x01, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x9b, 0x08, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5d, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a,
	0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c,
	0x6c, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x45,
	0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x08, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x54, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x5f,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x3f,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22,
	0xa2, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0xf9, 0x10, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x6a, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x6e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x5f, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x4a, 0x73, 0x6f,
	0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x40, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x67, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a,
	0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x68, 0x61,
	0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x68,
	0x61, 0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x4e, 0x0a, 0x22, 0x68, 0x61, 0x73, 0x55,
	0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65,
	0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x68, 0x61, 0x73, 0x55,
	0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x68,
	0x61, 0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x61,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x68, 0x61, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x68, 0x61,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x68, 0x61, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x69, 0x0a, 0x1c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x1c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x1c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75,
	0x6c, 0x6c, 0x52, 0x1c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xae, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0xff, 0x10, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x73,
	0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x5f, 0x0a, 0x11, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x11, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x11,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73,
	0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x67, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x5b, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x10, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a,
	0x19, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x19, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x4e, 0x0a, 0x22, 0x68,
	0x61, 0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x73, 0x79,
	0x6e, 0x63, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x68,
	0x61, 0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x68, 0x61, 0x73, 0x55, 0x6e, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3e, 0x0a,
	0x1a, 0x68, 0x61, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x68, 0x61, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a,
	0x1a, 0x68, 0x61, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x68, 0x61, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x69, 0x0a,
	0x1c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x1c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x1c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x1c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0xfd, 0x05, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x55, 0x0a, 0x12, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x12,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0b,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x53, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x73, 0x53, 0x65, 0x74,
	0x22, 0xa0, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0xb0, 0x04, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x52, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0xa6, 0x01, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0xbb, 0x01, 0x0a, 0x1c, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x5b, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x22, 0xae, 0x01,
	0x0a, 0x1d, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x98,
	0x04, 0x0a, 0x20, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x73, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x73, 0x73, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4d, 0x0a,
	0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53,
	0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x64, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x6e, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x22, 0xb0, 0x01, 0x0a, 0x1e, 0x50, 0x6f,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xc0, 0x01, 0x0a,
	0x21, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44,
	0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x22,
	0xa0, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x7c, 0x0a, 0x19, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x22, 0xba, 0x01, 0x0a, 0x23, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x5a, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xac, 0x08,
	0x0a, 0x26, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75,
	0x6c, 0x6c, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f,
	0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x5d, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12,
	0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x50,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x56, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75,
	0x6c, 0x6c, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x54, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x01, 0x0a,
	0x1b, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74,
	0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xa4, 0x08, 0x0a, 0x1e, 0x50, 0x75,
	0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x5d, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73,
	0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x54, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xa2, 0x01, 0x0a, 0x17, 0x50, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xa0, 0x08, 0x0a, 0x1a, 0x50, 0x75, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4e,
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x4c,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5d, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0e,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x45, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x08,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x54, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x73,
	0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x16, 0x50, 0x75, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x9f, 0x08, 0x0a, 0x19,
	0x50, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73,
	0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x5d, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73,
	0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x50, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x54, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c,
	0x6c, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x01,
	0x0a, 0x1e, 0x50, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0xa7, 0x08, 0x0a, 0x21, 0x50, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x12, 0x4c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5d,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x41, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x56,
	0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x43,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x54, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x1c, 0x50,
	0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74,
	0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xa5, 0x08, 0x0a, 0x1f, 0x50, 0x75,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5d, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a,
	0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c,
	0x6c, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x54, 0x0a, 0x0a, 0x61,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x1b, 0x50, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xa4,
	0x08, 0x0a, 0x1e, 0x50, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x74,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x5d, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a,
	0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c,
	0x6c, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x45,
	0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x08, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x54, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x06, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x64, 0x0a,
	0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x51, 0x0a, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x16, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x47, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75,
	0x6c, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x73,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x22, 0xe7, 0x02, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52,
	0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x75, 0x73, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x73,
	0x68, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x74,
	0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe7, 0x02,
	0x0a, 0x1b, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x40, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a,
	0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x73, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x07,
	0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x09, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x45, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75, 0x6c, 0x6c, 0x52,
	0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x68, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x14, 0x70, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x69, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x11, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x11, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a,
	0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52,
	0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x63, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x69, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x53, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7e, 0x0a, 0x12, 0x41, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x0c, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x4e, 0x0a, 0x0e, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x54, 0x0a, 0x11, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c,
	0x22, 0xbb, 0x02, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c,
	0x6c, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x09, 0x76, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x09, 0x76, 0x61, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xed,
	0x02, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x4f, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x06, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xe7,
	0x01, 0x0a, 0x11, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x56,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x13, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x6b, 0x0a, 0x15, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74,
	0x61, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c,
	0x6c, 0x52, 0x15, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x90, 0x03, 0x0a, 0x11, 0x47, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0a,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75,
	0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x22, 0x90, 0x03, 0x0a, 0x11,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x46, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x22, 0x73,
	0x0a, 0x15, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x18, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x14, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x16, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x47,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x8d, 0x08, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x5d, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73,
	0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0e, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x54, 0x0a, 0x0a, 0x61, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x84, 0x05, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x56, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49,
	0x70, 0x56, 0x34, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x56,
	0x36, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52,
	0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x56, 0x36, 0x12, 0x58, 0x0a, 0x13, 0x7a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x53, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f,
	0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x13, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x53, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x22, 0xbf, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xfd, 0x02, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x87, 0x03, 0x0a, 0x16, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c,
	0x6c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x17, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x69, 0x0a, 0x0e, 0x64, 0x6e, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x6e, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x64, 0x6e, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5a, 0x0a, 0x09, 0x73, 0x73,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x53, 0x73, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x73, 0x73, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x19, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x4f, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x22, 0x79, 0x0a, 0x0f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x43, 0x6f,
	0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x47, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x69, 0x73, 0x6b, 0x47, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x64, 0x69, 0x73, 0x6b, 0x47, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x21,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x12, 0x51, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x70, 0x0a, 0x18, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x1b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xca, 0x05,
	0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x6a, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x6e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x5f, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x11, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41,
	0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0xc4, 0x04, 0x0a, 0x1b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x08, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x14, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x22, 0x82, 0x02, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x4e, 0x0a, 0x0e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x0e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x4e, 0x0a, 0x0e, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x0e, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x54, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6c, 0x6c, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x22, 0xc1, 0x04, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x45, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x22, 0x98, 0x03, 0x0a, 0x0e, 0x55,
	0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x42, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f,
	0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75,
	0x6c, 0x6c, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a,
	0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x42, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x06, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0xcb, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x42, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x52, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x0b, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x6e, 0x0a, 0x13, 0x41, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x75, 0x6c, 0x6c,
	0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x1f, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x4d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x1f, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x78, 0x0a, 0x18, 0x41,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x73,
	0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x1d, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x47, 0x69, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x47, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x10, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x3e,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x15, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x43, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6c,
	0x6c, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x15,
	0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x43, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x22, 0x7a, 0x0a, 0x19, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x47, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x09,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x78, 0x0a, 0x18, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x75, 0x6c,
	0x6c, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22,
	0x38, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x0d, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x64, 0x0a,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x12,
	0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x22, 0x76, 0x0a, 0x17, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74,
	0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x45, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2a, 0xf4, 0x5a, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xc6, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1b,
	0x0a, 0x17, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45, 0x53, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x27,
	0x0a, 0x23, 0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x52,
	0x41, 0x55, 0x44, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x5f, 0x43, 0x41,
	0x50, 0x54, 0x43, 0x48, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x4f, 0x57, 0x4e,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0a, 0x12,
	0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x0b, 0x12,
	0x20, 0x0a, 0x1c, 0x4e, 0x4f, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x53, 0x5f, 0x54, 0x4f, 0x5f,
	0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x0d, 0x12,
	0x22, 0x0a, 0x1e, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x14, 0x41, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f,
	0x4f, 0x4e, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0xbf, 0x01, 0x12, 0x38,
	0x0a, 0x34, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x55,
	0x53, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f,
	0x54, 0x4f, 0x5f, 0x41, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53, 0x10,
	0x10, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x8e, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x41,
	0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10,
	0x8d, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x4e,
	0x59, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x12, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x4f,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x15, 0x12,
	0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x5f,
	0x5a, 0x45, 0x52, 0x4f, 0x50, 0x53, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x17, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x19, 0x12,
	0x1a, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x10, 0x98, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x44,
	0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x1a, 0x12, 0x20, 0x0a, 0x1b, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0xce, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x1b, 0x12, 0x19, 0x0a, 0x15,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1c, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x1d, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0xb4, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x1e, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x4b, 0x45, 0x59, 0x10, 0x1f, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x20, 0x12, 0x1f, 0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0xa8, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xe3, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x22, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x45, 0x4d,
	0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x23, 0x12, 0x34, 0x0a, 0x30, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x24, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x25, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x26, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x27, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x10, 0x28, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f,
	0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x10, 0x29, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x2a, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x2b, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x58,
	0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x2c,
	0x12, 0x27, 0x0a, 0x23, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x49, 0x4e, 0x5f, 0x42, 0x45, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x2d, 0x12, 0x25, 0x0a, 0x21, 0x55, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x59, 0x4f,
	0x55, 0x52, 0x5f, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x2e,
	0x12, 0x24, 0x0a, 0x20, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x2f, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x48, 0x41, 0x53, 0x5f, 0x42, 0x45, 0x45, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x30, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x41, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x31, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x32, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x42, 0x45, 0x45, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x33, 0x12, 0x16,
	0x0a, 0x12, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41,
	0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x35, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x36, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x37,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x38, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x44, 0x49,
	0x54, 0x10, 0x39, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x3d,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x3e, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x3f, 0x12, 0x2c, 0x0a, 0x28,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x40, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x41, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x42, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x49, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x43, 0x12, 0x29,
	0x0a, 0x25, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x49, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x44, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x45, 0x12, 0x38, 0x0a, 0x34, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x46, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x49,
	0x53, 0x4b, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x47, 0x12, 0x28,
	0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x4d, 0x49, 0x4e,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x48, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x49, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x99, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x4a, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x42,
	0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x4b, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x4c, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45,
	0x4e, 0x10, 0xf2, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x54,
	0x4f, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x4d, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10, 0x4e, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x4f, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x4e, 0x47, 0x49, 0x4e, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10,
	0xc2, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x53, 0x55, 0x42, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x51, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0xb2, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0xb3, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x10, 0xcb, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x89, 0x02,
	0x12, 0x24, 0x0a, 0x1f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x9a, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x9b, 0x02, 0x12, 0x34, 0x0a, 0x2f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x9c, 0x02,
	0x12, 0x37, 0x0a, 0x32, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x53, 0x5f, 0x46, 0x4f, 0x52,
	0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0xc9, 0x02, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0xc8, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x52, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x53, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x55, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x57, 0x12, 0x39, 0x0a, 0x34, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10,
	0xc3, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x50,
	0x41, 0x49, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x3b, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x10, 0x3c, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x4f,
	0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x41,
	0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x3a, 0x12, 0x2a, 0x0a,
	0x26, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x58, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52,
	0x44, 0x10, 0x59, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x5a, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x5b, 0x12, 0x1a, 0x0a, 0x15,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0xa7, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55,
	0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x5c, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x5d, 0x12, 0x2d, 0x0a, 0x29,
	0x43, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x5e, 0x12, 0x39, 0x0a, 0x35, 0x4c,
	0x37, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x5f, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x57, 0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x60, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x57,
	0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x80,
	0x02, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x57, 0x49, 0x4c,
	0x4c, 0x5f, 0x42, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x81, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x57, 0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x61, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x57,
	0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x9e,
	0x02, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x57, 0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x45, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x9f, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x57, 0x49, 0x4c, 0x4c, 0x5f, 0x42, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x45, 0x44, 0x10,
	0xa0, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x62, 0x12, 0x34, 0x0a, 0x30, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x54, 0x5f,
	0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x63, 0x12, 0x2d, 0x0a, 0x29, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x64, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4c, 0x4c,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0x65, 0x12, 0x40, 0x0a, 0x3c, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x55,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x66, 0x12, 0x3d, 0x0a, 0x39, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41,
	0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x67, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x53, 0x10, 0x68, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x69, 0x12, 0x27,
	0x0a, 0x23, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x6a, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x6b, 0x12, 0x30,
	0x0a, 0x2c, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x4f,
	0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x51, 0x44, 0x4e, 0x10, 0x6c,
	0x12, 0x24, 0x0a, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x46, 0x41, 0x4c, 0x4c,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0x6d, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x6e, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x10, 0x6f, 0x12, 0x3c, 0x0a, 0x38, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x70, 0x12, 0x3c, 0x0a, 0x38, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x71, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f,
	0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x72, 0x12, 0x3b, 0x0a, 0x37, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x10,
	0x73, 0x12, 0x3a, 0x0a, 0x35, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44,
	0x45, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x50, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x44, 0x4f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x53, 0x55, 0x46, 0x46, 0x49, 0x58, 0x10, 0xc7, 0x02, 0x12, 0x2f, 0x0a,
	0x2b, 0x4e, 0x4f, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x5f, 0x4c, 0x37, 0x5f, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x49, 0x4e, 0x47, 0x10, 0x74, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x53, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x75, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x76, 0x12,
	0x25, 0x0a, 0x21, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x53, 0x55, 0x46, 0x46, 0x49, 0x58,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x77, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x78, 0x12, 0x24,
	0x0a, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x79, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0xa9, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x7a, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x7b, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x7c, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x44,
	0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d,
	0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x7d, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x7e, 0x12, 0x1f, 0x0a,
	0x1a, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x80, 0x01, 0x12, 0x26,
	0x0a, 0x21, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x82, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x83, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x84, 0x01, 0x12, 0x21, 0x0a, 0x1c,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x85, 0x01, 0x12,
	0x30, 0x0a, 0x2b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x86,
	0x01, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x87, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x55, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0xb5, 0x01, 0x12, 0x25, 0x0a,
	0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x88, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x49, 0x50, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x89, 0x01,
	0x12, 0x31, 0x0a, 0x2c, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x57, 0x41, 0x4c, 0x4c,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54,
	0x10, 0x8a, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0xaa, 0x01, 0x12, 0x36,
	0x0a, 0x31, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f,
	0x45, 0x44, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x10, 0x8b, 0x01, 0x12, 0x3f, 0x0a, 0x3a, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0xbe, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x44, 0x52, 0x49, 0x56, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x8c, 0x01, 0x12, 0x27,
	0x0a, 0x22, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x43, 0x4b, 0x10, 0x8d, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x44, 0x52, 0x49, 0x56, 0x45,
	0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x8e, 0x01,
	0x12, 0x2a, 0x0a, 0x25, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x8f, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x90, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x91, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x92, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x93, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x94, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x4e, 0x47,
	0x54, 0x48, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x95, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x96, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x97, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x4d, 0x41, 0x58, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x45,
	0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x98, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0xe2, 0x01, 0x12,
	0x20, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xb6,
	0x02, 0x12, 0x22, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x53, 0x5f, 0x42, 0x45, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x45, 0x44, 0x10, 0xc4, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x42, 0x45, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x55,
	0x49, 0x4c, 0x54, 0x10, 0xc5, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x49,
	0x4e, 0x47, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x45, 0x44, 0x10, 0xc6, 0x01, 0x12, 0x21,
	0x0a, 0x1c, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45,
	0x50, 0x4c, 0x4f, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xc7,
	0x01, 0x12, 0x20, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0xc8, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x59, 0x41, 0x4d, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0xe1, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x41, 0x50, 0x50, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x59, 0x41, 0x4d, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xc4, 0x02, 0x12, 0x23,
	0x0a, 0x1e, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x9d, 0x02, 0x12, 0x2b, 0x0a, 0x26, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0xb2, 0x02,
	0x12, 0x1d, 0x0a, 0x18, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x99, 0x01, 0x12,
	0x23, 0x0a, 0x1e, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x10, 0x9a, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x9b, 0x01, 0x12, 0x24, 0x0a,
	0x1f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x10, 0x9c, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x9d, 0x01, 0x12, 0x2f, 0x0a,
	0x2a, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x9e, 0x01, 0x12, 0x2c,
	0x0a, 0x27, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x9f, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x49, 0x44, 0x53, 0x10, 0xa0, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x54, 0x41, 0x54,
	0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xab,
	0x01, 0x12, 0x2f, 0x0a, 0x2a, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0xc0, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xac, 0x01, 0x12,
	0x2d, 0x0a, 0x28, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xad, 0x01, 0x12, 0x34,
	0x0a, 0x2f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0xae, 0x01, 0x12, 0x2f, 0x0a, 0x2a, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x48, 0x49, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x45, 0x44, 0x10, 0xc1, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x92, 0x02, 0x12, 0x38,
	0x0a, 0x33, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x45, 0x49, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x96, 0x02, 0x12, 0x2d, 0x0a, 0x28, 0x53, 0x54, 0x41, 0x54,
	0x53, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x94, 0x02, 0x12, 0x2b, 0x0a, 0x26, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x84, 0x02, 0x12, 0x33, 0x0a, 0x2e, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x85, 0x02, 0x12, 0x2b, 0x0a, 0x26, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x91, 0x02, 0x12, 0x30, 0x0a, 0x2b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x86, 0x02, 0x12, 0x2f, 0x0a, 0x2a, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x45,
	0x41, 0x52, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x87, 0x02, 0x12, 0x3c, 0x0a, 0x37, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x45, 0x49, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x95, 0x02, 0x12, 0x31, 0x0a, 0x2c, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x90, 0x02, 0x12, 0x41, 0x0a, 0x3c, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x42, 0x49, 0x54, 0x5f,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5a, 0x4f,
	0x4e, 0x45, 0x53, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x10, 0xac, 0x02, 0x12, 0x2e, 0x0a,
	0x29, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x42,
	0x49, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0xad, 0x02, 0x12, 0x2c, 0x0a,
	0x27, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x42,
	0x49, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x8f, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x47,
	0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xbc, 0x01, 0x12, 0x20, 0x0a,
	0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xb6, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xb7, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x47,
	0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xb8, 0x01, 0x12,
	0x21, 0x0a, 0x1c, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0xb9, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x4e, 0x4f, 0x5f,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0xba, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x47, 0x49, 0x54, 0x48, 0x55,
	0x42, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xbb, 0x01, 0x12,
	0x1f, 0x0a, 0x1a, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xbd, 0x01,
	0x12, 0x28, 0x0a, 0x23, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x4e, 0x4f, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xce, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x42, 0x52,
	0x41, 0x4e, 0x43, 0x48, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52,
	0x45, 0x44, 0x10, 0xcf, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x53, 0x5f,
	0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x8c, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0xd0, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xd1, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xd2, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x47,
	0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xd3, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x47, 0x49, 0x54, 0x48,
	0x55, 0x42, 0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0xd4, 0x01,
	0x12, 0x24, 0x0a, 0x1f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x47,
	0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0xda, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x5a, 0x45, 0x52, 0x4f, 0x50, 0x53,
	0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xdb, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x49, 0x4e, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x53, 0x45,
	0x43, 0x52, 0x45, 0x54, 0x10, 0xd5, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x55, 0x4e, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xd6, 0x01, 0x12, 0x35, 0x0a, 0x30,
	0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x10, 0xd7, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4e, 0x45, 0x57,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0xd8, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x50, 0x55,
	0x53, 0x48, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x10, 0xd9, 0x01, 0x12, 0x20, 0x0a,
	0x1b, 0x5a, 0x45, 0x52, 0x4f, 0x50, 0x53, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0xcc, 0x01, 0x12,
	0x21, 0x0a, 0x1c, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10,
	0xcd, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x57, 0x52, 0x4f,
	0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0xdc,
	0x01, 0x12, 0x23, 0x0a, 0x1e, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x57, 0x45, 0x42, 0x48,
	0x4f, 0x4f, 0x4b, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0xdd, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52,
	0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45,
	0x4e, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xde, 0x01, 0x12,
	0x1b, 0x0a, 0x16, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0xdf, 0x01, 0x12, 0x21, 0x0a, 0x1c,
	0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xe0, 0x01, 0x12,
	0x1f, 0x0a, 0x1a, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0xe4, 0x01,
	0x12, 0x20, 0x0a, 0x1b, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10,
	0xe5, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x49,
	0x54, 0x4c, 0x41, 0x42, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xe6, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xe7, 0x01,
	0x12, 0x22, 0x0a, 0x1d, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f,
	0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0xe8, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xe9, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x41, 0x52, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45,
	0x4e, 0x10, 0xea, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x42,
	0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xeb, 0x01,
	0x12, 0x1b, 0x0a, 0x16, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f,
	0x4f, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xec, 0x01, 0x12, 0x26, 0x0a,
	0x21, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x53, 0x10, 0xed, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xee, 0x01, 0x12,
	0x18, 0x0a, 0x13, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49,
	0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x10, 0xef, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x59, 0x41, 0x4d,
	0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0xf0, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x59, 0x41, 0x4d, 0x4c, 0x5f,
	0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0xf1, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x56, 0x41, 0x54, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x55, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x10, 0xfe, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x4f, 0x4d,
	0x50, 0x41, 0x4e, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x55, 0x10, 0x82, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x56, 0x41, 0x54, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xf4, 0x01,
	0x12, 0x18, 0x0a, 0x13, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0xf5, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x44, 0x55,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x41, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0xfa, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0xae, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xaf, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x8a, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x52,
	0x45, 0x44, 0x49, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x45, 0x44, 0x10, 0xf6, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49,
	0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0xf7, 0x01, 0x12,
	0x18, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xf8, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0xf9, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d,
	0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x8b, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xfc, 0x01, 0x12, 0x16,
	0x0a, 0x11, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0xfd, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x41, 0x44, 0x44, 0x4f, 0x4e, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xff, 0x01, 0x12, 0x16, 0x0a, 0x11,
	0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x83, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x88, 0x02, 0x12,
	0x19, 0x0a, 0x14, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x97, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x59, 0x41, 0x4d, 0x4c, 0x10, 0xa1, 0x02, 0x12, 0x2c, 0x0a, 0x27,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x54,
	0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0xa2, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0xa7,
	0x02, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4d, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xa4, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10,
	0xa5, 0x02, 0x12, 0x32, 0x0a, 0x2d, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4d,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x10, 0xa6, 0x02, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0xa8, 0x02, 0x12, 0x23, 0x0a, 0x1e,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xa9,
	0x02, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4d, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x10, 0xaa, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x53, 0x43, 0x41,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xb5, 0x02, 0x12, 0x2d, 0x0a,
	0x28, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x50, 0x55, 0x5f,
	0x52, 0x41, 0x4d, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0xcf, 0x02, 0x12, 0x42, 0x0a, 0x3d,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x42,
	0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x48, 0x49, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0xb1, 0x02,
	0x12, 0x44, 0x0a, 0x3f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x54, 0x48, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x10, 0xb3, 0x02, 0x12, 0x3b, 0x0a, 0x36, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45,
	0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x10, 0xb4, 0x02, 0x12, 0x2d, 0x0a, 0x28, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f,
	0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x48, 0x49, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10,
	0xb7, 0x02, 0x12, 0x32, 0x0a, 0x2d, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x54, 0x48, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x10, 0xb8, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x59, 0x41, 0x4d, 0x4c, 0x5f, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x59, 0x41, 0x4d, 0x4c, 0x10, 0xb0, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x4e, 0x45,
	0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x59, 0x41, 0x4d, 0x4c, 0x5f, 0x45, 0x4e, 0x43,
	0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xc5, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x42, 0x55, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0xd0, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x33, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xd1, 0x02,
	0x12, 0x1a, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x41, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xa1, 0x01, 0x12, 0x1c, 0x0a, 0x17,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x57, 0x41, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xa2, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x41, 0x56, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x10, 0xa3, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x5a, 0x45,
	0x52, 0x4f, 0x50, 0x53, 0x10, 0xa4, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0xc3,
	0x01, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xc1, 0x02, 0x12, 0x17, 0x0a, 0x12,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f,
	0x4e, 0x47, 0x10, 0xc2, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0xbc, 0x02,
	0x12, 0x15, 0x0a, 0x10, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0xb9, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0xba, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x42, 0x4f,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0xbb, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x41, 0x4d, 0x42, 0x49, 0x47, 0x55, 0x4f, 0x55,
	0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0xca, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x41, 0x4d, 0x42,
	0x49, 0x47, 0x55, 0x4f, 0x55, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x5f, 0x49, 0x4e, 0x10, 0xcb, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0xbd,
	0x02, 0x12, 0x1a, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xc0, 0x02, 0x12, 0x1c, 0x0a,
	0x17, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0xbe, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xcd, 0x02,
	0x2a, 0xc6, 0x01, 0x0a, 0x24, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x31, 0x41, 0x50, 0x50,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x34, 0x0a, 0x30, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52,
	0x41, 0x4e, 0x43, 0x48, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x02, 0x2a, 0xc6, 0x01, 0x0a, 0x24, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x35, 0x0a, 0x31, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x34, 0x0a, 0x30, 0x41, 0x50, 0x50,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x01, 0x12,
	0x31, 0x0a, 0x2d, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47,
	0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x47,
	0x10, 0x02, 0x2a, 0xc4, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x50, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4c,
	0x49, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x55, 0x49, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10, 0x03, 0x12, 0x1d,
	0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x10, 0x04, 0x12, 0x1a, 0x0a,
	0x16, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x10, 0x05, 0x2a, 0xfe, 0x03, 0x0a, 0x10, 0x41, 0x70,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e,
	0x0a, 0x1a, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x28, 0x0a, 0x24, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x4f, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50,
	0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20,
	0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x05, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x06,
	0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x07, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x4f, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x50,
	0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12,
	0x28, 0x0a, 0x24, 0x41, 0x50, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0a, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x50, 0x50,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x50,
	0x50, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0c, 0x2a, 0x6b, 0x0a, 0x17, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x27,
	0x0a, 0x23, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x01, 0x2a, 0xc2, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x45, 0x49,
	0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x98, 0x01, 0x0a,
	0x1a, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x47,
	0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x01,
	0x12, 0x25, 0x0a, 0x21, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x02, 0x2a, 0x98, 0x01, 0x0a, 0x1a, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x28, 0x0a, 0x24, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x47,
	0x49, 0x54, 0x4c, 0x41, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x47,
	0x10, 0x02, 0x2a, 0xf6, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42,
	0x41, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x2a, 0x89, 0x02, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x16, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x2a, 0xf8, 0x02, 0x0a, 0x25, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x44, 0x6e, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x37, 0x0a, 0x33, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x44, 0x4e, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x37, 0x0a, 0x33, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x44, 0x4e, 0x53, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x38, 0x0a, 0x34, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x44, 0x4e, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x32, 0x0a,
	0x2e, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x44, 0x4e, 0x53, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10,
	0x03, 0x12, 0x36, 0x0a, 0x32, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x44, 0x4e, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x37, 0x0a, 0x33, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x44, 0x4e, 0x53, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44,
	0x10, 0x05, 0x2a, 0xf0, 0x02, 0x0a, 0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x73,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x2d, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x39,
	0x0a, 0x35, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x53, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x45, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x39, 0x0a, 0x35, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x44,
	0x4e, 0x53, 0x10, 0x03, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x48,
	0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x4d, 0x41,
	0x49, 0x4e, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x3d, 0x0a, 0x39, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4f,
	0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x76, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x1d,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x74, 0x63, 0x70, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x75, 0x64, 0x70, 0x10, 0x02, 0x2a, 0xac, 0x03,
	0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x74, 0x63, 0x70, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x75, 0x64, 0x70, 0x10, 0x02, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x4d, 0x45, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x73, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x4d, 0x45, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d,
	0x45, 0x5f, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45,
	0x5f, 0x75, 0x64, 0x70, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x4d, 0x45, 0x5f, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x64, 0x62, 0x10, 0x09, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x4d, 0x45, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x71, 0x6c, 0x10,
	0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x61, 0x6d, 0x71, 0x70, 0x10, 0x0b, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x73, 0x74, 0x6f, 0x6d, 0x70, 0x10, 0x0c, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x4d, 0x45, 0x5f, 0x6d, 0x71, 0x74, 0x74, 0x10, 0x0d, 0x2a, 0xd3, 0x01, 0x0a,
	0x1c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a,
	0x27, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x2a, 0x6c, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x41, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x48, 0x41, 0x10, 0x02,
	0x2a, 0xdc, 0x0b, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x1d, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x0d, 0x12, 0x28,
	0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x54, 0x4f, 0x5f,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x10, 0x0e, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x12, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x23, 0x12, 0x29, 0x0a, 0x25,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x15, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x16, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x17, 0x12, 0x2b, 0x0a, 0x27,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x18, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x19, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0f,
	0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x24, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x10, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x1c, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x41, 0x49, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x11, 0x12,
	0x31, 0x0a, 0x2d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x13, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x45, 0x52, 0x10, 0x14, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x1a, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x25, 0x12, 0x2e, 0x0a, 0x2a, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x41,
	0x49, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x26, 0x12, 0x22, 0x0a, 0x1e, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x41, 0x49, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x1e, 0x12,
	0x29, 0x0a, 0x25, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45,
	0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x1f, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49,
	0x4e, 0x45, 0x52, 0x10, 0x20, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x43,
	0x41, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x21, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x50, 0x41, 0x49, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x22, 0x2a,
	0xcd, 0x03, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x23,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x4c, 0x37, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x10, 0x02, 0x12, 0x28, 0x0a,
	0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x04, 0x12, 0x2e, 0x0a,
	0x2a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x2e, 0x0a,
	0x2a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x25, 0x0a,
	0x21, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x2f,
	0x0a, 0x2b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x52,
	0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x09, 0x2a,
	0x9a, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12,
	0x1b, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0x72, 0x0a, 0x0f,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02,
	0x2a, 0xbd, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x10, 0x04, 0x12, 0x1e,
	0x0a, 0x1a, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03,
	0x2a, 0x56, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17,
	0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x32, 0xdf, 0x13, 0x0a, 0x1a, 0x5a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x86, 0x01, 0x0a, 0x13, 0x50, 0x75, 0x74, 0x41,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12,
	0x36, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74,
	0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x9e, 0x01, 0x0a, 0x1b, 0x50, 0x75, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x12, 0x3e, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75,
	0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x41, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75,
	0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x41, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x77, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x30, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x80, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x0f, 0x50, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x32, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x77, 0x0a, 0x0e, 0x50, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f,
	0x70, 0x12, 0x31, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x75, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x15, 0x50, 0x6f, 0x73,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x38, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x7a,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x32, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x35, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x13, 0x50, 0x75,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x6f,
	0x70, 0x12, 0x36, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x50, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x37, 0x2e, 0x7a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8f,
	0x01, 0x0a, 0x16, 0x50, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x39, 0x2e, 0x7a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x8c, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8f, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x2e, 0x7a, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x77, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x2d,
	0x69, 0x6f, 0x2f, 0x7a, 0x63, 0x6c, 0x69, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x7a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zeropsApiProtocol_proto_rawDescOnce sync.Once
	file_zeropsApiProtocol_proto_rawDescData = file_zeropsApiProtocol_proto_rawDesc
)

func file_zeropsApiProtocol_proto_rawDescGZIP() []byte {
	file_zeropsApiProtocol_proto_rawDescOnce.Do(func() {
		file_zeropsApiProtocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_zeropsApiProtocol_proto_rawDescData)
	})
	return file_zeropsApiProtocol_proto_rawDescData
}

var file_zeropsApiProtocol_proto_enumTypes = make([]protoimpl.EnumInfo, 23)
var file_zeropsApiProtocol_proto_msgTypes = make([]protoimpl.MessageInfo, 115)
var file_zeropsApiProtocol_proto_goTypes = []interface{}{
	(ErrorCode)(0), // 0: zBusinessZeropsApiProtocol.ErrorCode
	(AppVersionGithubIntegrationEventType)(0),      // 1: zBusinessZeropsApiProtocol.AppVersionGithubIntegrationEventType
	(AppVersionGitlabIntegrationEventType)(0),      // 2: zBusinessZeropsApiProtocol.AppVersionGitlabIntegrationEventType
	(AppVersionSource)(0),                          // 3: zBusinessZeropsApiProtocol.AppVersionSource
	(AppVersionStatus)(0),                          // 4: zBusinessZeropsApiProtocol.AppVersionStatus
	(ClientUserLightRoleCode)(0),                   // 5: zBusinessZeropsApiProtocol.ClientUserLightRoleCode
	(ClientUserLightStatus)(0),                     // 6: zBusinessZeropsApiProtocol.ClientUserLightStatus
	(GithubIntegrationEventType)(0),                // 7: zBusinessZeropsApiProtocol.GithubIntegrationEventType
	(GitlabIntegrationEventType)(0),                // 8: zBusinessZeropsApiProtocol.GitlabIntegrationEventType
	(ProcessStatus)(0),                             // 9: zBusinessZeropsApiProtocol.ProcessStatus
	(ProjectStatus)(0),                             // 10: zBusinessZeropsApiProtocol.ProjectStatus
	(PublicHttpRoutingDomainDnsCheckStatus)(0),     // 11: zBusinessZeropsApiProtocol.PublicHttpRoutingDomainDnsCheckStatus
	(PublicHttpRoutingDomainSslStatus)(0),          // 12: zBusinessZeropsApiProtocol.PublicHttpRoutingDomainSslStatus
	(ServicePortProtocol)(0),                       // 13: zBusinessZeropsApiProtocol.ServicePortProtocol
	(ServicePortScheme)(0),                         // 14: zBusinessZeropsApiProtocol.ServicePortScheme
	(ServiceStackConnectionStatus)(0),              // 15: zBusinessZeropsApiProtocol.ServiceStackConnectionStatus
	(ServiceStackMode)(0),                          // 16: zBusinessZeropsApiProtocol.ServiceStackMode
	(ServiceStackStatus)(0),                        // 17: zBusinessZeropsApiProtocol.ServiceStackStatus
	(ServiceStackTypeCategory)(0),                  // 18: zBusinessZeropsApiProtocol.ServiceStackTypeCategory
	(UserDataType)(0),                              // 19: zBusinessZeropsApiProtocol.UserDataType
	(UserDataVersion)(0),                           // 20: zBusinessZeropsApiProtocol.UserDataVersion
	(UserJsonObjectType)(0),                        // 21: zBusinessZeropsApiProtocol.UserJsonObjectType
	(UserStatus)(0),                                // 22: zBusinessZeropsApiProtocol.UserStatus
	(*Error)(nil),                                  // 23: zBusinessZeropsApiProtocol.Error
	(*ErrorNull)(nil),                              // 24: zBusinessZeropsApiProtocol.ErrorNull
	(*Timestamp)(nil),                              // 25: zBusinessZeropsApiProtocol.Timestamp
	(*DeleteProjectRequest)(nil),                   // 26: zBusinessZeropsApiProtocol.DeleteProjectRequest
	(*DeleteServiceStackRequest)(nil),              // 27: zBusinessZeropsApiProtocol.DeleteServiceStackRequest
	(*GetProcessRequest)(nil),                      // 28: zBusinessZeropsApiProtocol.GetProcessRequest
	(*GetProjectsByNameRequest)(nil),               // 29: zBusinessZeropsApiProtocol.GetProjectsByNameRequest
	(*GetServiceStackRequest)(nil),                 // 30: zBusinessZeropsApiProtocol.GetServiceStackRequest
	(*GetServiceStackByNameRequest)(nil),           // 31: zBusinessZeropsApiProtocol.GetServiceStackByNameRequest
	(*GetUserInfoRequest)(nil),                     // 32: zBusinessZeropsApiProtocol.GetUserInfoRequest
	(*PostAppVersionRequest)(nil),                  // 33: zBusinessZeropsApiProtocol.PostAppVersionRequest
	(*PostProjectImportRequest)(nil),               // 34: zBusinessZeropsApiProtocol.PostProjectImportRequest
	(*PostPublicHttpRoutingRequest)(nil),           // 35: zBusinessZeropsApiProtocol.PostPublicHttpRoutingRequest
	(*PostServiceStackImportRequest)(nil),          // 36: zBusinessZeropsApiProtocol.PostServiceStackImportRequest
	(*PostVpnRequestRequest)(nil),                  // 37: zBusinessZeropsApiProtocol.PostVpnRequestRequest
	(*PublicHttpRoutingLocationPost)(nil),          // 38: zBusinessZeropsApiProtocol.PublicHttpRoutingLocationPost
	(*PutAppVersionBuildAndDeployRequest)(nil),     // 39: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployRequest
	(*PutAppVersionDeployRequest)(nil),             // 40: zBusinessZeropsApiProtocol.PutAppVersionDeployRequest
	(*PutProjectStartRequest)(nil),                 // 41: zBusinessZeropsApiProtocol.PutProjectStartRequest
	(*PutProjectStopRequest)(nil),                  // 42: zBusinessZeropsApiProtocol.PutProjectStopRequest
	(*PutServiceStackRestartRequest)(nil),          // 43: zBusinessZeropsApiProtocol.PutServiceStackRestartRequest
	(*PutServiceStackStartRequest)(nil),            // 44: zBusinessZeropsApiProtocol.PutServiceStackStartRequest
	(*PutServiceStackStopRequest)(nil),             // 45: zBusinessZeropsApiProtocol.PutServiceStackStopRequest
	(*DeleteProjectResponse)(nil),                  // 46: zBusinessZeropsApiProtocol.DeleteProjectResponse
	(*DeleteProjectResponseDto)(nil),               // 47: zBusinessZeropsApiProtocol.DeleteProjectResponseDto
	(*DeleteServiceStackResponse)(nil),             // 48: zBusinessZeropsApiProtocol.DeleteServiceStackResponse
	(*DeleteServiceStackResponseDto)(nil),          // 49: zBusinessZeropsApiProtocol.DeleteServiceStackResponseDto
	(*GetProcessResponse)(nil),                     // 50: zBusinessZeropsApiProtocol.GetProcessResponse
	(*GetProcessResponseDto)(nil),                  // 51: zBusinessZeropsApiProtocol.GetProcessResponseDto
	(*GetProjectsByNameResponse)(nil),              // 52: zBusinessZeropsApiProtocol.GetProjectsByNameResponse
	(*GetProjectsByNameResponseDto)(nil),           // 53: zBusinessZeropsApiProtocol.GetProjectsByNameResponseDto
	(*GetServiceStackResponse)(nil),                // 54: zBusinessZeropsApiProtocol.GetServiceStackResponse
	(*GetServiceStackResponseDto)(nil),             // 55: zBusinessZeropsApiProtocol.GetServiceStackResponseDto
	(*GetServiceStackByNameResponse)(nil),          // 56: zBusinessZeropsApiProtocol.GetServiceStackByNameResponse
	(*GetServiceStackByNameResponseDto)(nil),       // 57: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto
	(*GetUserInfoResponse)(nil),                    // 58: zBusinessZeropsApiProtocol.GetUserInfoResponse
	(*GetUserInfoResponseDto)(nil),                 // 59: zBusinessZeropsApiProtocol.GetUserInfoResponseDto
	(*PostAppVersionResponse)(nil),                 // 60: zBusinessZeropsApiProtocol.PostAppVersionResponse
	(*PostAppVersionResponseDto)(nil),              // 61: zBusinessZeropsApiProtocol.PostAppVersionResponseDto
	(*PostProjectImportResponse)(nil),              // 62: zBusinessZeropsApiProtocol.PostProjectImportResponse
	(*PostProjectImportResponseDto)(nil),           // 63: zBusinessZeropsApiProtocol.PostProjectImportResponseDto
	(*PostPublicHttpRoutingResponse)(nil),          // 64: zBusinessZeropsApiProtocol.PostPublicHttpRoutingResponse
	(*PostPublicHttpRoutingResponseDto)(nil),       // 65: zBusinessZeropsApiProtocol.PostPublicHttpRoutingResponseDto
	(*PostServiceStackImportResponse)(nil),         // 66: zBusinessZeropsApiProtocol.PostServiceStackImportResponse
	(*PostServiceStackImportResponseDto)(nil),      // 67: zBusinessZeropsApiProtocol.PostServiceStackImportResponseDto
	(*PostVpnRequestResponse)(nil),                 // 68: zBusinessZeropsApiProtocol.PostVpnRequestResponse
	(*PostVpnRequestResponseDto)(nil),              // 69: zBusinessZeropsApiProtocol.PostVpnRequestResponseDto
	(*PutAppVersionBuildAndDeployResponse)(nil),    // 70: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponse
	(*PutAppVersionBuildAndDeployResponseDto)(nil), // 71: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponseDto
	(*PutAppVersionDeployResponse)(nil),            // 72: zBusinessZeropsApiProtocol.PutAppVersionDeployResponse
	(*PutAppVersionDeployResponseDto)(nil),         // 73: zBusinessZeropsApiProtocol.PutAppVersionDeployResponseDto
	(*PutProjectStartResponse)(nil),                // 74: zBusinessZeropsApiProtocol.PutProjectStartResponse
	(*PutProjectStartResponseDto)(nil),             // 75: zBusinessZeropsApiProtocol.PutProjectStartResponseDto
	(*PutProjectStopResponse)(nil),                 // 76: zBusinessZeropsApiProtocol.PutProjectStopResponse
	(*PutProjectStopResponseDto)(nil),              // 77: zBusinessZeropsApiProtocol.PutProjectStopResponseDto
	(*PutServiceStackRestartResponse)(nil),         // 78: zBusinessZeropsApiProtocol.PutServiceStackRestartResponse
	(*PutServiceStackRestartResponseDto)(nil),      // 79: zBusinessZeropsApiProtocol.PutServiceStackRestartResponseDto
	(*PutServiceStackStartResponse)(nil),           // 80: zBusinessZeropsApiProtocol.PutServiceStackStartResponse
	(*PutServiceStackStartResponseDto)(nil),        // 81: zBusinessZeropsApiProtocol.PutServiceStackStartResponseDto
	(*PutServiceStackStopResponse)(nil),            // 82: zBusinessZeropsApiProtocol.PutServiceStackStopResponse
	(*PutServiceStackStopResponseDto)(nil),         // 83: zBusinessZeropsApiProtocol.PutServiceStackStopResponseDto
	(*AppVersionBuild)(nil),                        // 84: zBusinessZeropsApiProtocol.AppVersionBuild
	(*AppVersionGithubIntegration)(nil),            // 85: zBusinessZeropsApiProtocol.AppVersionGithubIntegration
	(*AppVersionGitlabIntegration)(nil),            // 86: zBusinessZeropsApiProtocol.AppVersionGitlabIntegration
	(*AppVersionJsonObject)(nil),                   // 87: zBusinessZeropsApiProtocol.AppVersionJsonObject
	(*AppVersionLight)(nil),                        // 88: zBusinessZeropsApiProtocol.AppVersionLight
	(*AppVersionPublicGitSource)(nil),              // 89: zBusinessZeropsApiProtocol.AppVersionPublicGitSource
	(*AppVersionUserData)(nil),                     // 90: zBusinessZeropsApiProtocol.AppVersionUserData
	(*ClientAvatar)(nil),                           // 91: zBusinessZeropsApiProtocol.ClientAvatar
	(*ClientExtra)(nil),                            // 92: zBusinessZeropsApiProtocol.ClientExtra
	(*ClientUserExtra)(nil),                        // 93: zBusinessZeropsApiProtocol.ClientUserExtra
	(*CustomAutoscaling)(nil),                      // 94: zBusinessZeropsApiProtocol.CustomAutoscaling
	(*GithubIntegration)(nil),                      // 95: zBusinessZeropsApiProtocol.GithubIntegration
	(*GitlabIntegration)(nil),                      // 96: zBusinessZeropsApiProtocol.GitlabIntegration
	(*HorizontalAutoscaling)(nil),                  // 97: zBusinessZeropsApiProtocol.HorizontalAutoscaling
	(*Language)(nil),                               // 98: zBusinessZeropsApiProtocol.Language
	(*LocationServiceStackInfo)(nil),               // 99: zBusinessZeropsApiProtocol.LocationServiceStackInfo
	(*PrepareCustomRuntime)(nil),                   // 100: zBusinessZeropsApiProtocol.PrepareCustomRuntime
	(*Process)(nil),                                // 101: zBusinessZeropsApiProtocol.Process
	(*Project)(nil),                                // 102: zBusinessZeropsApiProtocol.Project
	(*ProjectImportServiceStack)(nil),              // 103: zBusinessZeropsApiProtocol.ProjectImportServiceStack
	(*ProjectLight)(nil),                           // 104: zBusinessZeropsApiProtocol.ProjectLight
	(*ProjectLightJsonObject)(nil),                 // 105: zBusinessZeropsApiProtocol.ProjectLightJsonObject
	(*PublicHttpRoutingDomain)(nil),                // 106: zBusinessZeropsApiProtocol.PublicHttpRoutingDomain
	(*PublicHttpRoutingLocation)(nil),              // 107: zBusinessZeropsApiProtocol.PublicHttpRoutingLocation
	(*RequestedPortsJsonObject)(nil),               // 108: zBusinessZeropsApiProtocol.RequestedPortsJsonObject
	(*ScalingResource)(nil),                        // 109: zBusinessZeropsApiProtocol.ScalingResource
	(*ServicePort)(nil),                            // 110: zBusinessZeropsApiProtocol.ServicePort
	(*ServiceStackConnectedServiceStack)(nil),      // 111: zBusinessZeropsApiProtocol.ServiceStackConnectedServiceStack
	(*ServiceStackInfoJsonObject)(nil),             // 112: zBusinessZeropsApiProtocol.ServiceStackInfoJsonObject
	(*ServiceStackLight)(nil),                      // 113: zBusinessZeropsApiProtocol.ServiceStackLight
	(*ServiceStackLightJsonObject)(nil),            // 114: zBusinessZeropsApiProtocol.ServiceStackLightJsonObject
	(*UserAvatar)(nil),                             // 115: zBusinessZeropsApiProtocol.UserAvatar
	(*UserDataLight)(nil),                          // 116: zBusinessZeropsApiProtocol.UserDataLight
	(*UserJsonObject)(nil),                         // 117: zBusinessZeropsApiProtocol.UserJsonObject
	(*UserLight)(nil),                              // 118: zBusinessZeropsApiProtocol.UserLight
	(*VerticalAutoscaling)(nil),                    // 119: zBusinessZeropsApiProtocol.VerticalAutoscaling
	(*AppVersionBuildNull)(nil),                    // 120: zBusinessZeropsApiProtocol.AppVersionBuildNull
	(*AppVersionGithubIntegrationNull)(nil),        // 121: zBusinessZeropsApiProtocol.AppVersionGithubIntegrationNull
	(*AppVersionGitlabIntegrationNull)(nil),        // 122: zBusinessZeropsApiProtocol.AppVersionGitlabIntegrationNull
	(*AppVersionJsonObjectNull)(nil),               // 123: zBusinessZeropsApiProtocol.AppVersionJsonObjectNull
	(*AppVersionLightNull)(nil),                    // 124: zBusinessZeropsApiProtocol.AppVersionLightNull
	(*AppVersionPublicGitSourceNull)(nil),          // 125: zBusinessZeropsApiProtocol.AppVersionPublicGitSourceNull
	(*ClientAvatarNull)(nil),                       // 126: zBusinessZeropsApiProtocol.ClientAvatarNull
	(*CustomAutoscalingNull)(nil),                  // 127: zBusinessZeropsApiProtocol.CustomAutoscalingNull
	(*GithubIntegrationNull)(nil),                  // 128: zBusinessZeropsApiProtocol.GithubIntegrationNull
	(*GitlabIntegrationNull)(nil),                  // 129: zBusinessZeropsApiProtocol.GitlabIntegrationNull
	(*HorizontalAutoscalingNull)(nil),              // 130: zBusinessZeropsApiProtocol.HorizontalAutoscalingNull
	(*Int32Null)(nil),                              // 131: zBusinessZeropsApiProtocol.Int32Null
	(*PrepareCustomRuntimeNull)(nil),               // 132: zBusinessZeropsApiProtocol.PrepareCustomRuntimeNull
	(*StringNull)(nil),                             // 133: zBusinessZeropsApiProtocol.StringNull
	(*TimestampNull)(nil),                          // 134: zBusinessZeropsApiProtocol.TimestampNull
	(*UserAvatarNull)(nil),                         // 135: zBusinessZeropsApiProtocol.UserAvatarNull
	(*UserJsonObjectNull)(nil),                     // 136: zBusinessZeropsApiProtocol.UserJsonObjectNull
	(*VerticalAutoscalingNull)(nil),                // 137: zBusinessZeropsApiProtocol.VerticalAutoscalingNull
}
var file_zeropsApiProtocol_proto_depIdxs = []int32{
	0,   // 0: zBusinessZeropsApiProtocol.Error.code:type_name -> zBusinessZeropsApiProtocol.ErrorCode
	23,  // 1: zBusinessZeropsApiProtocol.ErrorNull.value:type_name -> zBusinessZeropsApiProtocol.Error
	133, // 2: zBusinessZeropsApiProtocol.PostAppVersionRequest.name:type_name -> zBusinessZeropsApiProtocol.StringNull
	38,  // 3: zBusinessZeropsApiProtocol.PostPublicHttpRoutingRequest.locations:type_name -> zBusinessZeropsApiProtocol.PublicHttpRoutingLocationPost
	133, // 4: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployRequest.source:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 5: zBusinessZeropsApiProtocol.PutAppVersionDeployRequest.configContent:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 6: zBusinessZeropsApiProtocol.PutAppVersionDeployRequest.source:type_name -> zBusinessZeropsApiProtocol.StringNull
	23,  // 7: zBusinessZeropsApiProtocol.DeleteProjectResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	47,  // 8: zBusinessZeropsApiProtocol.DeleteProjectResponse.output:type_name -> zBusinessZeropsApiProtocol.DeleteProjectResponseDto
	133, // 9: zBusinessZeropsApiProtocol.DeleteProjectResponseDto.serviceStackId:type_name -> zBusinessZeropsApiProtocol.StringNull
	105, // 10: zBusinessZeropsApiProtocol.DeleteProjectResponseDto.project:type_name -> zBusinessZeropsApiProtocol.ProjectLightJsonObject
	114, // 11: zBusinessZeropsApiProtocol.DeleteProjectResponseDto.serviceStacks:type_name -> zBusinessZeropsApiProtocol.ServiceStackLightJsonObject
	9,   // 12: zBusinessZeropsApiProtocol.DeleteProjectResponseDto.status:type_name -> zBusinessZeropsApiProtocol.ProcessStatus
	117, // 13: zBusinessZeropsApiProtocol.DeleteProjectResponseDto.createdByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObject
	136, // 14: zBusinessZeropsApiProtocol.DeleteProjectResponseDto.canceledByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObjectNull
	25,  // 15: zBusinessZeropsApiProtocol.DeleteProjectResponseDto.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 16: zBusinessZeropsApiProtocol.DeleteProjectResponseDto.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	134, // 17: zBusinessZeropsApiProtocol.DeleteProjectResponseDto.started:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 18: zBusinessZeropsApiProtocol.DeleteProjectResponseDto.finished:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	123, // 19: zBusinessZeropsApiProtocol.DeleteProjectResponseDto.appVersion:type_name -> zBusinessZeropsApiProtocol.AppVersionJsonObjectNull
	23,  // 20: zBusinessZeropsApiProtocol.DeleteServiceStackResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	49,  // 21: zBusinessZeropsApiProtocol.DeleteServiceStackResponse.output:type_name -> zBusinessZeropsApiProtocol.DeleteServiceStackResponseDto
	133, // 22: zBusinessZeropsApiProtocol.DeleteServiceStackResponseDto.serviceStackId:type_name -> zBusinessZeropsApiProtocol.StringNull
	105, // 23: zBusinessZeropsApiProtocol.DeleteServiceStackResponseDto.project:type_name -> zBusinessZeropsApiProtocol.ProjectLightJsonObject
	114, // 24: zBusinessZeropsApiProtocol.DeleteServiceStackResponseDto.serviceStacks:type_name -> zBusinessZeropsApiProtocol.ServiceStackLightJsonObject
	9,   // 25: zBusinessZeropsApiProtocol.DeleteServiceStackResponseDto.status:type_name -> zBusinessZeropsApiProtocol.ProcessStatus
	117, // 26: zBusinessZeropsApiProtocol.DeleteServiceStackResponseDto.createdByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObject
	136, // 27: zBusinessZeropsApiProtocol.DeleteServiceStackResponseDto.canceledByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObjectNull
	25,  // 28: zBusinessZeropsApiProtocol.DeleteServiceStackResponseDto.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 29: zBusinessZeropsApiProtocol.DeleteServiceStackResponseDto.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	134, // 30: zBusinessZeropsApiProtocol.DeleteServiceStackResponseDto.started:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 31: zBusinessZeropsApiProtocol.DeleteServiceStackResponseDto.finished:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	123, // 32: zBusinessZeropsApiProtocol.DeleteServiceStackResponseDto.appVersion:type_name -> zBusinessZeropsApiProtocol.AppVersionJsonObjectNull
	23,  // 33: zBusinessZeropsApiProtocol.GetProcessResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	51,  // 34: zBusinessZeropsApiProtocol.GetProcessResponse.output:type_name -> zBusinessZeropsApiProtocol.GetProcessResponseDto
	133, // 35: zBusinessZeropsApiProtocol.GetProcessResponseDto.serviceStackId:type_name -> zBusinessZeropsApiProtocol.StringNull
	105, // 36: zBusinessZeropsApiProtocol.GetProcessResponseDto.project:type_name -> zBusinessZeropsApiProtocol.ProjectLightJsonObject
	114, // 37: zBusinessZeropsApiProtocol.GetProcessResponseDto.serviceStacks:type_name -> zBusinessZeropsApiProtocol.ServiceStackLightJsonObject
	9,   // 38: zBusinessZeropsApiProtocol.GetProcessResponseDto.status:type_name -> zBusinessZeropsApiProtocol.ProcessStatus
	117, // 39: zBusinessZeropsApiProtocol.GetProcessResponseDto.createdByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObject
	136, // 40: zBusinessZeropsApiProtocol.GetProcessResponseDto.canceledByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObjectNull
	25,  // 41: zBusinessZeropsApiProtocol.GetProcessResponseDto.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 42: zBusinessZeropsApiProtocol.GetProcessResponseDto.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	134, // 43: zBusinessZeropsApiProtocol.GetProcessResponseDto.started:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 44: zBusinessZeropsApiProtocol.GetProcessResponseDto.finished:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	123, // 45: zBusinessZeropsApiProtocol.GetProcessResponseDto.appVersion:type_name -> zBusinessZeropsApiProtocol.AppVersionJsonObjectNull
	23,  // 46: zBusinessZeropsApiProtocol.GetProjectsByNameResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	53,  // 47: zBusinessZeropsApiProtocol.GetProjectsByNameResponse.output:type_name -> zBusinessZeropsApiProtocol.GetProjectsByNameResponseDto
	102, // 48: zBusinessZeropsApiProtocol.GetProjectsByNameResponseDto.projects:type_name -> zBusinessZeropsApiProtocol.Project
	23,  // 49: zBusinessZeropsApiProtocol.GetServiceStackResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	55,  // 50: zBusinessZeropsApiProtocol.GetServiceStackResponse.output:type_name -> zBusinessZeropsApiProtocol.GetServiceStackResponseDto
	17,  // 51: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.status:type_name -> zBusinessZeropsApiProtocol.ServiceStackStatus
	112, // 52: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.serviceStackTypeInfo:type_name -> zBusinessZeropsApiProtocol.ServiceStackInfoJsonObject
	128, // 53: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.githubIntegration:type_name -> zBusinessZeropsApiProtocol.GithubIntegrationNull
	129, // 54: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.gitlabIntegration:type_name -> zBusinessZeropsApiProtocol.GitlabIntegrationNull
	127, // 55: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.customAutoscaling:type_name -> zBusinessZeropsApiProtocol.CustomAutoscalingNull
	110, // 56: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.ports:type_name -> zBusinessZeropsApiProtocol.ServicePort
	108, // 57: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.requestedPorts:type_name -> zBusinessZeropsApiProtocol.RequestedPortsJsonObject
	25,  // 58: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 59: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	16,  // 60: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.mode:type_name -> zBusinessZeropsApiProtocol.ServiceStackMode
	104, // 61: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.project:type_name -> zBusinessZeropsApiProtocol.ProjectLight
	111, // 62: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.connectedStacks:type_name -> zBusinessZeropsApiProtocol.ServiceStackConnectedServiceStack
	116, // 63: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.userData:type_name -> zBusinessZeropsApiProtocol.UserDataLight
	124, // 64: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.activeAppVersion:type_name -> zBusinessZeropsApiProtocol.AppVersionLightNull
	131, // 65: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.activePublicHttpRoutingCount:type_name -> zBusinessZeropsApiProtocol.Int32Null
	131, // 66: zBusinessZeropsApiProtocol.GetServiceStackResponseDto.activePublicPortRoutingCount:type_name -> zBusinessZeropsApiProtocol.Int32Null
	23,  // 67: zBusinessZeropsApiProtocol.GetServiceStackByNameResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	57,  // 68: zBusinessZeropsApiProtocol.GetServiceStackByNameResponse.output:type_name -> zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto
	17,  // 69: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.status:type_name -> zBusinessZeropsApiProtocol.ServiceStackStatus
	112, // 70: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.serviceStackTypeInfo:type_name -> zBusinessZeropsApiProtocol.ServiceStackInfoJsonObject
	128, // 71: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.githubIntegration:type_name -> zBusinessZeropsApiProtocol.GithubIntegrationNull
	129, // 72: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.gitlabIntegration:type_name -> zBusinessZeropsApiProtocol.GitlabIntegrationNull
	127, // 73: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.customAutoscaling:type_name -> zBusinessZeropsApiProtocol.CustomAutoscalingNull
	110, // 74: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.ports:type_name -> zBusinessZeropsApiProtocol.ServicePort
	108, // 75: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.requestedPorts:type_name -> zBusinessZeropsApiProtocol.RequestedPortsJsonObject
	25,  // 76: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 77: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	16,  // 78: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.mode:type_name -> zBusinessZeropsApiProtocol.ServiceStackMode
	104, // 79: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.project:type_name -> zBusinessZeropsApiProtocol.ProjectLight
	111, // 80: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.connectedStacks:type_name -> zBusinessZeropsApiProtocol.ServiceStackConnectedServiceStack
	116, // 81: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.userData:type_name -> zBusinessZeropsApiProtocol.UserDataLight
	124, // 82: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.activeAppVersion:type_name -> zBusinessZeropsApiProtocol.AppVersionLightNull
	131, // 83: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.activePublicHttpRoutingCount:type_name -> zBusinessZeropsApiProtocol.Int32Null
	131, // 84: zBusinessZeropsApiProtocol.GetServiceStackByNameResponseDto.activePublicPortRoutingCount:type_name -> zBusinessZeropsApiProtocol.Int32Null
	23,  // 85: zBusinessZeropsApiProtocol.GetUserInfoResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	59,  // 86: zBusinessZeropsApiProtocol.GetUserInfoResponse.output:type_name -> zBusinessZeropsApiProtocol.GetUserInfoResponseDto
	135, // 87: zBusinessZeropsApiProtocol.GetUserInfoResponseDto.avatar:type_name -> zBusinessZeropsApiProtocol.UserAvatarNull
	131, // 88: zBusinessZeropsApiProtocol.GetUserInfoResponseDto.countryCallingCode:type_name -> zBusinessZeropsApiProtocol.Int32Null
	131, // 89: zBusinessZeropsApiProtocol.GetUserInfoResponseDto.phoneNumber:type_name -> zBusinessZeropsApiProtocol.Int32Null
	98,  // 90: zBusinessZeropsApiProtocol.GetUserInfoResponseDto.language:type_name -> zBusinessZeropsApiProtocol.Language
	25,  // 91: zBusinessZeropsApiProtocol.GetUserInfoResponseDto.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 92: zBusinessZeropsApiProtocol.GetUserInfoResponseDto.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	22,  // 93: zBusinessZeropsApiProtocol.GetUserInfoResponseDto.status:type_name -> zBusinessZeropsApiProtocol.UserStatus
	93,  // 94: zBusinessZeropsApiProtocol.GetUserInfoResponseDto.clientUserList:type_name -> zBusinessZeropsApiProtocol.ClientUserExtra
	23,  // 95: zBusinessZeropsApiProtocol.PostAppVersionResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	61,  // 96: zBusinessZeropsApiProtocol.PostAppVersionResponse.output:type_name -> zBusinessZeropsApiProtocol.PostAppVersionResponseDto
	120, // 97: zBusinessZeropsApiProtocol.PostAppVersionResponseDto.build:type_name -> zBusinessZeropsApiProtocol.AppVersionBuildNull
	4,   // 98: zBusinessZeropsApiProtocol.PostAppVersionResponseDto.status:type_name -> zBusinessZeropsApiProtocol.AppVersionStatus
	90,  // 99: zBusinessZeropsApiProtocol.PostAppVersionResponseDto.userDataList:type_name -> zBusinessZeropsApiProtocol.AppVersionUserData
	25,  // 100: zBusinessZeropsApiProtocol.PostAppVersionResponseDto.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 101: zBusinessZeropsApiProtocol.PostAppVersionResponseDto.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	23,  // 102: zBusinessZeropsApiProtocol.PostProjectImportResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	63,  // 103: zBusinessZeropsApiProtocol.PostProjectImportResponse.output:type_name -> zBusinessZeropsApiProtocol.PostProjectImportResponseDto
	103, // 104: zBusinessZeropsApiProtocol.PostProjectImportResponseDto.serviceStacks:type_name -> zBusinessZeropsApiProtocol.ProjectImportServiceStack
	23,  // 105: zBusinessZeropsApiProtocol.PostPublicHttpRoutingResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	65,  // 106: zBusinessZeropsApiProtocol.PostPublicHttpRoutingResponse.output:type_name -> zBusinessZeropsApiProtocol.PostPublicHttpRoutingResponseDto
	106, // 107: zBusinessZeropsApiProtocol.PostPublicHttpRoutingResponseDto.domains:type_name -> zBusinessZeropsApiProtocol.PublicHttpRoutingDomain
	107, // 108: zBusinessZeropsApiProtocol.PostPublicHttpRoutingResponseDto.locations:type_name -> zBusinessZeropsApiProtocol.PublicHttpRoutingLocation
	25,  // 109: zBusinessZeropsApiProtocol.PostPublicHttpRoutingResponseDto.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 110: zBusinessZeropsApiProtocol.PostPublicHttpRoutingResponseDto.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	23,  // 111: zBusinessZeropsApiProtocol.PostServiceStackImportResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	67,  // 112: zBusinessZeropsApiProtocol.PostServiceStackImportResponse.output:type_name -> zBusinessZeropsApiProtocol.PostServiceStackImportResponseDto
	103, // 113: zBusinessZeropsApiProtocol.PostServiceStackImportResponseDto.serviceStacks:type_name -> zBusinessZeropsApiProtocol.ProjectImportServiceStack
	23,  // 114: zBusinessZeropsApiProtocol.PostVpnRequestResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	69,  // 115: zBusinessZeropsApiProtocol.PostVpnRequestResponse.output:type_name -> zBusinessZeropsApiProtocol.PostVpnRequestResponseDto
	25,  // 116: zBusinessZeropsApiProtocol.PostVpnRequestResponseDto.expiry:type_name -> zBusinessZeropsApiProtocol.Timestamp
	23,  // 117: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	71,  // 118: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponse.output:type_name -> zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponseDto
	133, // 119: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponseDto.serviceStackId:type_name -> zBusinessZeropsApiProtocol.StringNull
	105, // 120: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponseDto.project:type_name -> zBusinessZeropsApiProtocol.ProjectLightJsonObject
	114, // 121: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponseDto.serviceStacks:type_name -> zBusinessZeropsApiProtocol.ServiceStackLightJsonObject
	9,   // 122: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponseDto.status:type_name -> zBusinessZeropsApiProtocol.ProcessStatus
	117, // 123: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponseDto.createdByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObject
	136, // 124: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponseDto.canceledByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObjectNull
	25,  // 125: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponseDto.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 126: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponseDto.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	134, // 127: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponseDto.started:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 128: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponseDto.finished:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	123, // 129: zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponseDto.appVersion:type_name -> zBusinessZeropsApiProtocol.AppVersionJsonObjectNull
	23,  // 130: zBusinessZeropsApiProtocol.PutAppVersionDeployResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	73,  // 131: zBusinessZeropsApiProtocol.PutAppVersionDeployResponse.output:type_name -> zBusinessZeropsApiProtocol.PutAppVersionDeployResponseDto
	133, // 132: zBusinessZeropsApiProtocol.PutAppVersionDeployResponseDto.serviceStackId:type_name -> zBusinessZeropsApiProtocol.StringNull
	105, // 133: zBusinessZeropsApiProtocol.PutAppVersionDeployResponseDto.project:type_name -> zBusinessZeropsApiProtocol.ProjectLightJsonObject
	114, // 134: zBusinessZeropsApiProtocol.PutAppVersionDeployResponseDto.serviceStacks:type_name -> zBusinessZeropsApiProtocol.ServiceStackLightJsonObject
	9,   // 135: zBusinessZeropsApiProtocol.PutAppVersionDeployResponseDto.status:type_name -> zBusinessZeropsApiProtocol.ProcessStatus
	117, // 136: zBusinessZeropsApiProtocol.PutAppVersionDeployResponseDto.createdByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObject
	136, // 137: zBusinessZeropsApiProtocol.PutAppVersionDeployResponseDto.canceledByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObjectNull
	25,  // 138: zBusinessZeropsApiProtocol.PutAppVersionDeployResponseDto.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 139: zBusinessZeropsApiProtocol.PutAppVersionDeployResponseDto.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	134, // 140: zBusinessZeropsApiProtocol.PutAppVersionDeployResponseDto.started:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 141: zBusinessZeropsApiProtocol.PutAppVersionDeployResponseDto.finished:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	123, // 142: zBusinessZeropsApiProtocol.PutAppVersionDeployResponseDto.appVersion:type_name -> zBusinessZeropsApiProtocol.AppVersionJsonObjectNull
	23,  // 143: zBusinessZeropsApiProtocol.PutProjectStartResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	75,  // 144: zBusinessZeropsApiProtocol.PutProjectStartResponse.output:type_name -> zBusinessZeropsApiProtocol.PutProjectStartResponseDto
	133, // 145: zBusinessZeropsApiProtocol.PutProjectStartResponseDto.serviceStackId:type_name -> zBusinessZeropsApiProtocol.StringNull
	105, // 146: zBusinessZeropsApiProtocol.PutProjectStartResponseDto.project:type_name -> zBusinessZeropsApiProtocol.ProjectLightJsonObject
	114, // 147: zBusinessZeropsApiProtocol.PutProjectStartResponseDto.serviceStacks:type_name -> zBusinessZeropsApiProtocol.ServiceStackLightJsonObject
	9,   // 148: zBusinessZeropsApiProtocol.PutProjectStartResponseDto.status:type_name -> zBusinessZeropsApiProtocol.ProcessStatus
	117, // 149: zBusinessZeropsApiProtocol.PutProjectStartResponseDto.createdByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObject
	136, // 150: zBusinessZeropsApiProtocol.PutProjectStartResponseDto.canceledByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObjectNull
	25,  // 151: zBusinessZeropsApiProtocol.PutProjectStartResponseDto.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 152: zBusinessZeropsApiProtocol.PutProjectStartResponseDto.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	134, // 153: zBusinessZeropsApiProtocol.PutProjectStartResponseDto.started:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 154: zBusinessZeropsApiProtocol.PutProjectStartResponseDto.finished:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	123, // 155: zBusinessZeropsApiProtocol.PutProjectStartResponseDto.appVersion:type_name -> zBusinessZeropsApiProtocol.AppVersionJsonObjectNull
	23,  // 156: zBusinessZeropsApiProtocol.PutProjectStopResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	77,  // 157: zBusinessZeropsApiProtocol.PutProjectStopResponse.output:type_name -> zBusinessZeropsApiProtocol.PutProjectStopResponseDto
	133, // 158: zBusinessZeropsApiProtocol.PutProjectStopResponseDto.serviceStackId:type_name -> zBusinessZeropsApiProtocol.StringNull
	105, // 159: zBusinessZeropsApiProtocol.PutProjectStopResponseDto.project:type_name -> zBusinessZeropsApiProtocol.ProjectLightJsonObject
	114, // 160: zBusinessZeropsApiProtocol.PutProjectStopResponseDto.serviceStacks:type_name -> zBusinessZeropsApiProtocol.ServiceStackLightJsonObject
	9,   // 161: zBusinessZeropsApiProtocol.PutProjectStopResponseDto.status:type_name -> zBusinessZeropsApiProtocol.ProcessStatus
	117, // 162: zBusinessZeropsApiProtocol.PutProjectStopResponseDto.createdByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObject
	136, // 163: zBusinessZeropsApiProtocol.PutProjectStopResponseDto.canceledByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObjectNull
	25,  // 164: zBusinessZeropsApiProtocol.PutProjectStopResponseDto.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 165: zBusinessZeropsApiProtocol.PutProjectStopResponseDto.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	134, // 166: zBusinessZeropsApiProtocol.PutProjectStopResponseDto.started:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 167: zBusinessZeropsApiProtocol.PutProjectStopResponseDto.finished:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	123, // 168: zBusinessZeropsApiProtocol.PutProjectStopResponseDto.appVersion:type_name -> zBusinessZeropsApiProtocol.AppVersionJsonObjectNull
	23,  // 169: zBusinessZeropsApiProtocol.PutServiceStackRestartResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	79,  // 170: zBusinessZeropsApiProtocol.PutServiceStackRestartResponse.output:type_name -> zBusinessZeropsApiProtocol.PutServiceStackRestartResponseDto
	133, // 171: zBusinessZeropsApiProtocol.PutServiceStackRestartResponseDto.serviceStackId:type_name -> zBusinessZeropsApiProtocol.StringNull
	105, // 172: zBusinessZeropsApiProtocol.PutServiceStackRestartResponseDto.project:type_name -> zBusinessZeropsApiProtocol.ProjectLightJsonObject
	114, // 173: zBusinessZeropsApiProtocol.PutServiceStackRestartResponseDto.serviceStacks:type_name -> zBusinessZeropsApiProtocol.ServiceStackLightJsonObject
	9,   // 174: zBusinessZeropsApiProtocol.PutServiceStackRestartResponseDto.status:type_name -> zBusinessZeropsApiProtocol.ProcessStatus
	117, // 175: zBusinessZeropsApiProtocol.PutServiceStackRestartResponseDto.createdByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObject
	136, // 176: zBusinessZeropsApiProtocol.PutServiceStackRestartResponseDto.canceledByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObjectNull
	25,  // 177: zBusinessZeropsApiProtocol.PutServiceStackRestartResponseDto.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 178: zBusinessZeropsApiProtocol.PutServiceStackRestartResponseDto.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	134, // 179: zBusinessZeropsApiProtocol.PutServiceStackRestartResponseDto.started:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 180: zBusinessZeropsApiProtocol.PutServiceStackRestartResponseDto.finished:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	123, // 181: zBusinessZeropsApiProtocol.PutServiceStackRestartResponseDto.appVersion:type_name -> zBusinessZeropsApiProtocol.AppVersionJsonObjectNull
	23,  // 182: zBusinessZeropsApiProtocol.PutServiceStackStartResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	81,  // 183: zBusinessZeropsApiProtocol.PutServiceStackStartResponse.output:type_name -> zBusinessZeropsApiProtocol.PutServiceStackStartResponseDto
	133, // 184: zBusinessZeropsApiProtocol.PutServiceStackStartResponseDto.serviceStackId:type_name -> zBusinessZeropsApiProtocol.StringNull
	105, // 185: zBusinessZeropsApiProtocol.PutServiceStackStartResponseDto.project:type_name -> zBusinessZeropsApiProtocol.ProjectLightJsonObject
	114, // 186: zBusinessZeropsApiProtocol.PutServiceStackStartResponseDto.serviceStacks:type_name -> zBusinessZeropsApiProtocol.ServiceStackLightJsonObject
	9,   // 187: zBusinessZeropsApiProtocol.PutServiceStackStartResponseDto.status:type_name -> zBusinessZeropsApiProtocol.ProcessStatus
	117, // 188: zBusinessZeropsApiProtocol.PutServiceStackStartResponseDto.createdByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObject
	136, // 189: zBusinessZeropsApiProtocol.PutServiceStackStartResponseDto.canceledByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObjectNull
	25,  // 190: zBusinessZeropsApiProtocol.PutServiceStackStartResponseDto.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 191: zBusinessZeropsApiProtocol.PutServiceStackStartResponseDto.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	134, // 192: zBusinessZeropsApiProtocol.PutServiceStackStartResponseDto.started:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 193: zBusinessZeropsApiProtocol.PutServiceStackStartResponseDto.finished:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	123, // 194: zBusinessZeropsApiProtocol.PutServiceStackStartResponseDto.appVersion:type_name -> zBusinessZeropsApiProtocol.AppVersionJsonObjectNull
	23,  // 195: zBusinessZeropsApiProtocol.PutServiceStackStopResponse.error:type_name -> zBusinessZeropsApiProtocol.Error
	83,  // 196: zBusinessZeropsApiProtocol.PutServiceStackStopResponse.output:type_name -> zBusinessZeropsApiProtocol.PutServiceStackStopResponseDto
	133, // 197: zBusinessZeropsApiProtocol.PutServiceStackStopResponseDto.serviceStackId:type_name -> zBusinessZeropsApiProtocol.StringNull
	105, // 198: zBusinessZeropsApiProtocol.PutServiceStackStopResponseDto.project:type_name -> zBusinessZeropsApiProtocol.ProjectLightJsonObject
	114, // 199: zBusinessZeropsApiProtocol.PutServiceStackStopResponseDto.serviceStacks:type_name -> zBusinessZeropsApiProtocol.ServiceStackLightJsonObject
	9,   // 200: zBusinessZeropsApiProtocol.PutServiceStackStopResponseDto.status:type_name -> zBusinessZeropsApiProtocol.ProcessStatus
	117, // 201: zBusinessZeropsApiProtocol.PutServiceStackStopResponseDto.createdByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObject
	136, // 202: zBusinessZeropsApiProtocol.PutServiceStackStopResponseDto.canceledByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObjectNull
	25,  // 203: zBusinessZeropsApiProtocol.PutServiceStackStopResponseDto.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 204: zBusinessZeropsApiProtocol.PutServiceStackStopResponseDto.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	134, // 205: zBusinessZeropsApiProtocol.PutServiceStackStopResponseDto.started:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 206: zBusinessZeropsApiProtocol.PutServiceStackStopResponseDto.finished:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	123, // 207: zBusinessZeropsApiProtocol.PutServiceStackStopResponseDto.appVersion:type_name -> zBusinessZeropsApiProtocol.AppVersionJsonObjectNull
	133, // 208: zBusinessZeropsApiProtocol.AppVersionBuild.serviceStackId:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 209: zBusinessZeropsApiProtocol.AppVersionBuild.serviceStackName:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 210: zBusinessZeropsApiProtocol.AppVersionBuild.serviceStackTypeVersionId:type_name -> zBusinessZeropsApiProtocol.StringNull
	134, // 211: zBusinessZeropsApiProtocol.AppVersionBuild.pipelineStart:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 212: zBusinessZeropsApiProtocol.AppVersionBuild.pipelineFinish:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 213: zBusinessZeropsApiProtocol.AppVersionBuild.pipelineFailed:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 214: zBusinessZeropsApiProtocol.AppVersionBuild.containerCreationStart:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 215: zBusinessZeropsApiProtocol.AppVersionBuild.startDate:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 216: zBusinessZeropsApiProtocol.AppVersionBuild.endDate:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	1,   // 217: zBusinessZeropsApiProtocol.AppVersionGithubIntegration.eventType:type_name -> zBusinessZeropsApiProtocol.AppVersionGithubIntegrationEventType
	133, // 218: zBusinessZeropsApiProtocol.AppVersionGithubIntegration.branchName:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 219: zBusinessZeropsApiProtocol.AppVersionGithubIntegration.tagName:type_name -> zBusinessZeropsApiProtocol.StringNull
	2,   // 220: zBusinessZeropsApiProtocol.AppVersionGitlabIntegration.eventType:type_name -> zBusinessZeropsApiProtocol.AppVersionGitlabIntegrationEventType
	133, // 221: zBusinessZeropsApiProtocol.AppVersionGitlabIntegration.branchName:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 222: zBusinessZeropsApiProtocol.AppVersionGitlabIntegration.tagName:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 223: zBusinessZeropsApiProtocol.AppVersionJsonObject.serviceStackId:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 224: zBusinessZeropsApiProtocol.AppVersionJsonObject.projectId:type_name -> zBusinessZeropsApiProtocol.StringNull
	4,   // 225: zBusinessZeropsApiProtocol.AppVersionJsonObject.status:type_name -> zBusinessZeropsApiProtocol.AppVersionStatus
	3,   // 226: zBusinessZeropsApiProtocol.AppVersionJsonObject.source:type_name -> zBusinessZeropsApiProtocol.AppVersionSource
	133, // 227: zBusinessZeropsApiProtocol.AppVersionJsonObject.name:type_name -> zBusinessZeropsApiProtocol.StringNull
	134, // 228: zBusinessZeropsApiProtocol.AppVersionJsonObject.created:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	120, // 229: zBusinessZeropsApiProtocol.AppVersionJsonObject.build:type_name -> zBusinessZeropsApiProtocol.AppVersionBuildNull
	132, // 230: zBusinessZeropsApiProtocol.AppVersionJsonObject.prepareCustomRuntime:type_name -> zBusinessZeropsApiProtocol.PrepareCustomRuntimeNull
	121, // 231: zBusinessZeropsApiProtocol.AppVersionJsonObject.githubIntegration:type_name -> zBusinessZeropsApiProtocol.AppVersionGithubIntegrationNull
	122, // 232: zBusinessZeropsApiProtocol.AppVersionJsonObject.gitlabIntegration:type_name -> zBusinessZeropsApiProtocol.AppVersionGitlabIntegrationNull
	136, // 233: zBusinessZeropsApiProtocol.AppVersionJsonObject.createdByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObjectNull
	134, // 234: zBusinessZeropsApiProtocol.AppVersionJsonObject.activationDate:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	125, // 235: zBusinessZeropsApiProtocol.AppVersionJsonObject.publicGitSource:type_name -> zBusinessZeropsApiProtocol.AppVersionPublicGitSourceNull
	133, // 236: zBusinessZeropsApiProtocol.AppVersionJsonObject.configContent:type_name -> zBusinessZeropsApiProtocol.StringNull
	4,   // 237: zBusinessZeropsApiProtocol.AppVersionLight.status:type_name -> zBusinessZeropsApiProtocol.AppVersionStatus
	25,  // 238: zBusinessZeropsApiProtocol.AppVersionLight.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 239: zBusinessZeropsApiProtocol.AppVersionLight.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	19,  // 240: zBusinessZeropsApiProtocol.AppVersionUserData.type:type_name -> zBusinessZeropsApiProtocol.UserDataType
	133, // 241: zBusinessZeropsApiProtocol.ClientAvatar.largeAvatarUrl:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 242: zBusinessZeropsApiProtocol.ClientAvatar.smallAvatarUrl:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 243: zBusinessZeropsApiProtocol.ClientAvatar.externalAvatarUrl:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 244: zBusinessZeropsApiProtocol.ClientExtra.companyNumber:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 245: zBusinessZeropsApiProtocol.ClientExtra.vatNumber:type_name -> zBusinessZeropsApiProtocol.StringNull
	126, // 246: zBusinessZeropsApiProtocol.ClientExtra.avatar:type_name -> zBusinessZeropsApiProtocol.ClientAvatarNull
	6,   // 247: zBusinessZeropsApiProtocol.ClientUserExtra.status:type_name -> zBusinessZeropsApiProtocol.ClientUserLightStatus
	5,   // 248: zBusinessZeropsApiProtocol.ClientUserExtra.roleCode:type_name -> zBusinessZeropsApiProtocol.ClientUserLightRoleCode
	92,  // 249: zBusinessZeropsApiProtocol.ClientUserExtra.client:type_name -> zBusinessZeropsApiProtocol.ClientExtra
	118, // 250: zBusinessZeropsApiProtocol.ClientUserExtra.user:type_name -> zBusinessZeropsApiProtocol.UserLight
	137, // 251: zBusinessZeropsApiProtocol.CustomAutoscaling.verticalAutoscaling:type_name -> zBusinessZeropsApiProtocol.VerticalAutoscalingNull
	130, // 252: zBusinessZeropsApiProtocol.CustomAutoscaling.horizontalAutoscaling:type_name -> zBusinessZeropsApiProtocol.HorizontalAutoscalingNull
	133, // 253: zBusinessZeropsApiProtocol.GithubIntegration.branchName:type_name -> zBusinessZeropsApiProtocol.StringNull
	7,   // 254: zBusinessZeropsApiProtocol.GithubIntegration.eventType:type_name -> zBusinessZeropsApiProtocol.GithubIntegrationEventType
	131, // 255: zBusinessZeropsApiProtocol.GithubIntegration.webhookId:type_name -> zBusinessZeropsApiProtocol.Int32Null
	133, // 256: zBusinessZeropsApiProtocol.GitlabIntegration.branchName:type_name -> zBusinessZeropsApiProtocol.StringNull
	8,   // 257: zBusinessZeropsApiProtocol.GitlabIntegration.eventType:type_name -> zBusinessZeropsApiProtocol.GitlabIntegrationEventType
	131, // 258: zBusinessZeropsApiProtocol.GitlabIntegration.webhookId:type_name -> zBusinessZeropsApiProtocol.Int32Null
	134, // 259: zBusinessZeropsApiProtocol.PrepareCustomRuntime.containerCreationStart:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 260: zBusinessZeropsApiProtocol.PrepareCustomRuntime.startDate:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 261: zBusinessZeropsApiProtocol.PrepareCustomRuntime.endDate:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	133, // 262: zBusinessZeropsApiProtocol.PrepareCustomRuntime.serviceStackId:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 263: zBusinessZeropsApiProtocol.PrepareCustomRuntime.serviceStackName:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 264: zBusinessZeropsApiProtocol.Process.serviceStackId:type_name -> zBusinessZeropsApiProtocol.StringNull
	105, // 265: zBusinessZeropsApiProtocol.Process.project:type_name -> zBusinessZeropsApiProtocol.ProjectLightJsonObject
	114, // 266: zBusinessZeropsApiProtocol.Process.serviceStacks:type_name -> zBusinessZeropsApiProtocol.ServiceStackLightJsonObject
	9,   // 267: zBusinessZeropsApiProtocol.Process.status:type_name -> zBusinessZeropsApiProtocol.ProcessStatus
	117, // 268: zBusinessZeropsApiProtocol.Process.createdByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObject
	136, // 269: zBusinessZeropsApiProtocol.Process.canceledByUser:type_name -> zBusinessZeropsApiProtocol.UserJsonObjectNull
	25,  // 270: zBusinessZeropsApiProtocol.Process.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 271: zBusinessZeropsApiProtocol.Process.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	134, // 272: zBusinessZeropsApiProtocol.Process.started:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	134, // 273: zBusinessZeropsApiProtocol.Process.finished:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	123, // 274: zBusinessZeropsApiProtocol.Process.appVersion:type_name -> zBusinessZeropsApiProtocol.AppVersionJsonObjectNull
	133, // 275: zBusinessZeropsApiProtocol.Project.description:type_name -> zBusinessZeropsApiProtocol.StringNull
	10,  // 276: zBusinessZeropsApiProtocol.Project.status:type_name -> zBusinessZeropsApiProtocol.ProjectStatus
	25,  // 277: zBusinessZeropsApiProtocol.Project.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 278: zBusinessZeropsApiProtocol.Project.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	133, // 279: zBusinessZeropsApiProtocol.Project.publicIpV4:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 280: zBusinessZeropsApiProtocol.Project.publicIpV6:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 281: zBusinessZeropsApiProtocol.Project.zeropsSubdomainHost:type_name -> zBusinessZeropsApiProtocol.StringNull
	24,  // 282: zBusinessZeropsApiProtocol.ProjectImportServiceStack.error:type_name -> zBusinessZeropsApiProtocol.ErrorNull
	101, // 283: zBusinessZeropsApiProtocol.ProjectImportServiceStack.processes:type_name -> zBusinessZeropsApiProtocol.Process
	133, // 284: zBusinessZeropsApiProtocol.ProjectLight.description:type_name -> zBusinessZeropsApiProtocol.StringNull
	10,  // 285: zBusinessZeropsApiProtocol.ProjectLight.status:type_name -> zBusinessZeropsApiProtocol.ProjectStatus
	25,  // 286: zBusinessZeropsApiProtocol.ProjectLight.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 287: zBusinessZeropsApiProtocol.ProjectLight.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	133, // 288: zBusinessZeropsApiProtocol.ProjectLightJsonObject.description:type_name -> zBusinessZeropsApiProtocol.StringNull
	10,  // 289: zBusinessZeropsApiProtocol.ProjectLightJsonObject.status:type_name -> zBusinessZeropsApiProtocol.ProjectStatus
	25,  // 290: zBusinessZeropsApiProtocol.ProjectLightJsonObject.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 291: zBusinessZeropsApiProtocol.ProjectLightJsonObject.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	11,  // 292: zBusinessZeropsApiProtocol.PublicHttpRoutingDomain.dnsCheckStatus:type_name -> zBusinessZeropsApiProtocol.PublicHttpRoutingDomainDnsCheckStatus
	12,  // 293: zBusinessZeropsApiProtocol.PublicHttpRoutingDomain.sslStatus:type_name -> zBusinessZeropsApiProtocol.PublicHttpRoutingDomainSslStatus
	99,  // 294: zBusinessZeropsApiProtocol.PublicHttpRoutingLocation.serviceStackInfo:type_name -> zBusinessZeropsApiProtocol.LocationServiceStackInfo
	110, // 295: zBusinessZeropsApiProtocol.RequestedPortsJsonObject.requestedPorts:type_name -> zBusinessZeropsApiProtocol.ServicePort
	13,  // 296: zBusinessZeropsApiProtocol.ServicePort.protocol:type_name -> zBusinessZeropsApiProtocol.ServicePortProtocol
	14,  // 297: zBusinessZeropsApiProtocol.ServicePort.scheme:type_name -> zBusinessZeropsApiProtocol.ServicePortScheme
	133, // 298: zBusinessZeropsApiProtocol.ServicePort.serviceId:type_name -> zBusinessZeropsApiProtocol.StringNull
	113, // 299: zBusinessZeropsApiProtocol.ServiceStackConnectedServiceStack.serviceStack:type_name -> zBusinessZeropsApiProtocol.ServiceStackLight
	15,  // 300: zBusinessZeropsApiProtocol.ServiceStackConnectedServiceStack.status:type_name -> zBusinessZeropsApiProtocol.ServiceStackConnectionStatus
	18,  // 301: zBusinessZeropsApiProtocol.ServiceStackInfoJsonObject.serviceStackTypeCategory:type_name -> zBusinessZeropsApiProtocol.ServiceStackTypeCategory
	17,  // 302: zBusinessZeropsApiProtocol.ServiceStackLight.status:type_name -> zBusinessZeropsApiProtocol.ServiceStackStatus
	112, // 303: zBusinessZeropsApiProtocol.ServiceStackLight.serviceStackTypeInfo:type_name -> zBusinessZeropsApiProtocol.ServiceStackInfoJsonObject
	128, // 304: zBusinessZeropsApiProtocol.ServiceStackLight.githubIntegration:type_name -> zBusinessZeropsApiProtocol.GithubIntegrationNull
	129, // 305: zBusinessZeropsApiProtocol.ServiceStackLight.gitlabIntegration:type_name -> zBusinessZeropsApiProtocol.GitlabIntegrationNull
	127, // 306: zBusinessZeropsApiProtocol.ServiceStackLight.customAutoscaling:type_name -> zBusinessZeropsApiProtocol.CustomAutoscalingNull
	25,  // 307: zBusinessZeropsApiProtocol.ServiceStackLightJsonObject.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 308: zBusinessZeropsApiProtocol.ServiceStackLightJsonObject.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	133, // 309: zBusinessZeropsApiProtocol.ServiceStackLightJsonObject.driverId:type_name -> zBusinessZeropsApiProtocol.StringNull
	112, // 310: zBusinessZeropsApiProtocol.ServiceStackLightJsonObject.serviceStackTypeInfo:type_name -> zBusinessZeropsApiProtocol.ServiceStackInfoJsonObject
	110, // 311: zBusinessZeropsApiProtocol.ServiceStackLightJsonObject.ports:type_name -> zBusinessZeropsApiProtocol.ServicePort
	133, // 312: zBusinessZeropsApiProtocol.UserAvatar.largeAvatarUrl:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 313: zBusinessZeropsApiProtocol.UserAvatar.smallAvatarUrl:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 314: zBusinessZeropsApiProtocol.UserAvatar.externalAvatarUrl:type_name -> zBusinessZeropsApiProtocol.StringNull
	19,  // 315: zBusinessZeropsApiProtocol.UserDataLight.type:type_name -> zBusinessZeropsApiProtocol.UserDataType
	25,  // 316: zBusinessZeropsApiProtocol.UserDataLight.created:type_name -> zBusinessZeropsApiProtocol.Timestamp
	25,  // 317: zBusinessZeropsApiProtocol.UserDataLight.lastUpdate:type_name -> zBusinessZeropsApiProtocol.Timestamp
	20,  // 318: zBusinessZeropsApiProtocol.UserDataLight.version:type_name -> zBusinessZeropsApiProtocol.UserDataVersion
	134, // 319: zBusinessZeropsApiProtocol.UserDataLight.lastSync:type_name -> zBusinessZeropsApiProtocol.TimestampNull
	21,  // 320: zBusinessZeropsApiProtocol.UserJsonObject.type:type_name -> zBusinessZeropsApiProtocol.UserJsonObjectType
	133, // 321: zBusinessZeropsApiProtocol.UserJsonObject.id:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 322: zBusinessZeropsApiProtocol.UserJsonObject.email:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 323: zBusinessZeropsApiProtocol.UserJsonObject.firstName:type_name -> zBusinessZeropsApiProtocol.StringNull
	133, // 324: zBusinessZeropsApiProtocol.UserJsonObject.fullName:type_name -> zBusinessZeropsApiProtocol.StringNull
	135, // 325: zBusinessZeropsApiProtocol.UserJsonObject.avatar:type_name -> zBusinessZeropsApiProtocol.UserAvatarNull
	135, // 326: zBusinessZeropsApiProtocol.UserLight.avatar:type_name -> zBusinessZeropsApiProtocol.UserAvatarNull
	109, // 327: zBusinessZeropsApiProtocol.VerticalAutoscaling.maxResource:type_name -> zBusinessZeropsApiProtocol.ScalingResource
	109, // 328: zBusinessZeropsApiProtocol.VerticalAutoscaling.minResource:type_name -> zBusinessZeropsApiProtocol.ScalingResource
	84,  // 329: zBusinessZeropsApiProtocol.AppVersionBuildNull.value:type_name -> zBusinessZeropsApiProtocol.AppVersionBuild
	85,  // 330: zBusinessZeropsApiProtocol.AppVersionGithubIntegrationNull.value:type_name -> zBusinessZeropsApiProtocol.AppVersionGithubIntegration
	86,  // 331: zBusinessZeropsApiProtocol.AppVersionGitlabIntegrationNull.value:type_name -> zBusinessZeropsApiProtocol.AppVersionGitlabIntegration
	87,  // 332: zBusinessZeropsApiProtocol.AppVersionJsonObjectNull.value:type_name -> zBusinessZeropsApiProtocol.AppVersionJsonObject
	88,  // 333: zBusinessZeropsApiProtocol.AppVersionLightNull.value:type_name -> zBusinessZeropsApiProtocol.AppVersionLight
	89,  // 334: zBusinessZeropsApiProtocol.AppVersionPublicGitSourceNull.value:type_name -> zBusinessZeropsApiProtocol.AppVersionPublicGitSource
	91,  // 335: zBusinessZeropsApiProtocol.ClientAvatarNull.value:type_name -> zBusinessZeropsApiProtocol.ClientAvatar
	94,  // 336: zBusinessZeropsApiProtocol.CustomAutoscalingNull.value:type_name -> zBusinessZeropsApiProtocol.CustomAutoscaling
	95,  // 337: zBusinessZeropsApiProtocol.GithubIntegrationNull.value:type_name -> zBusinessZeropsApiProtocol.GithubIntegration
	96,  // 338: zBusinessZeropsApiProtocol.GitlabIntegrationNull.value:type_name -> zBusinessZeropsApiProtocol.GitlabIntegration
	97,  // 339: zBusinessZeropsApiProtocol.HorizontalAutoscalingNull.value:type_name -> zBusinessZeropsApiProtocol.HorizontalAutoscaling
	100, // 340: zBusinessZeropsApiProtocol.PrepareCustomRuntimeNull.value:type_name -> zBusinessZeropsApiProtocol.PrepareCustomRuntime
	25,  // 341: zBusinessZeropsApiProtocol.TimestampNull.value:type_name -> zBusinessZeropsApiProtocol.Timestamp
	115, // 342: zBusinessZeropsApiProtocol.UserAvatarNull.value:type_name -> zBusinessZeropsApiProtocol.UserAvatar
	117, // 343: zBusinessZeropsApiProtocol.UserJsonObjectNull.value:type_name -> zBusinessZeropsApiProtocol.UserJsonObject
	119, // 344: zBusinessZeropsApiProtocol.VerticalAutoscalingNull.value:type_name -> zBusinessZeropsApiProtocol.VerticalAutoscaling
	40,  // 345: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PutAppVersionDeploy:input_type -> zBusinessZeropsApiProtocol.PutAppVersionDeployRequest
	39,  // 346: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PutAppVersionBuildAndDeploy:input_type -> zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployRequest
	33,  // 347: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PostAppVersion:input_type -> zBusinessZeropsApiProtocol.PostAppVersionRequest
	26,  // 348: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.DeleteProject:input_type -> zBusinessZeropsApiProtocol.DeleteProjectRequest
	29,  // 349: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.GetProjectsByName:input_type -> zBusinessZeropsApiProtocol.GetProjectsByNameRequest
	41,  // 350: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PutProjectStart:input_type -> zBusinessZeropsApiProtocol.PutProjectStartRequest
	42,  // 351: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PutProjectStop:input_type -> zBusinessZeropsApiProtocol.PutProjectStopRequest
	34,  // 352: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PostProjectImport:input_type -> zBusinessZeropsApiProtocol.PostProjectImportRequest
	28,  // 353: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.GetProcess:input_type -> zBusinessZeropsApiProtocol.GetProcessRequest
	35,  // 354: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PostPublicHttpRouting:input_type -> zBusinessZeropsApiProtocol.PostPublicHttpRoutingRequest
	30,  // 355: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.GetServiceStack:input_type -> zBusinessZeropsApiProtocol.GetServiceStackRequest
	27,  // 356: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.DeleteServiceStack:input_type -> zBusinessZeropsApiProtocol.DeleteServiceStackRequest
	45,  // 357: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PutServiceStackStop:input_type -> zBusinessZeropsApiProtocol.PutServiceStackStopRequest
	44,  // 358: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PutServiceStackStart:input_type -> zBusinessZeropsApiProtocol.PutServiceStackStartRequest
	43,  // 359: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PutServiceStackRestart:input_type -> zBusinessZeropsApiProtocol.PutServiceStackRestartRequest
	31,  // 360: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.GetServiceStackByName:input_type -> zBusinessZeropsApiProtocol.GetServiceStackByNameRequest
	36,  // 361: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PostServiceStackImport:input_type -> zBusinessZeropsApiProtocol.PostServiceStackImportRequest
	32,  // 362: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.GetUserInfo:input_type -> zBusinessZeropsApiProtocol.GetUserInfoRequest
	37,  // 363: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PostVpnRequest:input_type -> zBusinessZeropsApiProtocol.PostVpnRequestRequest
	72,  // 364: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PutAppVersionDeploy:output_type -> zBusinessZeropsApiProtocol.PutAppVersionDeployResponse
	70,  // 365: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PutAppVersionBuildAndDeploy:output_type -> zBusinessZeropsApiProtocol.PutAppVersionBuildAndDeployResponse
	60,  // 366: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PostAppVersion:output_type -> zBusinessZeropsApiProtocol.PostAppVersionResponse
	46,  // 367: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.DeleteProject:output_type -> zBusinessZeropsApiProtocol.DeleteProjectResponse
	52,  // 368: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.GetProjectsByName:output_type -> zBusinessZeropsApiProtocol.GetProjectsByNameResponse
	74,  // 369: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PutProjectStart:output_type -> zBusinessZeropsApiProtocol.PutProjectStartResponse
	76,  // 370: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PutProjectStop:output_type -> zBusinessZeropsApiProtocol.PutProjectStopResponse
	62,  // 371: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PostProjectImport:output_type -> zBusinessZeropsApiProtocol.PostProjectImportResponse
	50,  // 372: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.GetProcess:output_type -> zBusinessZeropsApiProtocol.GetProcessResponse
	64,  // 373: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PostPublicHttpRouting:output_type -> zBusinessZeropsApiProtocol.PostPublicHttpRoutingResponse
	54,  // 374: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.GetServiceStack:output_type -> zBusinessZeropsApiProtocol.GetServiceStackResponse
	48,  // 375: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.DeleteServiceStack:output_type -> zBusinessZeropsApiProtocol.DeleteServiceStackResponse
	82,  // 376: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PutServiceStackStop:output_type -> zBusinessZeropsApiProtocol.PutServiceStackStopResponse
	80,  // 377: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PutServiceStackStart:output_type -> zBusinessZeropsApiProtocol.PutServiceStackStartResponse
	78,  // 378: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PutServiceStackRestart:output_type -> zBusinessZeropsApiProtocol.PutServiceStackRestartResponse
	56,  // 379: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.GetServiceStackByName:output_type -> zBusinessZeropsApiProtocol.GetServiceStackByNameResponse
	66,  // 380: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PostServiceStackImport:output_type -> zBusinessZeropsApiProtocol.PostServiceStackImportResponse
	58,  // 381: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.GetUserInfo:output_type -> zBusinessZeropsApiProtocol.GetUserInfoResponse
	68,  // 382: zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol.PostVpnRequest:output_type -> zBusinessZeropsApiProtocol.PostVpnRequestResponse
	364, // [364:383] is the sub-list for method output_type
	345, // [345:364] is the sub-list for method input_type
	345, // [345:345] is the sub-list for extension type_name
	345, // [345:345] is the sub-list for extension extendee
	0,   // [0:345] is the sub-list for field type_name
}

func init() { file_zeropsApiProtocol_proto_init() }
func file_zeropsApiProtocol_proto_init() {
	if File_zeropsApiProtocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zeropsApiProtocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceStackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectsByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceStackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceStackByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAppVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostProjectImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostPublicHttpRoutingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostServiceStackImportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostVpnRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicHttpRoutingLocationPost); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutAppVersionBuildAndDeployRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutAppVersionDeployRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutProjectStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutProjectStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutServiceStackRestartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutServiceStackStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutServiceStackStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceStackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceStackResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProcessResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectsByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectsByNameResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceStackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceStackResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceStackByNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceStackByNameResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAppVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostAppVersionResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostProjectImportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostProjectImportResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostPublicHttpRoutingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostPublicHttpRoutingResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostServiceStackImportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostServiceStackImportResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostVpnRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostVpnRequestResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutAppVersionBuildAndDeployResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutAppVersionBuildAndDeployResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutAppVersionDeployResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutAppVersionDeployResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutProjectStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutProjectStartResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutProjectStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutProjectStopResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutServiceStackRestartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutServiceStackRestartResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutServiceStackStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutServiceStackStartResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutServiceStackStopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutServiceStackStopResponseDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionBuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionGithubIntegration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionGitlabIntegration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionJsonObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionPublicGitSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientUserExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomAutoscaling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubIntegration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabIntegration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalAutoscaling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Language); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationServiceStackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareCustomRuntime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectImportServiceStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectLightJsonObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicHttpRoutingDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicHttpRoutingLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestedPortsJsonObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalingResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStackConnectedServiceStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStackInfoJsonObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStackLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceStackLightJsonObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAvatar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDataLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserJsonObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerticalAutoscaling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionBuildNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionGithubIntegrationNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionGitlabIntegrationNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionJsonObjectNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionLightNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionPublicGitSourceNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientAvatarNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomAutoscalingNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubIntegrationNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitlabIntegrationNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalAutoscalingNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32Null); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareCustomRuntimeNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAvatarNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserJsonObjectNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsApiProtocol_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerticalAutoscalingNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zeropsApiProtocol_proto_rawDesc,
			NumEnums:      23,
			NumMessages:   115,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zeropsApiProtocol_proto_goTypes,
		DependencyIndexes: file_zeropsApiProtocol_proto_depIdxs,
		EnumInfos:         file_zeropsApiProtocol_proto_enumTypes,
		MessageInfos:      file_zeropsApiProtocol_proto_msgTypes,
	}.Build()
	File_zeropsApiProtocol_proto = out.File
	file_zeropsApiProtocol_proto_rawDesc = nil
	file_zeropsApiProtocol_proto_goTypes = nil
	file_zeropsApiProtocol_proto_depIdxs = nil
}
