// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: zeropsApiProtocol.proto

package zBusinessZeropsApiProtocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZBusinessZeropsApiProtocolClient is the client API for ZBusinessZeropsApiProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZBusinessZeropsApiProtocolClient interface {
	PutAppVersionDeploy(ctx context.Context, in *PutAppVersionDeployRequest, opts ...grpc.CallOption) (*PutAppVersionDeployResponse, error)
	PutAppVersionBuildAndDeploy(ctx context.Context, in *PutAppVersionBuildAndDeployRequest, opts ...grpc.CallOption) (*PutAppVersionBuildAndDeployResponse, error)
	PostAppVersion(ctx context.Context, in *PostAppVersionRequest, opts ...grpc.CallOption) (*PostAppVersionResponse, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	GetProjectsByName(ctx context.Context, in *GetProjectsByNameRequest, opts ...grpc.CallOption) (*GetProjectsByNameResponse, error)
	PutProjectStart(ctx context.Context, in *PutProjectStartRequest, opts ...grpc.CallOption) (*PutProjectStartResponse, error)
	PutProjectStop(ctx context.Context, in *PutProjectStopRequest, opts ...grpc.CallOption) (*PutProjectStopResponse, error)
	PostProjectImport(ctx context.Context, in *PostProjectImportRequest, opts ...grpc.CallOption) (*PostProjectImportResponse, error)
	GetProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*GetProcessResponse, error)
	PostPublicHttpRouting(ctx context.Context, in *PostPublicHttpRoutingRequest, opts ...grpc.CallOption) (*PostPublicHttpRoutingResponse, error)
	GetServiceStack(ctx context.Context, in *GetServiceStackRequest, opts ...grpc.CallOption) (*GetServiceStackResponse, error)
	DeleteServiceStack(ctx context.Context, in *DeleteServiceStackRequest, opts ...grpc.CallOption) (*DeleteServiceStackResponse, error)
	PutServiceStackStop(ctx context.Context, in *PutServiceStackStopRequest, opts ...grpc.CallOption) (*PutServiceStackStopResponse, error)
	PutServiceStackStart(ctx context.Context, in *PutServiceStackStartRequest, opts ...grpc.CallOption) (*PutServiceStackStartResponse, error)
	PutServiceStackRestart(ctx context.Context, in *PutServiceStackRestartRequest, opts ...grpc.CallOption) (*PutServiceStackRestartResponse, error)
	GetServiceStackByName(ctx context.Context, in *GetServiceStackByNameRequest, opts ...grpc.CallOption) (*GetServiceStackByNameResponse, error)
	PostServiceStackImport(ctx context.Context, in *PostServiceStackImportRequest, opts ...grpc.CallOption) (*PostServiceStackImportResponse, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	PostVpnRequest(ctx context.Context, in *PostVpnRequestRequest, opts ...grpc.CallOption) (*PostVpnRequestResponse, error)
}

type zBusinessZeropsApiProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewZBusinessZeropsApiProtocolClient(cc grpc.ClientConnInterface) ZBusinessZeropsApiProtocolClient {
	return &zBusinessZeropsApiProtocolClient{cc}
}

func (c *zBusinessZeropsApiProtocolClient) PutAppVersionDeploy(ctx context.Context, in *PutAppVersionDeployRequest, opts ...grpc.CallOption) (*PutAppVersionDeployResponse, error) {
	out := new(PutAppVersionDeployResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PutAppVersionDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) PutAppVersionBuildAndDeploy(ctx context.Context, in *PutAppVersionBuildAndDeployRequest, opts ...grpc.CallOption) (*PutAppVersionBuildAndDeployResponse, error) {
	out := new(PutAppVersionBuildAndDeployResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PutAppVersionBuildAndDeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) PostAppVersion(ctx context.Context, in *PostAppVersionRequest, opts ...grpc.CallOption) (*PostAppVersionResponse, error) {
	out := new(PostAppVersionResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PostAppVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) GetProjectsByName(ctx context.Context, in *GetProjectsByNameRequest, opts ...grpc.CallOption) (*GetProjectsByNameResponse, error) {
	out := new(GetProjectsByNameResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/GetProjectsByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) PutProjectStart(ctx context.Context, in *PutProjectStartRequest, opts ...grpc.CallOption) (*PutProjectStartResponse, error) {
	out := new(PutProjectStartResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PutProjectStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) PutProjectStop(ctx context.Context, in *PutProjectStopRequest, opts ...grpc.CallOption) (*PutProjectStopResponse, error) {
	out := new(PutProjectStopResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PutProjectStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) PostProjectImport(ctx context.Context, in *PostProjectImportRequest, opts ...grpc.CallOption) (*PostProjectImportResponse, error) {
	out := new(PostProjectImportResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PostProjectImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) GetProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*GetProcessResponse, error) {
	out := new(GetProcessResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/GetProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) PostPublicHttpRouting(ctx context.Context, in *PostPublicHttpRoutingRequest, opts ...grpc.CallOption) (*PostPublicHttpRoutingResponse, error) {
	out := new(PostPublicHttpRoutingResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PostPublicHttpRouting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) GetServiceStack(ctx context.Context, in *GetServiceStackRequest, opts ...grpc.CallOption) (*GetServiceStackResponse, error) {
	out := new(GetServiceStackResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/GetServiceStack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) DeleteServiceStack(ctx context.Context, in *DeleteServiceStackRequest, opts ...grpc.CallOption) (*DeleteServiceStackResponse, error) {
	out := new(DeleteServiceStackResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/DeleteServiceStack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) PutServiceStackStop(ctx context.Context, in *PutServiceStackStopRequest, opts ...grpc.CallOption) (*PutServiceStackStopResponse, error) {
	out := new(PutServiceStackStopResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PutServiceStackStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) PutServiceStackStart(ctx context.Context, in *PutServiceStackStartRequest, opts ...grpc.CallOption) (*PutServiceStackStartResponse, error) {
	out := new(PutServiceStackStartResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PutServiceStackStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) PutServiceStackRestart(ctx context.Context, in *PutServiceStackRestartRequest, opts ...grpc.CallOption) (*PutServiceStackRestartResponse, error) {
	out := new(PutServiceStackRestartResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PutServiceStackRestart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) GetServiceStackByName(ctx context.Context, in *GetServiceStackByNameRequest, opts ...grpc.CallOption) (*GetServiceStackByNameResponse, error) {
	out := new(GetServiceStackByNameResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/GetServiceStackByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) PostServiceStackImport(ctx context.Context, in *PostServiceStackImportRequest, opts ...grpc.CallOption) (*PostServiceStackImportResponse, error) {
	out := new(PostServiceStackImportResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PostServiceStackImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zBusinessZeropsApiProtocolClient) PostVpnRequest(ctx context.Context, in *PostVpnRequestRequest, opts ...grpc.CallOption) (*PostVpnRequestResponse, error) {
	out := new(PostVpnRequestResponse)
	err := c.cc.Invoke(ctx, "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PostVpnRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZBusinessZeropsApiProtocolServer is the server API for ZBusinessZeropsApiProtocol service.
// All implementations must embed UnimplementedZBusinessZeropsApiProtocolServer
// for forward compatibility
type ZBusinessZeropsApiProtocolServer interface {
	PutAppVersionDeploy(context.Context, *PutAppVersionDeployRequest) (*PutAppVersionDeployResponse, error)
	PutAppVersionBuildAndDeploy(context.Context, *PutAppVersionBuildAndDeployRequest) (*PutAppVersionBuildAndDeployResponse, error)
	PostAppVersion(context.Context, *PostAppVersionRequest) (*PostAppVersionResponse, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	GetProjectsByName(context.Context, *GetProjectsByNameRequest) (*GetProjectsByNameResponse, error)
	PutProjectStart(context.Context, *PutProjectStartRequest) (*PutProjectStartResponse, error)
	PutProjectStop(context.Context, *PutProjectStopRequest) (*PutProjectStopResponse, error)
	PostProjectImport(context.Context, *PostProjectImportRequest) (*PostProjectImportResponse, error)
	GetProcess(context.Context, *GetProcessRequest) (*GetProcessResponse, error)
	PostPublicHttpRouting(context.Context, *PostPublicHttpRoutingRequest) (*PostPublicHttpRoutingResponse, error)
	GetServiceStack(context.Context, *GetServiceStackRequest) (*GetServiceStackResponse, error)
	DeleteServiceStack(context.Context, *DeleteServiceStackRequest) (*DeleteServiceStackResponse, error)
	PutServiceStackStop(context.Context, *PutServiceStackStopRequest) (*PutServiceStackStopResponse, error)
	PutServiceStackStart(context.Context, *PutServiceStackStartRequest) (*PutServiceStackStartResponse, error)
	PutServiceStackRestart(context.Context, *PutServiceStackRestartRequest) (*PutServiceStackRestartResponse, error)
	GetServiceStackByName(context.Context, *GetServiceStackByNameRequest) (*GetServiceStackByNameResponse, error)
	PostServiceStackImport(context.Context, *PostServiceStackImportRequest) (*PostServiceStackImportResponse, error)
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	PostVpnRequest(context.Context, *PostVpnRequestRequest) (*PostVpnRequestResponse, error)
	mustEmbedUnimplementedZBusinessZeropsApiProtocolServer()
}

// UnimplementedZBusinessZeropsApiProtocolServer must be embedded to have forward compatible implementations.
type UnimplementedZBusinessZeropsApiProtocolServer struct {
}

func (UnimplementedZBusinessZeropsApiProtocolServer) PutAppVersionDeploy(context.Context, *PutAppVersionDeployRequest) (*PutAppVersionDeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAppVersionDeploy not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) PutAppVersionBuildAndDeploy(context.Context, *PutAppVersionBuildAndDeployRequest) (*PutAppVersionBuildAndDeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAppVersionBuildAndDeploy not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) PostAppVersion(context.Context, *PostAppVersionRequest) (*PostAppVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAppVersion not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) GetProjectsByName(context.Context, *GetProjectsByNameRequest) (*GetProjectsByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsByName not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) PutProjectStart(context.Context, *PutProjectStartRequest) (*PutProjectStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutProjectStart not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) PutProjectStop(context.Context, *PutProjectStopRequest) (*PutProjectStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutProjectStop not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) PostProjectImport(context.Context, *PostProjectImportRequest) (*PostProjectImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostProjectImport not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) GetProcess(context.Context, *GetProcessRequest) (*GetProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcess not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) PostPublicHttpRouting(context.Context, *PostPublicHttpRoutingRequest) (*PostPublicHttpRoutingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostPublicHttpRouting not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) GetServiceStack(context.Context, *GetServiceStackRequest) (*GetServiceStackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStack not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) DeleteServiceStack(context.Context, *DeleteServiceStackRequest) (*DeleteServiceStackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceStack not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) PutServiceStackStop(context.Context, *PutServiceStackStopRequest) (*PutServiceStackStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutServiceStackStop not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) PutServiceStackStart(context.Context, *PutServiceStackStartRequest) (*PutServiceStackStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutServiceStackStart not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) PutServiceStackRestart(context.Context, *PutServiceStackRestartRequest) (*PutServiceStackRestartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutServiceStackRestart not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) GetServiceStackByName(context.Context, *GetServiceStackByNameRequest) (*GetServiceStackByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStackByName not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) PostServiceStackImport(context.Context, *PostServiceStackImportRequest) (*PostServiceStackImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostServiceStackImport not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) PostVpnRequest(context.Context, *PostVpnRequestRequest) (*PostVpnRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostVpnRequest not implemented")
}
func (UnimplementedZBusinessZeropsApiProtocolServer) mustEmbedUnimplementedZBusinessZeropsApiProtocolServer() {
}

// UnsafeZBusinessZeropsApiProtocolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZBusinessZeropsApiProtocolServer will
// result in compilation errors.
type UnsafeZBusinessZeropsApiProtocolServer interface {
	mustEmbedUnimplementedZBusinessZeropsApiProtocolServer()
}

func RegisterZBusinessZeropsApiProtocolServer(s grpc.ServiceRegistrar, srv ZBusinessZeropsApiProtocolServer) {
	s.RegisterService(&ZBusinessZeropsApiProtocol_ServiceDesc, srv)
}

func _ZBusinessZeropsApiProtocol_PutAppVersionDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutAppVersionDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).PutAppVersionDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PutAppVersionDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).PutAppVersionDeploy(ctx, req.(*PutAppVersionDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_PutAppVersionBuildAndDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutAppVersionBuildAndDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).PutAppVersionBuildAndDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PutAppVersionBuildAndDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).PutAppVersionBuildAndDeploy(ctx, req.(*PutAppVersionBuildAndDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_PostAppVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAppVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).PostAppVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PostAppVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).PostAppVersion(ctx, req.(*PostAppVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_GetProjectsByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).GetProjectsByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/GetProjectsByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).GetProjectsByName(ctx, req.(*GetProjectsByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_PutProjectStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutProjectStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).PutProjectStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PutProjectStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).PutProjectStart(ctx, req.(*PutProjectStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_PutProjectStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutProjectStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).PutProjectStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PutProjectStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).PutProjectStop(ctx, req.(*PutProjectStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_PostProjectImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostProjectImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).PostProjectImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PostProjectImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).PostProjectImport(ctx, req.(*PostProjectImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_GetProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).GetProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/GetProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).GetProcess(ctx, req.(*GetProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_PostPublicHttpRouting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostPublicHttpRoutingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).PostPublicHttpRouting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PostPublicHttpRouting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).PostPublicHttpRouting(ctx, req.(*PostPublicHttpRoutingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_GetServiceStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceStackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).GetServiceStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/GetServiceStack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).GetServiceStack(ctx, req.(*GetServiceStackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_DeleteServiceStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceStackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).DeleteServiceStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/DeleteServiceStack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).DeleteServiceStack(ctx, req.(*DeleteServiceStackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_PutServiceStackStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutServiceStackStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).PutServiceStackStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PutServiceStackStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).PutServiceStackStop(ctx, req.(*PutServiceStackStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_PutServiceStackStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutServiceStackStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).PutServiceStackStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PutServiceStackStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).PutServiceStackStart(ctx, req.(*PutServiceStackStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_PutServiceStackRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutServiceStackRestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).PutServiceStackRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PutServiceStackRestart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).PutServiceStackRestart(ctx, req.(*PutServiceStackRestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_GetServiceStackByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceStackByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).GetServiceStackByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/GetServiceStackByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).GetServiceStackByName(ctx, req.(*GetServiceStackByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_PostServiceStackImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostServiceStackImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).PostServiceStackImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PostServiceStackImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).PostServiceStackImport(ctx, req.(*PostServiceStackImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZBusinessZeropsApiProtocol_PostVpnRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostVpnRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZBusinessZeropsApiProtocolServer).PostVpnRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol/PostVpnRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZBusinessZeropsApiProtocolServer).PostVpnRequest(ctx, req.(*PostVpnRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZBusinessZeropsApiProtocol_ServiceDesc is the grpc.ServiceDesc for ZBusinessZeropsApiProtocol service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZBusinessZeropsApiProtocol_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zBusinessZeropsApiProtocol.ZBusinessZeropsApiProtocol",
	HandlerType: (*ZBusinessZeropsApiProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutAppVersionDeploy",
			Handler:    _ZBusinessZeropsApiProtocol_PutAppVersionDeploy_Handler,
		},
		{
			MethodName: "PutAppVersionBuildAndDeploy",
			Handler:    _ZBusinessZeropsApiProtocol_PutAppVersionBuildAndDeploy_Handler,
		},
		{
			MethodName: "PostAppVersion",
			Handler:    _ZBusinessZeropsApiProtocol_PostAppVersion_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ZBusinessZeropsApiProtocol_DeleteProject_Handler,
		},
		{
			MethodName: "GetProjectsByName",
			Handler:    _ZBusinessZeropsApiProtocol_GetProjectsByName_Handler,
		},
		{
			MethodName: "PutProjectStart",
			Handler:    _ZBusinessZeropsApiProtocol_PutProjectStart_Handler,
		},
		{
			MethodName: "PutProjectStop",
			Handler:    _ZBusinessZeropsApiProtocol_PutProjectStop_Handler,
		},
		{
			MethodName: "PostProjectImport",
			Handler:    _ZBusinessZeropsApiProtocol_PostProjectImport_Handler,
		},
		{
			MethodName: "GetProcess",
			Handler:    _ZBusinessZeropsApiProtocol_GetProcess_Handler,
		},
		{
			MethodName: "PostPublicHttpRouting",
			Handler:    _ZBusinessZeropsApiProtocol_PostPublicHttpRouting_Handler,
		},
		{
			MethodName: "GetServiceStack",
			Handler:    _ZBusinessZeropsApiProtocol_GetServiceStack_Handler,
		},
		{
			MethodName: "DeleteServiceStack",
			Handler:    _ZBusinessZeropsApiProtocol_DeleteServiceStack_Handler,
		},
		{
			MethodName: "PutServiceStackStop",
			Handler:    _ZBusinessZeropsApiProtocol_PutServiceStackStop_Handler,
		},
		{
			MethodName: "PutServiceStackStart",
			Handler:    _ZBusinessZeropsApiProtocol_PutServiceStackStart_Handler,
		},
		{
			MethodName: "PutServiceStackRestart",
			Handler:    _ZBusinessZeropsApiProtocol_PutServiceStackRestart_Handler,
		},
		{
			MethodName: "GetServiceStackByName",
			Handler:    _ZBusinessZeropsApiProtocol_GetServiceStackByName_Handler,
		},
		{
			MethodName: "PostServiceStackImport",
			Handler:    _ZBusinessZeropsApiProtocol_PostServiceStackImport_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _ZBusinessZeropsApiProtocol_GetUserInfo_Handler,
		},
		{
			MethodName: "PostVpnRequest",
			Handler:    _ZBusinessZeropsApiProtocol_PostVpnRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zeropsApiProtocol.proto",
}
