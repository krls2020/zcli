// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: zeropsVpnProtocol.proto

package vpnproxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZeropsVpnProtocolClient is the client API for ZeropsVpnProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZeropsVpnProtocolClient interface {
	StartVpn(ctx context.Context, in *StartVpnRequest, opts ...grpc.CallOption) (*StartVpnResponse, error)
	ProlongVpn(ctx context.Context, in *ProlongVpnRequest, opts ...grpc.CallOption) (*ProlongVpnResponse, error)
}

type zeropsVpnProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewZeropsVpnProtocolClient(cc grpc.ClientConnInterface) ZeropsVpnProtocolClient {
	return &zeropsVpnProtocolClient{cc}
}

func (c *zeropsVpnProtocolClient) StartVpn(ctx context.Context, in *StartVpnRequest, opts ...grpc.CallOption) (*StartVpnResponse, error) {
	out := new(StartVpnResponse)
	err := c.cc.Invoke(ctx, "/zeropsVpnProtocol.ZeropsVpnProtocol/startVpn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeropsVpnProtocolClient) ProlongVpn(ctx context.Context, in *ProlongVpnRequest, opts ...grpc.CallOption) (*ProlongVpnResponse, error) {
	out := new(ProlongVpnResponse)
	err := c.cc.Invoke(ctx, "/zeropsVpnProtocol.ZeropsVpnProtocol/prolongVpn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZeropsVpnProtocolServer is the server API for ZeropsVpnProtocol service.
// All implementations must embed UnimplementedZeropsVpnProtocolServer
// for forward compatibility
type ZeropsVpnProtocolServer interface {
	StartVpn(context.Context, *StartVpnRequest) (*StartVpnResponse, error)
	ProlongVpn(context.Context, *ProlongVpnRequest) (*ProlongVpnResponse, error)
	mustEmbedUnimplementedZeropsVpnProtocolServer()
}

// UnimplementedZeropsVpnProtocolServer must be embedded to have forward compatible implementations.
type UnimplementedZeropsVpnProtocolServer struct {
}

func (UnimplementedZeropsVpnProtocolServer) StartVpn(context.Context, *StartVpnRequest) (*StartVpnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVpn not implemented")
}
func (UnimplementedZeropsVpnProtocolServer) ProlongVpn(context.Context, *ProlongVpnRequest) (*ProlongVpnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProlongVpn not implemented")
}
func (UnimplementedZeropsVpnProtocolServer) mustEmbedUnimplementedZeropsVpnProtocolServer() {}

// UnsafeZeropsVpnProtocolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZeropsVpnProtocolServer will
// result in compilation errors.
type UnsafeZeropsVpnProtocolServer interface {
	mustEmbedUnimplementedZeropsVpnProtocolServer()
}

func RegisterZeropsVpnProtocolServer(s grpc.ServiceRegistrar, srv ZeropsVpnProtocolServer) {
	s.RegisterService(&ZeropsVpnProtocol_ServiceDesc, srv)
}

func _ZeropsVpnProtocol_StartVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVpnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsVpnProtocolServer).StartVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsVpnProtocol.ZeropsVpnProtocol/startVpn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsVpnProtocolServer).StartVpn(ctx, req.(*StartVpnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZeropsVpnProtocol_ProlongVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProlongVpnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsVpnProtocolServer).ProlongVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsVpnProtocol.ZeropsVpnProtocol/prolongVpn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsVpnProtocolServer).ProlongVpn(ctx, req.(*ProlongVpnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZeropsVpnProtocol_ServiceDesc is the grpc.ServiceDesc for ZeropsVpnProtocol service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZeropsVpnProtocol_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zeropsVpnProtocol.ZeropsVpnProtocol",
	HandlerType: (*ZeropsVpnProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "startVpn",
			Handler:    _ZeropsVpnProtocol_StartVpn_Handler,
		},
		{
			MethodName: "prolongVpn",
			Handler:    _ZeropsVpnProtocol_ProlongVpn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zeropsVpnProtocol.proto",
}
