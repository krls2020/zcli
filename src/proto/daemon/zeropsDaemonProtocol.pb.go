// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.3
// source: zeropsDaemonProtocol.proto

package daemon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TunnelState int32

const (
	TunnelState_TUNNEL_SET_INACTIVE TunnelState = 0
	TunnelState_TUNNEL_ACTIVE       TunnelState = 1
)

// Enum value maps for TunnelState.
var (
	TunnelState_name = map[int32]string{
		0: "TUNNEL_SET_INACTIVE",
		1: "TUNNEL_ACTIVE",
	}
	TunnelState_value = map[string]int32{
		"TUNNEL_SET_INACTIVE": 0,
		"TUNNEL_ACTIVE":       1,
	}
)

func (x TunnelState) Enum() *TunnelState {
	p := new(TunnelState)
	*p = x
	return p
}

func (x TunnelState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelState) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsDaemonProtocol_proto_enumTypes[0].Descriptor()
}

func (TunnelState) Type() protoreflect.EnumType {
	return &file_zeropsDaemonProtocol_proto_enumTypes[0]
}

func (x TunnelState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelState.Descriptor instead.
func (TunnelState) EnumDescriptor() ([]byte, []int) {
	return file_zeropsDaemonProtocol_proto_rawDescGZIP(), []int{0}
}

type DnsState int32

const (
	DnsState_DNS_SET_INACTIVE DnsState = 0
	DnsState_DNS_ACTIVE       DnsState = 1
)

// Enum value maps for DnsState.
var (
	DnsState_name = map[int32]string{
		0: "DNS_SET_INACTIVE",
		1: "DNS_ACTIVE",
	}
	DnsState_value = map[string]int32{
		"DNS_SET_INACTIVE": 0,
		"DNS_ACTIVE":       1,
	}
)

func (x DnsState) Enum() *DnsState {
	p := new(DnsState)
	*p = x
	return p
}

func (x DnsState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DnsState) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsDaemonProtocol_proto_enumTypes[1].Descriptor()
}

func (DnsState) Type() protoreflect.EnumType {
	return &file_zeropsDaemonProtocol_proto_enumTypes[1]
}

func (x DnsState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DnsState.Descriptor instead.
func (DnsState) EnumDescriptor() ([]byte, []int) {
	return file_zeropsDaemonProtocol_proto_rawDescGZIP(), []int{1}
}

type VpnStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelState    TunnelState `protobuf:"varint,1,opt,name=tunnelState,proto3,enum=zeropsDaemonProtocol.TunnelState" json:"tunnelState,omitempty"`
	DnsState       DnsState    `protobuf:"varint,2,opt,name=dnsState,proto3,enum=zeropsDaemonProtocol.DnsState" json:"dnsState,omitempty"`
	AdditionalInfo string      `protobuf:"bytes,3,opt,name=additionalInfo,proto3" json:"additionalInfo,omitempty"`
	ProjectId      string      `protobuf:"bytes,4,opt,name=projectId,proto3" json:"projectId,omitempty"`
}

func (x *VpnStatus) Reset() {
	*x = VpnStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsDaemonProtocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpnStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpnStatus) ProtoMessage() {}

func (x *VpnStatus) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsDaemonProtocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpnStatus.ProtoReflect.Descriptor instead.
func (*VpnStatus) Descriptor() ([]byte, []int) {
	return file_zeropsDaemonProtocol_proto_rawDescGZIP(), []int{0}
}

func (x *VpnStatus) GetTunnelState() TunnelState {
	if x != nil {
		return x.TunnelState
	}
	return TunnelState_TUNNEL_SET_INACTIVE
}

func (x *VpnStatus) GetDnsState() DnsState {
	if x != nil {
		return x.DnsState
	}
	return DnsState_DNS_SET_INACTIVE
}

func (x *VpnStatus) GetAdditionalInfo() string {
	if x != nil {
		return x.AdditionalInfo
	}
	return ""
}

func (x *VpnStatus) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type StartVpnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiAddress       string `protobuf:"bytes,1,opt,name=apiAddress,proto3" json:"apiAddress,omitempty"`
	VpnAddress       string `protobuf:"bytes,2,opt,name=vpnAddress,proto3" json:"vpnAddress,omitempty"`
	ProjectId        string `protobuf:"bytes,3,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Token            string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Mtu              uint32 `protobuf:"varint,5,opt,name=mtu,proto3" json:"mtu,omitempty"`
	UserId           string `protobuf:"bytes,6,opt,name=userId,proto3" json:"userId,omitempty"`
	CaCertificateUrl string `protobuf:"bytes,7,opt,name=caCertificateUrl,proto3" json:"caCertificateUrl,omitempty"`
	PreferredPortMin uint32 `protobuf:"varint,8,opt,name=preferredPortMin,proto3" json:"preferredPortMin,omitempty"`
	PreferredPortMax uint32 `protobuf:"varint,9,opt,name=preferredPortMax,proto3" json:"preferredPortMax,omitempty"`
}

func (x *StartVpnRequest) Reset() {
	*x = StartVpnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsDaemonProtocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVpnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVpnRequest) ProtoMessage() {}

func (x *StartVpnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsDaemonProtocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVpnRequest.ProtoReflect.Descriptor instead.
func (*StartVpnRequest) Descriptor() ([]byte, []int) {
	return file_zeropsDaemonProtocol_proto_rawDescGZIP(), []int{1}
}

func (x *StartVpnRequest) GetApiAddress() string {
	if x != nil {
		return x.ApiAddress
	}
	return ""
}

func (x *StartVpnRequest) GetVpnAddress() string {
	if x != nil {
		return x.VpnAddress
	}
	return ""
}

func (x *StartVpnRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *StartVpnRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *StartVpnRequest) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *StartVpnRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StartVpnRequest) GetCaCertificateUrl() string {
	if x != nil {
		return x.CaCertificateUrl
	}
	return ""
}

func (x *StartVpnRequest) GetPreferredPortMin() uint32 {
	if x != nil {
		return x.PreferredPortMin
	}
	return 0
}

func (x *StartVpnRequest) GetPreferredPortMax() uint32 {
	if x != nil {
		return x.PreferredPortMax
	}
	return 0
}

type StopVpnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopVpnRequest) Reset() {
	*x = StopVpnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsDaemonProtocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopVpnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVpnRequest) ProtoMessage() {}

func (x *StopVpnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsDaemonProtocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVpnRequest.ProtoReflect.Descriptor instead.
func (*StopVpnRequest) Descriptor() ([]byte, []int) {
	return file_zeropsDaemonProtocol_proto_rawDescGZIP(), []int{2}
}

type StatusVpnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatusVpnRequest) Reset() {
	*x = StatusVpnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsDaemonProtocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusVpnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusVpnRequest) ProtoMessage() {}

func (x *StatusVpnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsDaemonProtocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusVpnRequest.ProtoReflect.Descriptor instead.
func (*StatusVpnRequest) Descriptor() ([]byte, []int) {
	return file_zeropsDaemonProtocol_proto_rawDescGZIP(), []int{3}
}

var File_zeropsDaemonProtocol_proto protoreflect.FileDescriptor

var file_zeropsDaemonProtocol_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x7a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x22, 0xd2, 0x01, 0x0a, 0x09, 0x76, 0x70, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x43, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x64,
	0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xb3, 0x02, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x70, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x70, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x76,
	0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x76, 0x70, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74,
	0x75, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x61, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x69,
	0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x78, 0x22, 0x10, 0x0a,
	0x0e, 0x73, 0x74, 0x6f, 0x70, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x12, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2a, 0x39, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x45, 0x54,
	0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x2a, 0x30,
	0x0a, 0x08, 0x64, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4e,
	0x53, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4e, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x32, 0x92, 0x02, 0x0a, 0x14, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x52, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x56, 0x70, 0x6e, 0x12, 0x25, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x7a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x70, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x70, 0x56, 0x70, 0x6e, 0x12, 0x24, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x73, 0x74, 0x6f, 0x70, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x70, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x54, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x70, 0x6e, 0x12, 0x26, 0x2e, 0x7a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x76, 0x70, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x69, 0x6f, 0x2f, 0x7a, 0x63, 0x6c,
	0x69, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zeropsDaemonProtocol_proto_rawDescOnce sync.Once
	file_zeropsDaemonProtocol_proto_rawDescData = file_zeropsDaemonProtocol_proto_rawDesc
)

func file_zeropsDaemonProtocol_proto_rawDescGZIP() []byte {
	file_zeropsDaemonProtocol_proto_rawDescOnce.Do(func() {
		file_zeropsDaemonProtocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_zeropsDaemonProtocol_proto_rawDescData)
	})
	return file_zeropsDaemonProtocol_proto_rawDescData
}

var file_zeropsDaemonProtocol_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_zeropsDaemonProtocol_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_zeropsDaemonProtocol_proto_goTypes = []interface{}{
	(TunnelState)(0),         // 0: zeropsDaemonProtocol.tunnelState
	(DnsState)(0),            // 1: zeropsDaemonProtocol.dnsState
	(*VpnStatus)(nil),        // 2: zeropsDaemonProtocol.vpnStatus
	(*StartVpnRequest)(nil),  // 3: zeropsDaemonProtocol.startVpnRequest
	(*StopVpnRequest)(nil),   // 4: zeropsDaemonProtocol.stopVpnRequest
	(*StatusVpnRequest)(nil), // 5: zeropsDaemonProtocol.statusVpnRequest
}
var file_zeropsDaemonProtocol_proto_depIdxs = []int32{
	0, // 0: zeropsDaemonProtocol.vpnStatus.tunnelState:type_name -> zeropsDaemonProtocol.tunnelState
	1, // 1: zeropsDaemonProtocol.vpnStatus.dnsState:type_name -> zeropsDaemonProtocol.dnsState
	3, // 2: zeropsDaemonProtocol.ZeropsDaemonProtocol.startVpn:input_type -> zeropsDaemonProtocol.startVpnRequest
	4, // 3: zeropsDaemonProtocol.ZeropsDaemonProtocol.stopVpn:input_type -> zeropsDaemonProtocol.stopVpnRequest
	5, // 4: zeropsDaemonProtocol.ZeropsDaemonProtocol.statusVpn:input_type -> zeropsDaemonProtocol.statusVpnRequest
	2, // 5: zeropsDaemonProtocol.ZeropsDaemonProtocol.startVpn:output_type -> zeropsDaemonProtocol.vpnStatus
	2, // 6: zeropsDaemonProtocol.ZeropsDaemonProtocol.stopVpn:output_type -> zeropsDaemonProtocol.vpnStatus
	2, // 7: zeropsDaemonProtocol.ZeropsDaemonProtocol.statusVpn:output_type -> zeropsDaemonProtocol.vpnStatus
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_zeropsDaemonProtocol_proto_init() }
func file_zeropsDaemonProtocol_proto_init() {
	if File_zeropsDaemonProtocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zeropsDaemonProtocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpnStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsDaemonProtocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartVpnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsDaemonProtocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopVpnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsDaemonProtocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusVpnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zeropsDaemonProtocol_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zeropsDaemonProtocol_proto_goTypes,
		DependencyIndexes: file_zeropsDaemonProtocol_proto_depIdxs,
		EnumInfos:         file_zeropsDaemonProtocol_proto_enumTypes,
		MessageInfos:      file_zeropsDaemonProtocol_proto_msgTypes,
	}.Build()
	File_zeropsDaemonProtocol_proto = out.File
	file_zeropsDaemonProtocol_proto_rawDesc = nil
	file_zeropsDaemonProtocol_proto_goTypes = nil
	file_zeropsDaemonProtocol_proto_depIdxs = nil
}
